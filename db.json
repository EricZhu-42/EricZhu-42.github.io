{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1556640091325},{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1556640091325},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1556640091325},{"_id":"themes/next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1556640091326},{"_id":"themes/next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1556640091326},{"_id":"themes/next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1556640091337},{"_id":"themes/next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1556640091337},{"_id":"themes/next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1556640091337},{"_id":"themes/next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1556640091338},{"_id":"themes/next/_config.yml","hash":"4a53d6ea9fa8f0c11dc7b370ca2ee9c00ef7a8d0","modified":1556680154061},{"_id":"themes/next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1556640091339},{"_id":"themes/next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1556640091340},{"_id":"themes/next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1556640091340},{"_id":"themes/next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1556640091353},{"_id":"themes/next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1556640091416},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1556640091327},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"78756d8a45b22bdaa51f12b06907bff44afee83e","modified":1556640091328},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1556640091328},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1556640091332},{"_id":"themes/next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1556640091332},{"_id":"themes/next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1556640091333},{"_id":"themes/next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1556640091334},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1556640091333},{"_id":"themes/next/.github/mergeable.yml","hash":"1105a6eb0d4ee1b1bf1554c5c51a47160abed62a","modified":1556640091334},{"_id":"themes/next/.github/release-drafter.yml","hash":"0f826b5ea4646008e2e147dca8b4842ecf96d093","modified":1556640091334},{"_id":"themes/next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1556640091335},{"_id":"themes/next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1556640091335},{"_id":"themes/next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1556640091336},{"_id":"themes/next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1556640091336},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1556640091342},{"_id":"themes/next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1556640091342},{"_id":"themes/next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1556640091343},{"_id":"themes/next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1556640091343},{"_id":"themes/next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1556640091345},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1556640091344},{"_id":"themes/next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1556640091344},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1556640091345},{"_id":"themes/next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1556640091354},{"_id":"themes/next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1556640091356},{"_id":"themes/next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1556640091356},{"_id":"themes/next/languages/fa.yml","hash":"3227072c7e1bfb16ec0517394b60632f4be921dd","modified":1556640091357},{"_id":"themes/next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1556640091357},{"_id":"themes/next/languages/default.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1556640091356},{"_id":"themes/next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1556640091358},{"_id":"themes/next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1556640091358},{"_id":"themes/next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1556640091359},{"_id":"themes/next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1556640091359},{"_id":"themes/next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1556640091360},{"_id":"themes/next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1556640091360},{"_id":"themes/next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1556640091361},{"_id":"themes/next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1556640091361},{"_id":"themes/next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1556640091362},{"_id":"themes/next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1556640091362},{"_id":"themes/next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1556640091363},{"_id":"themes/next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1556640091364},{"_id":"themes/next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1556640091363},{"_id":"themes/next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1556640091364},{"_id":"themes/next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1556640091367},{"_id":"themes/next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1556640091414},{"_id":"themes/next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1556640091413},{"_id":"themes/next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1556640091414},{"_id":"themes/next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1556640091415},{"_id":"themes/next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1556640091415},{"_id":"themes/next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1556640091415},{"_id":"themes/next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1556640091416},{"_id":"themes/next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1556640091419},{"_id":"themes/next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1556640091420},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1556640091525},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1556640091525},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1556640091526},{"_id":"source/_posts/Functional-Programming-of-Python.md","hash":"7b9833c05d2954ccf52604e1fe538a3504261b7b","modified":1556864970961},{"_id":"source/_posts/Python-Requests.md","hash":"5283fa61ad22864dde677531bdfab8e8cc6ef411","modified":1556940788283},{"_id":"source/_posts/QQ-Zone-Spider.md","hash":"201309ac5159cf53162a74760acfb84c58187078","modified":1556695922631},{"_id":"source/_posts/Style-Guide-for-Python-Code.md","hash":"dc171eec5577ef1408fd4356ca118102b5c88266","modified":1556642522646},{"_id":"source/_posts/The-Crowd.md","hash":"80312eae297fc1478c2afaf6d188b82a989c94b7","modified":1556642576102},{"_id":"source/_posts/The-Pragmatic-Programmer-Quick-Reference-Guide.md","hash":"76a63933c0e2c6859fb0ac16749c4883aef6c794","modified":1556642551325},{"_id":"source/_posts/The-Pragmatic-Programmer-chapter-1&2.md","hash":"a4c56fde236e67f7a751236562f115c60369659e","modified":1556642560133},{"_id":"source/_posts/digital-circuit-01.md","hash":"d9b8827a41f7a05aaad15a201251d583ceed5efe","modified":1556940705178},{"_id":"source/_posts/digital-circuit-02.md","hash":"a6cdc2985533a75b073e06e8cbb6dcd6b3b1a72f","modified":1556642606029},{"_id":"source/_posts/python-02.md","hash":"cc79d32641fbb5cb623d69656f2c8ffc6418755a","modified":1556642534550},{"_id":"source/_posts/liner-algebra-01.md","hash":"f79435fb58b997346c8bac68d2b5d935a44bfd25","modified":1556642590949},{"_id":"source/_posts/python-04.md","hash":"408fd0a66866f474670afc8372a84d1e6ddc1d79","modified":1556642510548},{"_id":"source/_posts/python-06.md","hash":"da571402ba089ae87dfe6f76883a41e2a21e0006","modified":1556642473776},{"_id":"source/_posts/python-05.md","hash":"1b6521c520ef8042534b11732b31e9afb2970cdf","modified":1556642497557},{"_id":"source/_posts/python-07.md","hash":"6c4b49ae720d1217a1bc57dea954b88ca6fb75b5","modified":1556642457574},{"_id":"source/_posts/python-08.md","hash":"98bbcf7ce43c9c531cc9d224e7ee6f39a418d489","modified":1556642444349},{"_id":"themes/next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1556640091341},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556640091492},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1556640091329},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1556640091330},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1556640091330},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1556640091331},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1556640091346},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1556640091347},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1556640091348},{"_id":"themes/next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1556640091347},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1556640091349},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1556640091348},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1556640091350},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1556640091350},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1556640091350},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1556640091351},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1556640091352},{"_id":"themes/next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1556640091352},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1556640091353},{"_id":"themes/next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1556640091365},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1556640091366},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1556640091369},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1556640091366},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1556640091370},{"_id":"themes/next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1556640091371},{"_id":"themes/next/layout/_macro/post.swig","hash":"2f47c9356182d2ce5434c4dc41d39912e393cdb4","modified":1556865185888},{"_id":"themes/next/layout/_partials/footer.swig","hash":"53ef8330ecb3c1c2cd5e78008b7f700821c87c2d","modified":1556679871012},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1556640091372},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1556640091378},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1556640091379},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1556640091385},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1556640091386},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1556640091387},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1556640091386},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1556640091390},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1556640091391},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1556640091399},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1556640091399},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1556640091400},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1556640091408},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1556640091405},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1556640091408},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1556640091408},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1556640091409},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1556640091409},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1556640091410},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1556640091410},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1556640091413},{"_id":"themes/next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1556640091417},{"_id":"themes/next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1556640091418},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1556640091419},{"_id":"themes/next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1556640091421},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1556640091421},{"_id":"themes/next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1556640091422},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1556640091423},{"_id":"themes/next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1556640091422},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1556640091423},{"_id":"themes/next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1556640091424},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1556640091424},{"_id":"themes/next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1556640091425},{"_id":"themes/next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1556640091425},{"_id":"themes/next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1556640091426},{"_id":"themes/next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1556640091426},{"_id":"themes/next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1556640091491},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1556640091493},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1556640091493},{"_id":"themes/next/source/images/avatar.jpg","hash":"c2b09690372b847b9f8906c607459b4a87a0de33","modified":1556679960387},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1556640091495},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1556640091495},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1556640091497},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1556640091496},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1556640091496},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1556640091497},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1556640091498},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1556640091498},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1556640091499},{"_id":"themes/next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1556640091499},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556640091499},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1556640091500},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556640091500},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1556640091501},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1556640091501},{"_id":"themes/next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1556640091502},{"_id":"themes/next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1556640091503},{"_id":"themes/next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1556640091503},{"_id":"themes/next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1556640091504},{"_id":"themes/next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1556640091504},{"_id":"themes/next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1556640091505},{"_id":"themes/next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1556640091505},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1556640091507},{"_id":"themes/next/source/js/utils.js","hash":"d58033a6a108981c81ac58ee321167047d7a25df","modified":1556640091508},{"_id":"themes/next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1556640091507},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556640091473},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556640091472},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556640091474},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556640091490},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556640091491},{"_id":"source/_posts/QQ-Zone-Spider/05.png","hash":"5eaad7084ea39043c27c2e9bb43f50b6c5894db1","modified":1556694456720},{"_id":"source/_posts/QQ-Zone-Spider/04.png","hash":"7a97517c7082d6a1a8a98695a809fefbeeafaecd","modified":1556693825486},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1556640091368},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1556640091368},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1556640091375},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1556640091375},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1556640091376},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1556640091376},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1556640091377},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1556640091377},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1556640091373},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1556640091374},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1556640091373},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1556640091379},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1556640091380},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1556640091380},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1556640091381},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1556640091382},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1556640091382},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1556640091383},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1556640091382},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1556640091384},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1556640091384},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1556640091385},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1556640091388},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1556640091389},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1556640091389},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1556640091389},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1556640091390},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1556640091392},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1556640091393},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1556640091394},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1556640091393},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1556640091394},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1556640091395},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1556640091395},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1556640091396},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1556640091396},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1556640091397},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1556640091398},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1556640091397},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1556640091398},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1556640091399},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1556640091401},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1556640091401},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1556640091402},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1556640091402},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1556640091403},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1556640091403},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1556640091404},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1556640091404},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1556640091407},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1556640091406},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1556640091407},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1556640091411},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1556640091412},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1556640091412},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"b126cd706768a86fc9e6daab5298caf7ea9b0878","modified":1556679164216},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1556640091472},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1556640091473},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1556640091474},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1556640091489},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1556640091489},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1556640091490},{"_id":"themes/next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1556640091491},{"_id":"themes/next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1556640091506},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1556640091506},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1556640091509},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1556640091510},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1556640091510},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1556640091511},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1556640091511},{"_id":"source/_posts/QQ-Zone-Spider/03.png","hash":"751cc5f7cd591ff2d88273aa34c0427f22be9ccd","modified":1556687169136},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1556640091523},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1556640091523},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1556640091524},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1556640091520},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1556640091428},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1556640091467},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1556640091429},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1556640091429},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1556640091429},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1556640091430},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1556640091441},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1556640091450},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1556640091450},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1556640091468},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1556640091468},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"9c6194177533619a6f6685dc7e890dcbec456241","modified":1556640091469},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1556640091469},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1556640091470},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1556640091470},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1556640091476},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1556640091477},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1556640091475},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1556640091477},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1556640091478},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1556640091477},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1556640091479},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1556640091479},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1556640091482},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1556640091482},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1556640091483},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1556640091483},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1556640091483},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1556640091485},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1556640091486},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1556640091487},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1556640091486},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1556640091487},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1556640091488},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1556640091512},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1556640091513},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1556640091513},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556640091517},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556640091518},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1556640091432},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1556640091433},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1556640091432},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1556640091433},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1556640091434},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1556640091434},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1556640091435},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1556640091431},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1556640091436},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1556640091437},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1556640091436},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1556640091437},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1556640091439},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1556640091438},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1556640091440},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1556640091441},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1556640091440},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1556640091442},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1556640091443},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1556640091443},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1556640091444},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1556640091445},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1556640091444},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1556640091445},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1556640091446},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1556640091446},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1556640091447},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1556640091447},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1556640091448},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1556640091448},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1556640091449},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1556640091449},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1556640091450},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1556640091457},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1556640091458},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1556640091458},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1556640091459},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1556640091459},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1556640091459},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1556640091460},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1556640091461},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1556640091451},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1556640091452},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1556640091452},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1556640091453},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1556640091453},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1556640091454},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1556640091455},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1556640091462},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1556640091456},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1556640091455},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1556640091456},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1556640091462},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1556640091463},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1556640091463},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1556640091463},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1556640091464},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1556640091465},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1556640091465},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1556640091465},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1556640091466},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1556640091480},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1556640091481},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1556640091484},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1556640091522},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556640091516},{"_id":"source/_posts/QQ-Zone-Spider/02.png","hash":"cdb1ad67c2218df65df625ff1d623a8e2bcc08a8","modified":1556686722770},{"_id":"public/tags/Python/index.html","hash":"ec3ef5d2394810a0ae1e147f378539957bc4ac35","modified":1557244047778},{"_id":"public/tags/digital-circuit/index.html","hash":"53518b8b77acb933a9945799e94014fa6ec9ca66","modified":1557244047778},{"_id":"public/tags/Reading-Notes/index.html","hash":"53d12a835b6ee5c201487295b3fb973d3bd0d43c","modified":1557244047778},{"_id":"public/tags/Digital-Circuit/index.html","hash":"64f17e8869793ff272b4676bcbd41dba5ac5615f","modified":1557244047778},{"_id":"public/tags/python/index.html","hash":"7fd3493476ae75d01cbd10c492de420367c5cf4f","modified":1557244047778},{"_id":"public/tags/liner-algebra/index.html","hash":"2318e8f84610f91d28cbbe25501b07c4baa30ba0","modified":1557244047778},{"_id":"public/archives/page/2/index.html","hash":"ce214dc9438222263979dc532cb728a65ca7f440","modified":1557244047779},{"_id":"public/archives/2019/page/2/index.html","hash":"5d0cf2ac877a18f18df7fc990d48e606840c6f60","modified":1557244047779},{"_id":"public/archives/2019/03/index.html","hash":"009c26bcb7cea741070923a9fd9eab07309cdd3b","modified":1557244047779},{"_id":"public/archives/2019/05/index.html","hash":"85c03a3d8b6317c113bdeeaef134481399c914ea","modified":1557244047779},{"_id":"public/2019/05/01/QQ-Zone-Spider/index.html","hash":"cebbd6ea93c64e0edb29a3065a4ab4b267ce54cd","modified":1557244047779},{"_id":"public/2019/03/26/Functional-Programming-of-Python/index.html","hash":"194e6bd6455a211f2356d4c6819360d1f9b359cb","modified":1557244047779},{"_id":"public/2019/03/21/python-08/index.html","hash":"6f08478a563d768a6235f2089bc09e35db811e0c","modified":1557244047779},{"_id":"public/2019/03/12/python-07/index.html","hash":"1fbc53c9672f162d6e482c9895e89273f1ef3a61","modified":1557244047779},{"_id":"public/2019/03/09/python-06/index.html","hash":"de152156ed9425d013888cb538249aa1092d801b","modified":1557244047779},{"_id":"public/2019/03/05/python-05/index.html","hash":"d81f986cfdafedfd2492dfedbd8ebe850d2a5272","modified":1557244047779},{"_id":"public/2019/02/28/python-04/index.html","hash":"7473bf77816edd1427ceeb23aa21de01da7896b1","modified":1557244047779},{"_id":"public/2019/02/26/python-02/index.html","hash":"b35a12e748950bb9038e5833bcad9c572f6f65be","modified":1557244047779},{"_id":"public/2019/02/26/Style-Guide-for-Python-Code/index.html","hash":"fa9fa8b3f6b8b9775694e9e3d690963520803d59","modified":1557244047779},{"_id":"public/2019/02/22/The-Pragmatic-Programmer-Quick-Reference-Guide/index.html","hash":"b443446c5ee68e208a29df472bcc3190f23639c4","modified":1557244047779},{"_id":"public/2019/02/21/The-Pragmatic-Programmer-chapter-1&2/index.html","hash":"310212ffe3128ca3000c34770d3cc8ed81edbb71","modified":1557244047779},{"_id":"public/2019/02/18/The-Crowd/index.html","hash":"4459e25cfcdf69c3fb371e5a99686728b4cc6ef6","modified":1557244047779},{"_id":"public/2019/02/06/liner-algebra-01/index.html","hash":"5a9d8e1e6277098aaab1d9117b3853869e2854f8","modified":1557244047780},{"_id":"public/2019/02/04/digital-circuit-02/index.html","hash":"063235c84224be10d82d9becccc35e986a29633d","modified":1557244047780},{"_id":"public/2019/02/03/Python-Requests/index.html","hash":"c78e45a7f1a6eada9aa5dbc089cb311c9bf6e7fd","modified":1557244047780},{"_id":"public/2019/02/03/digital-circuit-01/index.html","hash":"2d37c43d6000fcf6a6ab59f18032d0b579163b2f","modified":1557244047780},{"_id":"public/index.html","hash":"2f796f29e5fe13ebbbb852b656136fbda114d3a9","modified":1557244047780},{"_id":"public/page/2/index.html","hash":"8b1c40bd38a6a90e652612ce22a244c85fd9945f","modified":1557244047780},{"_id":"public/archives/index.html","hash":"600c56aab86e5a5c113638ed2dd0edaf797e2229","modified":1557244047780},{"_id":"public/archives/2019/index.html","hash":"a094cdecfbde6c2cf3090fd8bae92b221d1b95f7","modified":1557244047780},{"_id":"public/archives/2019/02/index.html","hash":"06458080e4a599f45308da0cbb6de7a129b5a51d","modified":1557244047780},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1557244047786},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1557244047786},{"_id":"public/images/avatar.jpg","hash":"c2b09690372b847b9f8906c607459b4a87a0de33","modified":1557244047786},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1557244047786},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1557244047786},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1557244047786},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1557244047786},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1557244047786},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1557244047786},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1557244047786},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1557244047786},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1557244047786},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1557244047786},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1557244047786},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557244047786},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1557244047786},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1557244047786},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1557244047786},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1557244047786},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1557244047786},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1557244048365},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1557244048366},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1557244048368},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1557244048368},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1557244048368},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1557244048368},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1557244048368},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1557244048369},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1557244048369},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1557244048369},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1557244048369},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1557244048369},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1557244048369},{"_id":"public/css/main.css","hash":"739e29d2483d9626cf10c22ffd5e4f5a2265a8a7","modified":1557244048369},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1557244048369},{"_id":"public/2019/05/01/QQ-Zone-Spider/04.png","hash":"7a97517c7082d6a1a8a98695a809fefbeeafaecd","modified":1557244048369},{"_id":"public/2019/05/01/QQ-Zone-Spider/03.png","hash":"751cc5f7cd591ff2d88273aa34c0427f22be9ccd","modified":1557244048369},{"_id":"public/2019/05/01/QQ-Zone-Spider/05.png","hash":"5eaad7084ea39043c27c2e9bb43f50b6c5894db1","modified":1557244048369},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1557244048371},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1557244048371},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1557244048371},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1557244048374},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1557244048377},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1557244048377},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1557244048377},{"_id":"public/2019/05/01/QQ-Zone-Spider/02.png","hash":"cdb1ad67c2218df65df625ff1d623a8e2bcc08a8","modified":1557244048393},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1557244048396},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1557244048399}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"Python中的函数式编程","date":"2019-03-25T16:00:00.000Z","_content":"\n以下介绍Python中**函数式编程**的一些基础知识。\n\n### 高阶函数\n\n#### 什么是高阶函数？\n\n   **一切**的Python对象都是**第一类对象**，这意味着可以将一切可命名的对象直接当作数据进行处理（如函数，模块，异常等）。因此，变量可以指向一个函数，一切可以由变量占据的位置也可以由函数替代。\n\n   **高阶函数** (Higher-order Function) 指接受一个函数作为参数的函数。以下为一个简单的例子。\n\n```python\ndef add(x, y, f):\n    return f(x) + f(y)\n```\n\n<!-- more --> \n#### map() & reduce()\n\n   > `map(function, iterable, ...)`      \n   >\n   > Return an iterator that applies *function* to every item of *iterable*, yielding the results. If additional *iterable* arguments are passed, *function* must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted.\n\n   `map()`函数接收两个参数，一个是函数，一个是`Iterable`，`map`将传入的函数依次作用到序列的每个元素，并把结果作为新的`Iterator`返回。\n\n   `reduce`把一个函数作用在一个序列`[x1, x2, x3, ...]`上，这个函数必须接收两个参数，`reduce`把结果继续和序列的下一个元素做累积计算。其效果类似于：\n\n   ```python\nreduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)\n   ```\n\n   在使用map()和reduce()时，常常使用lambda函数来简化不必要的函数定义。\n\n#### filter（）\n\n`filter()`也接收一个函数和一个序列。和`map()`不同的是，`filter()`把传入的函数依次作用于每个元素，然后根据返回值是`True`还是`False`决定保留还是丢弃该元素。\n    \n例如，把一个序列中的空字符串删掉，可以这么写：\n\n```python\ndef not_empty(s):\n    return s and s.strip()\nlist(filter(not_empty, ['A', '', 'B', None, 'C', '  ']))\n# Result: ['A', 'B', 'C']\n```\n\n注意到`filter()`函数返回的是一个`Iterator`，也就是一个惰性序列，所以要强迫`filter()`完成计算结果，需要用`list()`函数获得所有结果并返回list。\n\n#### sorted()\n\n`sorted()`函数也是一个高阶函数，它还可以接收一个`key`函数来实现自定义的排序。key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。\n    \n要进行反向排序，不必改动key函数，可以传入第三个参数`reverse=True`。\n\n### 函数作为返回值\n\n高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。\n\n在求和问题时，若求和时不需要得到结果，则可以不返回求和的结果，而是返回求和的函数：\n\n```python\ndef lazy_sum(*args):\n    def sum():\n        ax = 0\n        for n in args:\n            ax = ax + n\n        return ax\n    return sum\n\n>>> f = lazy_sum(1, 3, 5, 7, 9)\n>>> f\n<function lazy_sum.<locals>.sum at 0x101c6ed90>\n\n>>> f()\n25\n```\n\n在这个例子中，我们在函数`lazy_sum`中又定义了函数`sum`，并且，内部函数`sum`可以引用外部函数`lazy_sum`的参数和局部变量，当`lazy_sum`返回函数`sum`时，相关参数和变量都保存在返回的函数中。这种程序结构称为**闭包**。\n\n> 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。\n\n### 匿名函数\n\n可以通过lambda表达式定义匿名函数。\n\n```python\n>>> list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n匿名函数有个限制，就是只能有一个表达式，不用写`return`，返回值就是该表达式的结果。匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。同样，也可以把匿名函数作为返回值返回。\n\n### 装饰器\n\n装饰器 (decorator) 是一个返回函数的高阶函数。使用装饰器时，借助Python的@语法，把decorator置于函数的定义处。\n\n```python\ndef log(func):\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n\n@log\ndef now():\n    print('2015-3-25')\n\n>>> now()\ncall now():\n2015-3-25\n```\n\n把`@log`放到`now()`函数的定义处，相当于执行了语句：\n\n```python\nnow = log(now)\n```\n\n`wrapper()`函数的参数定义是`(*args, **kw)`，因此，`wrapper()`函数可以接受任意参数的调用。如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。\n\n另外，被`wrapper()`装饰后的函数签名会变为`wrapper`，这会导致一些依赖函数签名的应用出错。为了解决这个问题，可以用python内置的 `functools.wraps` 装饰`wrapper()`. 因此，一个完整的decorator的写法如下：\n\n```python\nimport functools\n\ndef log(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n```\n\n或针对带参数的decorator：\n\n```python\nimport functools\n\ndef log(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print('%s %s():' % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n```\n\n### 偏函数\n\n**偏函数**（`functools.partial`）的作用是把一个函数的某些参数固定住（也就是设置默认值），返回一个新的函数。这使得调用这个新函数会更加简单。\n\n```python\n>>> import functools\n>>> int2 = functools.partial(int, base=2)\n>>> int2('1000000')\n64\n>>> int2('1010101')\n85\n>>> int2('1000000', base=10)\n1000000\n```\n\n参考资料：\n\n1. [函数式编程](<https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000>)\n2. [Python 3.7.3 documentation](<https://docs.python.org/3/library/functions.html>)","source":"_posts/Functional-Programming-of-Python.md","raw":"---\ntitle: Python中的函数式编程\ndate: 2019-03-26\ntags: \n\t- Python\n---\n\n以下介绍Python中**函数式编程**的一些基础知识。\n\n### 高阶函数\n\n#### 什么是高阶函数？\n\n   **一切**的Python对象都是**第一类对象**，这意味着可以将一切可命名的对象直接当作数据进行处理（如函数，模块，异常等）。因此，变量可以指向一个函数，一切可以由变量占据的位置也可以由函数替代。\n\n   **高阶函数** (Higher-order Function) 指接受一个函数作为参数的函数。以下为一个简单的例子。\n\n```python\ndef add(x, y, f):\n    return f(x) + f(y)\n```\n\n<!-- more --> \n#### map() & reduce()\n\n   > `map(function, iterable, ...)`      \n   >\n   > Return an iterator that applies *function* to every item of *iterable*, yielding the results. If additional *iterable* arguments are passed, *function* must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted.\n\n   `map()`函数接收两个参数，一个是函数，一个是`Iterable`，`map`将传入的函数依次作用到序列的每个元素，并把结果作为新的`Iterator`返回。\n\n   `reduce`把一个函数作用在一个序列`[x1, x2, x3, ...]`上，这个函数必须接收两个参数，`reduce`把结果继续和序列的下一个元素做累积计算。其效果类似于：\n\n   ```python\nreduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)\n   ```\n\n   在使用map()和reduce()时，常常使用lambda函数来简化不必要的函数定义。\n\n#### filter（）\n\n`filter()`也接收一个函数和一个序列。和`map()`不同的是，`filter()`把传入的函数依次作用于每个元素，然后根据返回值是`True`还是`False`决定保留还是丢弃该元素。\n    \n例如，把一个序列中的空字符串删掉，可以这么写：\n\n```python\ndef not_empty(s):\n    return s and s.strip()\nlist(filter(not_empty, ['A', '', 'B', None, 'C', '  ']))\n# Result: ['A', 'B', 'C']\n```\n\n注意到`filter()`函数返回的是一个`Iterator`，也就是一个惰性序列，所以要强迫`filter()`完成计算结果，需要用`list()`函数获得所有结果并返回list。\n\n#### sorted()\n\n`sorted()`函数也是一个高阶函数，它还可以接收一个`key`函数来实现自定义的排序。key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。\n    \n要进行反向排序，不必改动key函数，可以传入第三个参数`reverse=True`。\n\n### 函数作为返回值\n\n高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。\n\n在求和问题时，若求和时不需要得到结果，则可以不返回求和的结果，而是返回求和的函数：\n\n```python\ndef lazy_sum(*args):\n    def sum():\n        ax = 0\n        for n in args:\n            ax = ax + n\n        return ax\n    return sum\n\n>>> f = lazy_sum(1, 3, 5, 7, 9)\n>>> f\n<function lazy_sum.<locals>.sum at 0x101c6ed90>\n\n>>> f()\n25\n```\n\n在这个例子中，我们在函数`lazy_sum`中又定义了函数`sum`，并且，内部函数`sum`可以引用外部函数`lazy_sum`的参数和局部变量，当`lazy_sum`返回函数`sum`时，相关参数和变量都保存在返回的函数中。这种程序结构称为**闭包**。\n\n> 返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。\n\n### 匿名函数\n\n可以通过lambda表达式定义匿名函数。\n\n```python\n>>> list(map(lambda x: x * x, [1, 2, 3, 4, 5, 6, 7, 8, 9]))\n[1, 4, 9, 16, 25, 36, 49, 64, 81]\n```\n\n匿名函数有个限制，就是只能有一个表达式，不用写`return`，返回值就是该表达式的结果。匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。同样，也可以把匿名函数作为返回值返回。\n\n### 装饰器\n\n装饰器 (decorator) 是一个返回函数的高阶函数。使用装饰器时，借助Python的@语法，把decorator置于函数的定义处。\n\n```python\ndef log(func):\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n\n@log\ndef now():\n    print('2015-3-25')\n\n>>> now()\ncall now():\n2015-3-25\n```\n\n把`@log`放到`now()`函数的定义处，相当于执行了语句：\n\n```python\nnow = log(now)\n```\n\n`wrapper()`函数的参数定义是`(*args, **kw)`，因此，`wrapper()`函数可以接受任意参数的调用。如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。\n\n另外，被`wrapper()`装饰后的函数签名会变为`wrapper`，这会导致一些依赖函数签名的应用出错。为了解决这个问题，可以用python内置的 `functools.wraps` 装饰`wrapper()`. 因此，一个完整的decorator的写法如下：\n\n```python\nimport functools\n\ndef log(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kw):\n        print('call %s():' % func.__name__)\n        return func(*args, **kw)\n    return wrapper\n```\n\n或针对带参数的decorator：\n\n```python\nimport functools\n\ndef log(text):\n    def decorator(func):\n        @functools.wraps(func)\n        def wrapper(*args, **kw):\n            print('%s %s():' % (text, func.__name__))\n            return func(*args, **kw)\n        return wrapper\n    return decorator\n```\n\n### 偏函数\n\n**偏函数**（`functools.partial`）的作用是把一个函数的某些参数固定住（也就是设置默认值），返回一个新的函数。这使得调用这个新函数会更加简单。\n\n```python\n>>> import functools\n>>> int2 = functools.partial(int, base=2)\n>>> int2('1000000')\n64\n>>> int2('1010101')\n85\n>>> int2('1000000', base=10)\n1000000\n```\n\n参考资料：\n\n1. [函数式编程](<https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000>)\n2. [Python 3.7.3 documentation](<https://docs.python.org/3/library/functions.html>)","slug":"Functional-Programming-of-Python","published":1,"updated":"2019-05-03T06:29:30.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbja000030uvdtdajroa","content":"<p>以下介绍Python中<strong>函数式编程</strong>的一些基础知识。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><h4 id=\"什么是高阶函数？\"><a href=\"#什么是高阶函数？\" class=\"headerlink\" title=\"什么是高阶函数？\"></a>什么是高阶函数？</h4><p>   <strong>一切</strong>的Python对象都是<strong>第一类对象</strong>，这意味着可以将一切可命名的对象直接当作数据进行处理（如函数，模块，异常等）。因此，变量可以指向一个函数，一切可以由变量占据的位置也可以由函数替代。</p>\n<p>   <strong>高阶函数</strong> (Higher-order Function) 指接受一个函数作为参数的函数。以下为一个简单的例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y, f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(x) + f(y)</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<h4 id=\"map-amp-reduce\"><a href=\"#map-amp-reduce\" class=\"headerlink\" title=\"map() &amp; reduce()\"></a>map() &amp; reduce()</h4><blockquote>\n<p><code>map(function, iterable, ...)</code>      </p>\n<p>Return an iterator that applies <em>function</em> to every item of <em>iterable</em>, yielding the results. If additional <em>iterable</em> arguments are passed, <em>function</em> must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted.</p>\n</blockquote>\n<p>   <code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p>\n<p>   <code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算。其效果类似于：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>\n<p>   在使用map()和reduce()时，常常使用lambda函数来简化不必要的函数定义。</p>\n<h4 id=\"filter（）\"><a href=\"#filter（）\" class=\"headerlink\" title=\"filter（）\"></a>filter（）</h4><p><code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p>\n<p>例如，把一个序列中的空字符串删掉，可以这么写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_empty</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s <span class=\"keyword\">and</span> s.strip()</span><br><span class=\"line\">list(filter(not_empty, [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">None</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>]))</span><br><span class=\"line\"><span class=\"comment\"># Result: ['A', 'B', 'C']</span></span><br></pre></td></tr></table></figure>\n<p>注意到<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list。</p>\n<h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a>sorted()</h4><p><code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序。key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。</p>\n<p>要进行反向排序，不必改动key函数，可以传入第三个参数<code>reverse=True</code>。</p>\n<h3 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>\n<p>在求和问题时，若求和时不需要得到结果，则可以不返回求和的结果，而是返回求和的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lazy_sum</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        ax = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            ax = ax + n</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = lazy_sum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f</span><br><span class=\"line\">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class=\"number\">0x101c6ed90</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f()</span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中。这种程序结构称为<strong>闭包</strong>。</p>\n<blockquote>\n<p>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p>\n</blockquote>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>可以通过lambda表达式定义匿名函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(map(<span class=\"keyword\">lambda</span> x: x * x, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]))</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]</span><br></pre></td></tr></table></figure>\n<p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。同样，也可以把匿名函数作为返回值返回。</p>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>装饰器 (decorator) 是一个返回函数的高阶函数。使用装饰器时，借助Python的@语法，把decorator置于函数的定义处。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'call %s():'</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@log</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'2015-3-25'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now()</span><br><span class=\"line\">call now():</span><br><span class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-3</span><span class=\"number\">-25</span></span><br></pre></td></tr></table></figure>\n<p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now = log(now)</span><br></pre></td></tr></table></figure>\n<p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。</p>\n<p>另外，被<code>wrapper()</code>装饰后的函数签名会变为<code>wrapper</code>，这会导致一些依赖函数签名的应用出错。为了解决这个问题，可以用python内置的 <code>functools.wraps</code> 装饰<code>wrapper()</code>. 因此，一个完整的decorator的写法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'call %s():'</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>或针对带参数的decorator：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">            print(<span class=\"string\">'%s %s():'</span> % (text, func.__name__))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<h3 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h3><p><strong>偏函数</strong>（<code>functools.partial</code>）的作用是把一个函数的某些参数固定住（也就是设置默认值），返回一个新的函数。这使得调用这个新函数会更加简单。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1000000'</span>)</span><br><span class=\"line\"><span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1010101'</span>)</span><br><span class=\"line\"><span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1000000'</span>, base=<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">1000000</span></span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000\" target=\"_blank\" rel=\"noopener\">函数式编程</a></li>\n<li><a href=\"https://docs.python.org/3/library/functions.html\" target=\"_blank\" rel=\"noopener\">Python 3.7.3 documentation</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>以下介绍Python中<strong>函数式编程</strong>的一些基础知识。</p>\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数\"></a>高阶函数</h3><h4 id=\"什么是高阶函数？\"><a href=\"#什么是高阶函数？\" class=\"headerlink\" title=\"什么是高阶函数？\"></a>什么是高阶函数？</h4><p>   <strong>一切</strong>的Python对象都是<strong>第一类对象</strong>，这意味着可以将一切可命名的对象直接当作数据进行处理（如函数，模块，异常等）。因此，变量可以指向一个函数，一切可以由变量占据的位置也可以由函数替代。</p>\n<p>   <strong>高阶函数</strong> (Higher-order Function) 指接受一个函数作为参数的函数。以下为一个简单的例子。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span><span class=\"params\">(x, y, f)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> f(x) + f(y)</span><br></pre></td></tr></table></figure>","more":"<h4 id=\"map-amp-reduce\"><a href=\"#map-amp-reduce\" class=\"headerlink\" title=\"map() &amp; reduce()\"></a>map() &amp; reduce()</h4><blockquote>\n<p><code>map(function, iterable, ...)</code>      </p>\n<p>Return an iterator that applies <em>function</em> to every item of <em>iterable</em>, yielding the results. If additional <em>iterable</em> arguments are passed, <em>function</em> must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted.</p>\n</blockquote>\n<p>   <code>map()</code>函数接收两个参数，一个是函数，一个是<code>Iterable</code>，<code>map</code>将传入的函数依次作用到序列的每个元素，并把结果作为新的<code>Iterator</code>返回。</p>\n<p>   <code>reduce</code>把一个函数作用在一个序列<code>[x1, x2, x3, ...]</code>上，这个函数必须接收两个参数，<code>reduce</code>把结果继续和序列的下一个元素做累积计算。其效果类似于：</p>\n   <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reduce(f, [x1, x2, x3, x4]) = f(f(f(x1, x2), x3), x4)</span><br></pre></td></tr></table></figure>\n<p>   在使用map()和reduce()时，常常使用lambda函数来简化不必要的函数定义。</p>\n<h4 id=\"filter（）\"><a href=\"#filter（）\" class=\"headerlink\" title=\"filter（）\"></a>filter（）</h4><p><code>filter()</code>也接收一个函数和一个序列。和<code>map()</code>不同的是，<code>filter()</code>把传入的函数依次作用于每个元素，然后根据返回值是<code>True</code>还是<code>False</code>决定保留还是丢弃该元素。</p>\n<p>例如，把一个序列中的空字符串删掉，可以这么写：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">not_empty</span><span class=\"params\">(s)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> s <span class=\"keyword\">and</span> s.strip()</span><br><span class=\"line\">list(filter(not_empty, [<span class=\"string\">'A'</span>, <span class=\"string\">''</span>, <span class=\"string\">'B'</span>, <span class=\"literal\">None</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'  '</span>]))</span><br><span class=\"line\"><span class=\"comment\"># Result: ['A', 'B', 'C']</span></span><br></pre></td></tr></table></figure>\n<p>注意到<code>filter()</code>函数返回的是一个<code>Iterator</code>，也就是一个惰性序列，所以要强迫<code>filter()</code>完成计算结果，需要用<code>list()</code>函数获得所有结果并返回list。</p>\n<h4 id=\"sorted\"><a href=\"#sorted\" class=\"headerlink\" title=\"sorted()\"></a>sorted()</h4><p><code>sorted()</code>函数也是一个高阶函数，它还可以接收一个<code>key</code>函数来实现自定义的排序。key指定的函数将作用于list的每一个元素上，并根据key函数返回的结果进行排序。</p>\n<p>要进行反向排序，不必改动key函数，可以传入第三个参数<code>reverse=True</code>。</p>\n<h3 id=\"函数作为返回值\"><a href=\"#函数作为返回值\" class=\"headerlink\" title=\"函数作为返回值\"></a>函数作为返回值</h3><p>高阶函数除了可以接受函数作为参数外，还可以把函数作为结果值返回。</p>\n<p>在求和问题时，若求和时不需要得到结果，则可以不返回求和的结果，而是返回求和的函数：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">lazy_sum</span><span class=\"params\">(*args)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">        ax = <span class=\"number\">0</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> args:</span><br><span class=\"line\">            ax = ax + n</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ax</span><br><span class=\"line\">    <span class=\"keyword\">return</span> sum</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = lazy_sum(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f</span><br><span class=\"line\">&lt;function lazy_sum.&lt;locals&gt;.sum at <span class=\"number\">0x101c6ed90</span>&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f()</span><br><span class=\"line\"><span class=\"number\">25</span></span><br></pre></td></tr></table></figure>\n<p>在这个例子中，我们在函数<code>lazy_sum</code>中又定义了函数<code>sum</code>，并且，内部函数<code>sum</code>可以引用外部函数<code>lazy_sum</code>的参数和局部变量，当<code>lazy_sum</code>返回函数<code>sum</code>时，相关参数和变量都保存在返回的函数中。这种程序结构称为<strong>闭包</strong>。</p>\n<blockquote>\n<p>返回闭包时牢记一点：返回函数不要引用任何循环变量，或者后续会发生变化的变量。</p>\n</blockquote>\n<h3 id=\"匿名函数\"><a href=\"#匿名函数\" class=\"headerlink\" title=\"匿名函数\"></a>匿名函数</h3><p>可以通过lambda表达式定义匿名函数。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(map(<span class=\"keyword\">lambda</span> x: x * x, [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]))</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">16</span>, <span class=\"number\">25</span>, <span class=\"number\">36</span>, <span class=\"number\">49</span>, <span class=\"number\">64</span>, <span class=\"number\">81</span>]</span><br></pre></td></tr></table></figure>\n<p>匿名函数有个限制，就是只能有一个表达式，不用写<code>return</code>，返回值就是该表达式的结果。匿名函数也是一个函数对象，也可以把匿名函数赋值给一个变量，再利用变量来调用该函数。同样，也可以把匿名函数作为返回值返回。</p>\n<h3 id=\"装饰器\"><a href=\"#装饰器\" class=\"headerlink\" title=\"装饰器\"></a>装饰器</h3><p>装饰器 (decorator) 是一个返回函数的高阶函数。使用装饰器时，借助Python的@语法，把decorator置于函数的定义处。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'call %s():'</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@log</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">now</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    print(<span class=\"string\">'2015-3-25'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>now()</span><br><span class=\"line\">call now():</span><br><span class=\"line\"><span class=\"number\">2015</span><span class=\"number\">-3</span><span class=\"number\">-25</span></span><br></pre></td></tr></table></figure>\n<p>把<code>@log</code>放到<code>now()</code>函数的定义处，相当于执行了语句：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">now = log(now)</span><br></pre></td></tr></table></figure>\n<p><code>wrapper()</code>函数的参数定义是<code>(*args, **kw)</code>，因此，<code>wrapper()</code>函数可以接受任意参数的调用。如果decorator本身需要传入参数，那就需要编写一个返回decorator的高阶函数，写出来会更复杂。</p>\n<p>另外，被<code>wrapper()</code>装饰后的函数签名会变为<code>wrapper</code>，这会导致一些依赖函数签名的应用出错。为了解决这个问题，可以用python内置的 <code>functools.wraps</code> 装饰<code>wrapper()</code>. 因此，一个完整的decorator的写法如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">    @functools.wraps(func)</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">        print(<span class=\"string\">'call %s():'</span> % func.__name__)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> wrapper</span><br></pre></td></tr></table></figure>\n<p>或针对带参数的decorator：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">log</span><span class=\"params\">(text)</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decorator</span><span class=\"params\">(func)</span>:</span></span><br><span class=\"line\"><span class=\"meta\">        @functools.wraps(func)</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">wrapper</span><span class=\"params\">(*args, **kw)</span>:</span></span><br><span class=\"line\">            print(<span class=\"string\">'%s %s():'</span> % (text, func.__name__))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> func(*args, **kw)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> wrapper</span><br><span class=\"line\">    <span class=\"keyword\">return</span> decorator</span><br></pre></td></tr></table></figure>\n<h3 id=\"偏函数\"><a href=\"#偏函数\" class=\"headerlink\" title=\"偏函数\"></a>偏函数</h3><p><strong>偏函数</strong>（<code>functools.partial</code>）的作用是把一个函数的某些参数固定住（也就是设置默认值），返回一个新的函数。这使得调用这个新函数会更加简单。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2 = functools.partial(int, base=<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1000000'</span>)</span><br><span class=\"line\"><span class=\"number\">64</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1010101'</span>)</span><br><span class=\"line\"><span class=\"number\">85</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>int2(<span class=\"string\">'1000000'</span>, base=<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"number\">1000000</span></span><br></pre></td></tr></table></figure>\n<p>参考资料：</p>\n<ol>\n<li><a href=\"https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317848428125ae6aa24068b4c50a7e71501ab275d52000\" target=\"_blank\" rel=\"noopener\">函数式编程</a></li>\n<li><a href=\"https://docs.python.org/3/library/functions.html\" target=\"_blank\" rel=\"noopener\">Python 3.7.3 documentation</a></li>\n</ol>"},{"title":"Python-Requests用法简介","date":"2019-02-02T16:00:00.000Z","_content":"\n>Requests is an elegant and simple HTTP library for Python, built for human beings.\n\n## 安装方法\n使用命令 `pip install requests` 安装\n\n## 使用方法\n<!-- more -->\n首先，导入Requests模块：\n`import requests`  \n\n\n1. **HTTP基本请求类型**  \n```\nr = requests.get('https://api.github.com/events')  \nr = requests.post('http://httpbin.org/post'）\n```\n2. **传递URL参数**  \n使用 `params` 关键字参数，以一个字符串字典提供这些参数，注意字典里值为 None 的键都不会被添加到 URL 的查询字符串里。  \n```\npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.get(\"http://httpbin.org/get\", params = payload)\n```\n\n3. **在POST请求中发送数据**   \n传递一个字典给 data 参数，例如  \n```\n>>> payload = {'key1': 'value1', 'key2': 'value2'}\n>>> r = requests.post(\"http://httpbin.org/post\", data=payload)\n```\n\n4. **定制请求头**  \n传递一个字典给 headers 参数，例如\n```\n>>> url = 'https://api.github.com/some/endpoint'\n>>> headers = {'user-agent': 'my-app/0.0.1'}\n>>> r = requests.get(url, headers=headers)\n```\n5. **读取响应内容**\n```\n>>> import requests\n>>> r = requests.get('https://api.github.com/events')\n```\n- 用 `r.text` 读取服务器响应的内容\n```\n>>> r.text\nu'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n```\n- 用 `r.encoding` 来获得**推测的**文本编码，并可以对其进行修改，改变 `r.text` 的解析方法\n```\n>>> r.encoding\n'utf-8'\n>>> r.encoding = 'ISO-8859-1'\n```\n- 用 `r.content` 读取二进制的响应内容。例如，可以用返回的二进制数据创建一张图片：\n```\n>>> from PIL import Image\n>>> from io import BytesIO\n>>> i = Image.open(BytesIO(r.content))\n```\n- 用 `r.status_code` 检测响应状态码，也可以使用内置的状态码查询对象 `requests.codes.ok` \n```\n>>> r = requests.get('http://httpbin.org/get')\n>>> r.status_code\n200\n>>> r.status_code == requests.codes.ok\nTrue\n```\n- 用 `r.headers` 来获取响应头内容。\n```\n>>> r.headers\n{\n    'content-encoding': 'gzip',\n    'transfer-encoding': 'chunked',\n    'connection': 'close',\n    'server': 'nginx/1.0.4',\n    'x-runtime': '148ms',\n    'etag': '\"e1ca502697e5c9317743dc078f67693f\"',\n    'content-type': 'application/json'\n} \n```\n- 用 `r.json()` 获取经内置JSON解码器处理的JSON数据。该方法会返回一个JSON对象。当JSON解析失败时，r.json()会抛出一个异常。需要注意的是，成功调用 `r.json()` 并**不**意味着响应的成功。要检查请求是否成功，请使用 `r.raise_for_status()` 或者检查 `r.status_code` 是否和你的期望相同。\n6. **POST一个多部分编码(Multipart-Encoded)的文件**  \n注意，请使用二进制模式(binary mode)打开文件，防止 Requests 提供的 Content-Length header 发生错误。\n```\n>>> url = 'http://httpbin.org/post'\n>>> files = {'file': open('report.xls', 'rb')}\n>>> r = requests.post(url, files=files)\n```\n7. **自定义请求头部**  \n伪装请求头部是采集时经常用的，我们可以用这个方法来隐藏：\n```\n>>> r = requests.get('http://www.zhidaow.com')\n>>> print (r.request.headers['User-Agent'])\n\"python-requests/1.2.3 CPython/2.7.3 Windows/XP\"\n>>> headers = {'User-Agent': 'alexkh'}\n>>> r = requests.get('http://www.zhidaow.com', headers = headers)\n>>> print (r.request.headers['User-Agent'])  \n\"alexkh\"\n```\n8. **超时**  \n使用`timeout`参数使得对象在经过该参数所指定的秒数后停止响应，以此防止程序永远失去响应。  \n*注意：`timeout` 仅对连接过程有效，与响应体的下载无关。*\n```\n>>> requests.get('http://github.com', timeout=0.001)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nrequests.exceptions.Timeout: HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)\n```\n9. **错误与异常**  \n遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 `ConnectionError` 异常。   \n如果 HTTP 请求返回了不成功的状态码， `Response.raise_for_status()` 会抛出一个 `HTTPError` 异常。  \n若请求超时，则抛出一个 `Timeout` 异常。  \n若请求超过了设定的最大重定向次数，则会抛出一个 `TooManyRedirects` 异常。  \n10. **代理**  \n如果需要使用代理，你可以通过为任意请求方法提供 `proxies` 参数来配置单个请求：\n```python\nproxies = {\n  \"http\": \"http://10.10.1.10:3128\",\n  \"https\": \"http://10.10.1.10:1080\",\n}\nrequests.get(\"http://example.org\", proxies=proxies)\n```\n若你的代理需要使用HTTP Basic Auth，可以使用 http://user:password@host/ 语法：\n```python\nproxies = {\n    \"http\": \"http://user:pass@10.10.1.10:3128/\",\n}\n```\n\n## 其他链接\n- [Requests官方中文文档](http://cn.python-requests.org/zh_CN/latest/index.html)\n\n## 参考资料\n1. <http://cn.python-requests.org/zh_CN/latest/index.html>\n2. <https://www.cnblogs.com/lgh344902118/p/6780960.html>\n\n\n\n\n\n","source":"_posts/Python-Requests.md","raw":"---\ntitle: Python-Requests用法简介\ndate: 2019-02-03\ntags: [Python]\n---\n\n>Requests is an elegant and simple HTTP library for Python, built for human beings.\n\n## 安装方法\n使用命令 `pip install requests` 安装\n\n## 使用方法\n<!-- more -->\n首先，导入Requests模块：\n`import requests`  \n\n\n1. **HTTP基本请求类型**  \n```\nr = requests.get('https://api.github.com/events')  \nr = requests.post('http://httpbin.org/post'）\n```\n2. **传递URL参数**  \n使用 `params` 关键字参数，以一个字符串字典提供这些参数，注意字典里值为 None 的键都不会被添加到 URL 的查询字符串里。  \n```\npayload = {'key1': 'value1', 'key2': 'value2'}\nr = requests.get(\"http://httpbin.org/get\", params = payload)\n```\n\n3. **在POST请求中发送数据**   \n传递一个字典给 data 参数，例如  \n```\n>>> payload = {'key1': 'value1', 'key2': 'value2'}\n>>> r = requests.post(\"http://httpbin.org/post\", data=payload)\n```\n\n4. **定制请求头**  \n传递一个字典给 headers 参数，例如\n```\n>>> url = 'https://api.github.com/some/endpoint'\n>>> headers = {'user-agent': 'my-app/0.0.1'}\n>>> r = requests.get(url, headers=headers)\n```\n5. **读取响应内容**\n```\n>>> import requests\n>>> r = requests.get('https://api.github.com/events')\n```\n- 用 `r.text` 读取服务器响应的内容\n```\n>>> r.text\nu'[{\"repository\":{\"open_issues\":0,\"url\":\"https://github.com/...\n```\n- 用 `r.encoding` 来获得**推测的**文本编码，并可以对其进行修改，改变 `r.text` 的解析方法\n```\n>>> r.encoding\n'utf-8'\n>>> r.encoding = 'ISO-8859-1'\n```\n- 用 `r.content` 读取二进制的响应内容。例如，可以用返回的二进制数据创建一张图片：\n```\n>>> from PIL import Image\n>>> from io import BytesIO\n>>> i = Image.open(BytesIO(r.content))\n```\n- 用 `r.status_code` 检测响应状态码，也可以使用内置的状态码查询对象 `requests.codes.ok` \n```\n>>> r = requests.get('http://httpbin.org/get')\n>>> r.status_code\n200\n>>> r.status_code == requests.codes.ok\nTrue\n```\n- 用 `r.headers` 来获取响应头内容。\n```\n>>> r.headers\n{\n    'content-encoding': 'gzip',\n    'transfer-encoding': 'chunked',\n    'connection': 'close',\n    'server': 'nginx/1.0.4',\n    'x-runtime': '148ms',\n    'etag': '\"e1ca502697e5c9317743dc078f67693f\"',\n    'content-type': 'application/json'\n} \n```\n- 用 `r.json()` 获取经内置JSON解码器处理的JSON数据。该方法会返回一个JSON对象。当JSON解析失败时，r.json()会抛出一个异常。需要注意的是，成功调用 `r.json()` 并**不**意味着响应的成功。要检查请求是否成功，请使用 `r.raise_for_status()` 或者检查 `r.status_code` 是否和你的期望相同。\n6. **POST一个多部分编码(Multipart-Encoded)的文件**  \n注意，请使用二进制模式(binary mode)打开文件，防止 Requests 提供的 Content-Length header 发生错误。\n```\n>>> url = 'http://httpbin.org/post'\n>>> files = {'file': open('report.xls', 'rb')}\n>>> r = requests.post(url, files=files)\n```\n7. **自定义请求头部**  \n伪装请求头部是采集时经常用的，我们可以用这个方法来隐藏：\n```\n>>> r = requests.get('http://www.zhidaow.com')\n>>> print (r.request.headers['User-Agent'])\n\"python-requests/1.2.3 CPython/2.7.3 Windows/XP\"\n>>> headers = {'User-Agent': 'alexkh'}\n>>> r = requests.get('http://www.zhidaow.com', headers = headers)\n>>> print (r.request.headers['User-Agent'])  \n\"alexkh\"\n```\n8. **超时**  \n使用`timeout`参数使得对象在经过该参数所指定的秒数后停止响应，以此防止程序永远失去响应。  \n*注意：`timeout` 仅对连接过程有效，与响应体的下载无关。*\n```\n>>> requests.get('http://github.com', timeout=0.001)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nrequests.exceptions.Timeout: HTTPConnectionPool(host='github.com', port=80): Request timed out. (timeout=0.001)\n```\n9. **错误与异常**  \n遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 `ConnectionError` 异常。   \n如果 HTTP 请求返回了不成功的状态码， `Response.raise_for_status()` 会抛出一个 `HTTPError` 异常。  \n若请求超时，则抛出一个 `Timeout` 异常。  \n若请求超过了设定的最大重定向次数，则会抛出一个 `TooManyRedirects` 异常。  \n10. **代理**  \n如果需要使用代理，你可以通过为任意请求方法提供 `proxies` 参数来配置单个请求：\n```python\nproxies = {\n  \"http\": \"http://10.10.1.10:3128\",\n  \"https\": \"http://10.10.1.10:1080\",\n}\nrequests.get(\"http://example.org\", proxies=proxies)\n```\n若你的代理需要使用HTTP Basic Auth，可以使用 http://user:password@host/ 语法：\n```python\nproxies = {\n    \"http\": \"http://user:pass@10.10.1.10:3128/\",\n}\n```\n\n## 其他链接\n- [Requests官方中文文档](http://cn.python-requests.org/zh_CN/latest/index.html)\n\n## 参考资料\n1. <http://cn.python-requests.org/zh_CN/latest/index.html>\n2. <https://www.cnblogs.com/lgh344902118/p/6780960.html>\n\n\n\n\n\n","slug":"Python-Requests","published":1,"updated":"2019-05-04T03:33:08.283Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjh000130uvkx9z5msv","content":"<blockquote>\n<p>Requests is an elegant and simple HTTP library for Python, built for human beings.</p>\n</blockquote>\n<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><p>使用命令 <code>pip install requests</code> 安装</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><a id=\"more\"></a>\n<p>首先，导入Requests模块：<br><code>import requests</code>  </p>\n<ol>\n<li><p><strong>HTTP基本请求类型</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = requests.get(&apos;https://api.github.com/events&apos;)  </span><br><span class=\"line\">r = requests.post(&apos;http://httpbin.org/post&apos;）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>传递URL参数</strong><br>使用 <code>params</code> 关键字参数，以一个字符串字典提供这些参数，注意字典里值为 None 的键都不会被添加到 URL 的查询字符串里。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = &#123;&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;&#125;</span><br><span class=\"line\">r = requests.get(&quot;http://httpbin.org/get&quot;, params = payload)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在POST请求中发送数据</strong><br>传递一个字典给 data 参数，例如  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; payload = &#123;&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.post(&quot;http://httpbin.org/post&quot;, data=payload)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>定制请求头</strong><br>传递一个字典给 headers 参数，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; url = &apos;https://api.github.com/some/endpoint&apos;</span><br><span class=\"line\">&gt;&gt;&gt; headers = &#123;&apos;user-agent&apos;: &apos;my-app/0.0.1&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>读取响应内容</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import requests</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;https://api.github.com/events&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>用 <code>r.text</code> 读取服务器响应的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r.text</span><br><span class=\"line\">u&apos;[&#123;&quot;repository&quot;:&#123;&quot;open_issues&quot;:0,&quot;url&quot;:&quot;https://github.com/...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.encoding</code> 来获得<strong>推测的</strong>文本编码，并可以对其进行修改，改变 <code>r.text</code> 的解析方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r.encoding</span><br><span class=\"line\">&apos;utf-8&apos;</span><br><span class=\"line\">&gt;&gt;&gt; r.encoding = &apos;ISO-8859-1&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.content</code> 读取二进制的响应内容。例如，可以用返回的二进制数据创建一张图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from PIL import Image</span><br><span class=\"line\">&gt;&gt;&gt; from io import BytesIO</span><br><span class=\"line\">&gt;&gt;&gt; i = Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.status_code</code> 检测响应状态码，也可以使用内置的状态码查询对象 <code>requests.codes.ok</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;http://httpbin.org/get&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; r.status_code</span><br><span class=\"line\">200</span><br><span class=\"line\">&gt;&gt;&gt; r.status_code == requests.codes.ok</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.headers</code> 来获取响应头内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r.headers</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &apos;content-encoding&apos;: &apos;gzip&apos;,</span><br><span class=\"line\">    &apos;transfer-encoding&apos;: &apos;chunked&apos;,</span><br><span class=\"line\">    &apos;connection&apos;: &apos;close&apos;,</span><br><span class=\"line\">    &apos;server&apos;: &apos;nginx/1.0.4&apos;,</span><br><span class=\"line\">    &apos;x-runtime&apos;: &apos;148ms&apos;,</span><br><span class=\"line\">    &apos;etag&apos;: &apos;&quot;e1ca502697e5c9317743dc078f67693f&quot;&apos;,</span><br><span class=\"line\">    &apos;content-type&apos;: &apos;application/json&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.json()</code> 获取经内置JSON解码器处理的JSON数据。该方法会返回一个JSON对象。当JSON解析失败时，r.json()会抛出一个异常。需要注意的是，成功调用 <code>r.json()</code> 并<strong>不</strong>意味着响应的成功。要检查请求是否成功，请使用 <code>r.raise_for_status()</code> 或者检查 <code>r.status_code</code> 是否和你的期望相同。</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li><p><strong>POST一个多部分编码(Multipart-Encoded)的文件</strong><br>注意，请使用二进制模式(binary mode)打开文件，防止 Requests 提供的 Content-Length header 发生错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; url = &apos;http://httpbin.org/post&apos;</span><br><span class=\"line\">&gt;&gt;&gt; files = &#123;&apos;file&apos;: open(&apos;report.xls&apos;, &apos;rb&apos;)&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.post(url, files=files)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>自定义请求头部</strong><br>伪装请求头部是采集时经常用的，我们可以用这个方法来隐藏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;http://www.zhidaow.com&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; print (r.request.headers[&apos;User-Agent&apos;])</span><br><span class=\"line\">&quot;python-requests/1.2.3 CPython/2.7.3 Windows/XP&quot;</span><br><span class=\"line\">&gt;&gt;&gt; headers = &#123;&apos;User-Agent&apos;: &apos;alexkh&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;http://www.zhidaow.com&apos;, headers = headers)</span><br><span class=\"line\">&gt;&gt;&gt; print (r.request.headers[&apos;User-Agent&apos;])  </span><br><span class=\"line\">&quot;alexkh&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>超时</strong><br>使用<code>timeout</code>参数使得对象在经过该参数所指定的秒数后停止响应，以此防止程序永远失去响应。<br><em>注意：<code>timeout</code> 仅对连接过程有效，与响应体的下载无关。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; requests.get(&apos;http://github.com&apos;, timeout=0.001)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">requests.exceptions.Timeout: HTTPConnectionPool(host=&apos;github.com&apos;, port=80): Request timed out. (timeout=0.001)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>错误与异常</strong><br>遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 <code>ConnectionError</code> 异常。<br>如果 HTTP 请求返回了不成功的状态码， <code>Response.raise_for_status()</code> 会抛出一个 <code>HTTPError</code> 异常。<br>若请求超时，则抛出一个 <code>Timeout</code> 异常。<br>若请求超过了设定的最大重定向次数，则会抛出一个 <code>TooManyRedirects</code> 异常。  </p>\n</li>\n<li><strong>代理</strong><br>如果需要使用代理，你可以通过为任意请求方法提供 <code>proxies</code> 参数来配置单个请求：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://10.10.1.10:3128\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"https\"</span>: <span class=\"string\">\"http://10.10.1.10:1080\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">requests.get(<span class=\"string\">\"http://example.org\"</span>, proxies=proxies)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>若你的代理需要使用HTTP Basic Auth，可以使用 <a href=\"http://user:password@host/\" target=\"_blank\" rel=\"noopener\">http://user:password@host/</a> 语法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://user:pass@10.10.1.10:3128/\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他链接\"><a href=\"#其他链接\" class=\"headerlink\" title=\"其他链接\"></a>其他链接</h2><ul>\n<li><a href=\"http://cn.python-requests.org/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener\">Requests官方中文文档</a></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://cn.python-requests.org/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener\">http://cn.python-requests.org/zh_CN/latest/index.html</a></li>\n<li><a href=\"https://www.cnblogs.com/lgh344902118/p/6780960.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lgh344902118/p/6780960.html</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Requests is an elegant and simple HTTP library for Python, built for human beings.</p>\n</blockquote>\n<h2 id=\"安装方法\"><a href=\"#安装方法\" class=\"headerlink\" title=\"安装方法\"></a>安装方法</h2><p>使用命令 <code>pip install requests</code> 安装</p>\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2>","more":"<p>首先，导入Requests模块：<br><code>import requests</code>  </p>\n<ol>\n<li><p><strong>HTTP基本请求类型</strong>  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">r = requests.get(&apos;https://api.github.com/events&apos;)  </span><br><span class=\"line\">r = requests.post(&apos;http://httpbin.org/post&apos;）</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>传递URL参数</strong><br>使用 <code>params</code> 关键字参数，以一个字符串字典提供这些参数，注意字典里值为 None 的键都不会被添加到 URL 的查询字符串里。  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload = &#123;&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;&#125;</span><br><span class=\"line\">r = requests.get(&quot;http://httpbin.org/get&quot;, params = payload)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在POST请求中发送数据</strong><br>传递一个字典给 data 参数，例如  </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; payload = &#123;&apos;key1&apos;: &apos;value1&apos;, &apos;key2&apos;: &apos;value2&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.post(&quot;http://httpbin.org/post&quot;, data=payload)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>定制请求头</strong><br>传递一个字典给 headers 参数，例如</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; url = &apos;https://api.github.com/some/endpoint&apos;</span><br><span class=\"line\">&gt;&gt;&gt; headers = &#123;&apos;user-agent&apos;: &apos;my-app/0.0.1&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(url, headers=headers)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>读取响应内容</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; import requests</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;https://api.github.com/events&apos;)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<ul>\n<li><p>用 <code>r.text</code> 读取服务器响应的内容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r.text</span><br><span class=\"line\">u&apos;[&#123;&quot;repository&quot;:&#123;&quot;open_issues&quot;:0,&quot;url&quot;:&quot;https://github.com/...</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.encoding</code> 来获得<strong>推测的</strong>文本编码，并可以对其进行修改，改变 <code>r.text</code> 的解析方法</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r.encoding</span><br><span class=\"line\">&apos;utf-8&apos;</span><br><span class=\"line\">&gt;&gt;&gt; r.encoding = &apos;ISO-8859-1&apos;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.content</code> 读取二进制的响应内容。例如，可以用返回的二进制数据创建一张图片：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; from PIL import Image</span><br><span class=\"line\">&gt;&gt;&gt; from io import BytesIO</span><br><span class=\"line\">&gt;&gt;&gt; i = Image.open(BytesIO(r.content))</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.status_code</code> 检测响应状态码，也可以使用内置的状态码查询对象 <code>requests.codes.ok</code> </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;http://httpbin.org/get&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; r.status_code</span><br><span class=\"line\">200</span><br><span class=\"line\">&gt;&gt;&gt; r.status_code == requests.codes.ok</span><br><span class=\"line\">True</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.headers</code> 来获取响应头内容。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r.headers</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &apos;content-encoding&apos;: &apos;gzip&apos;,</span><br><span class=\"line\">    &apos;transfer-encoding&apos;: &apos;chunked&apos;,</span><br><span class=\"line\">    &apos;connection&apos;: &apos;close&apos;,</span><br><span class=\"line\">    &apos;server&apos;: &apos;nginx/1.0.4&apos;,</span><br><span class=\"line\">    &apos;x-runtime&apos;: &apos;148ms&apos;,</span><br><span class=\"line\">    &apos;etag&apos;: &apos;&quot;e1ca502697e5c9317743dc078f67693f&quot;&apos;,</span><br><span class=\"line\">    &apos;content-type&apos;: &apos;application/json&apos;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 <code>r.json()</code> 获取经内置JSON解码器处理的JSON数据。该方法会返回一个JSON对象。当JSON解析失败时，r.json()会抛出一个异常。需要注意的是，成功调用 <code>r.json()</code> 并<strong>不</strong>意味着响应的成功。要检查请求是否成功，请使用 <code>r.raise_for_status()</code> 或者检查 <code>r.status_code</code> 是否和你的期望相同。</p>\n</li>\n</ul>\n<ol start=\"6\">\n<li><p><strong>POST一个多部分编码(Multipart-Encoded)的文件</strong><br>注意，请使用二进制模式(binary mode)打开文件，防止 Requests 提供的 Content-Length header 发生错误。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; url = &apos;http://httpbin.org/post&apos;</span><br><span class=\"line\">&gt;&gt;&gt; files = &#123;&apos;file&apos;: open(&apos;report.xls&apos;, &apos;rb&apos;)&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.post(url, files=files)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>自定义请求头部</strong><br>伪装请求头部是采集时经常用的，我们可以用这个方法来隐藏：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;http://www.zhidaow.com&apos;)</span><br><span class=\"line\">&gt;&gt;&gt; print (r.request.headers[&apos;User-Agent&apos;])</span><br><span class=\"line\">&quot;python-requests/1.2.3 CPython/2.7.3 Windows/XP&quot;</span><br><span class=\"line\">&gt;&gt;&gt; headers = &#123;&apos;User-Agent&apos;: &apos;alexkh&apos;&#125;</span><br><span class=\"line\">&gt;&gt;&gt; r = requests.get(&apos;http://www.zhidaow.com&apos;, headers = headers)</span><br><span class=\"line\">&gt;&gt;&gt; print (r.request.headers[&apos;User-Agent&apos;])  </span><br><span class=\"line\">&quot;alexkh&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>超时</strong><br>使用<code>timeout</code>参数使得对象在经过该参数所指定的秒数后停止响应，以此防止程序永远失去响应。<br><em>注意：<code>timeout</code> 仅对连接过程有效，与响应体的下载无关。</em></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt; requests.get(&apos;http://github.com&apos;, timeout=0.001)</span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class=\"line\">requests.exceptions.Timeout: HTTPConnectionPool(host=&apos;github.com&apos;, port=80): Request timed out. (timeout=0.001)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>错误与异常</strong><br>遇到网络问题（如：DNS 查询失败、拒绝连接等）时，Requests 会抛出一个 <code>ConnectionError</code> 异常。<br>如果 HTTP 请求返回了不成功的状态码， <code>Response.raise_for_status()</code> 会抛出一个 <code>HTTPError</code> 异常。<br>若请求超时，则抛出一个 <code>Timeout</code> 异常。<br>若请求超过了设定的最大重定向次数，则会抛出一个 <code>TooManyRedirects</code> 异常。  </p>\n</li>\n<li><strong>代理</strong><br>如果需要使用代理，你可以通过为任意请求方法提供 <code>proxies</code> 参数来配置单个请求：<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">  <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://10.10.1.10:3128\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"https\"</span>: <span class=\"string\">\"http://10.10.1.10:1080\"</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">requests.get(<span class=\"string\">\"http://example.org\"</span>, proxies=proxies)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>若你的代理需要使用HTTP Basic Auth，可以使用 <a href=\"http://user:password@host/\" target=\"_blank\" rel=\"noopener\">http://user:password@host/</a> 语法：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">proxies = &#123;</span><br><span class=\"line\">    <span class=\"string\">\"http\"</span>: <span class=\"string\">\"http://user:pass@10.10.1.10:3128/\"</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"其他链接\"><a href=\"#其他链接\" class=\"headerlink\" title=\"其他链接\"></a>其他链接</h2><ul>\n<li><a href=\"http://cn.python-requests.org/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener\">Requests官方中文文档</a></li>\n</ul>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ol>\n<li><a href=\"http://cn.python-requests.org/zh_CN/latest/index.html\" target=\"_blank\" rel=\"noopener\">http://cn.python-requests.org/zh_CN/latest/index.html</a></li>\n<li><a href=\"https://www.cnblogs.com/lgh344902118/p/6780960.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/lgh344902118/p/6780960.html</a></li>\n</ol>"},{"title":"数字电路-概念笔记-02","date":"2019-02-03T16:00:00.000Z","_content":"# 逻辑代数基础\n> 关键词：逻辑运算, 逻辑函数及化简\n\n### 一、概述\n二值逻辑：只有两者对立逻辑状态的逻辑关系  \n\n### 二、逻辑代数中的基本运算  \n\n| 运算名称 | 运算元素个数 | 效果 | 为真条件 |\n| :-----: | :------: | :------: | :------: |\n| 与非 | 2 | 先与再取反 | 不均为真\n| 或非 | 2 | 先或再取反 | 均为假\n| 异或 | 2 | 判断是否不同 | 两元素不同\n| 同或 | 2 | 判断是否相同 | 两元素相同\n| 与或非 | 4 (2x2) | 判断是否每组元素都含有假 | 每组元素都含有假\n\n<!-- more -->\n其他性质：  \n1. 与 (AND) : $$ A · B $$, 可简写为 $$ AB $$\n2. 或 (OR) : $$ A + B $$\n3. 非 (NOT) : $$ A' $$\n4. 同或与异或互为反运算\n\n### 三、逻辑代数中的基本公式和常用公式\n*以下部分内容直接使用代数系统术语*  \n**基本公式：**\n1. **0**为与运算零元，或运算幺元\n2. **1**为与运算幺元，或运算零元\n3. 与，或运算均满足交换律、结合律，互相满足分配律\n4. 德摩根律 (De. Morgan's Law)，或称反演律。  \n\n**常用公式（部分）：**    \n\t> $$ A + A · B = A  $$  \n\t> $$ A + A' · B = A + B  $$  \n\t> $$ A · B + A · B' = A $$  \n\n### 四、逻辑代数的基本定理\n1. 代入定理：用逻辑式代入等式中的某个变量，等式仍然成立。\n2. 反演定理：将符号替换后得到已知逻辑式的反逻辑式。\n3. 对偶定理：两逻辑式相等，则对偶式也相等。\n\n### 五、逻辑函数及表示方法\n1. 记法：$$ Y = F (A,B,C,…) $$\n2. 表示：真值表/函数式/逻辑图/波形图\n3. 最小项：n变量逻辑函数中，包含n个唯一因子的乘积项，如 $$ A'BC $$  \n编号：记原变量为1，反变量为0，计算表达式的二进制值 $$ (0到2^{n-1}) $$  \n***注意：相邻的最小项可以合并化简***\n4. 最大项：n变量逻辑函数中，包含n个唯一因子的加和项，如 $$ A+B+C' $$\n5. 所有逻辑函数都能写成**最小项之和**或**最大项之积**的形式\n6. 将逻辑函数化为与或非形式：首先展开为最小项之和，再将不包含的最小项相加，求反。\n\n### 六、逻辑函数的化简方法\n1. 公式化简法：\n- 并项法： $$ AB+AB'=A $$\n- 吸收法： $$ A+AB=A $$\n- 消项法： $$ AB+A'C+BC(D)=AB+A'C $$  \n- 消因子法： $$ A+A'B=A+B $$\n- 配项法：重复加上某一因子项或拆开 $$ 1=A+A' $$\n2. 卡诺图化简法：\n\t1. 表示：以所有最小项构造矩形，用0与1对方格赋值。  \n\t2. **合并化简：合并相邻的，构成矩形的 $$ 2^n $$ 个值为1的方格。**\n\t3. 选取化简后的乘积项：全部覆盖，数目最小，因子最少。\n\t4. 化简一般得到最简与或式，结果不一定唯一。\n3. Q-M法：便于计算机辅助化简\n\n### 七、具有无关项的逻辑函数及其化简\n1. 约束项：对输入变量取值的限制  \n表示：对应的最小项恒为**0**，例如 $$ A'B'C'+A'BC+ABC'+ABC=0 $$  \n2. 约束项在卡诺图中用 $$ \\times $$ 表示，可认为是**0**或**1**\n3. 合并时通过改变 $$ \\times $$ 的取值，使得化简结果最简。\n\n### 参考资料\n1. 阎石. *数字电子技术基础.* 高等教育出版社, 2005.\n\n\n\n","source":"_posts/digital-circuit-02.md","raw":"---\ntitle: 数字电路-概念笔记-02\ndate: 2019-02-04\ntags: [digital circuit]\n---\n# 逻辑代数基础\n> 关键词：逻辑运算, 逻辑函数及化简\n\n### 一、概述\n二值逻辑：只有两者对立逻辑状态的逻辑关系  \n\n### 二、逻辑代数中的基本运算  \n\n| 运算名称 | 运算元素个数 | 效果 | 为真条件 |\n| :-----: | :------: | :------: | :------: |\n| 与非 | 2 | 先与再取反 | 不均为真\n| 或非 | 2 | 先或再取反 | 均为假\n| 异或 | 2 | 判断是否不同 | 两元素不同\n| 同或 | 2 | 判断是否相同 | 两元素相同\n| 与或非 | 4 (2x2) | 判断是否每组元素都含有假 | 每组元素都含有假\n\n<!-- more -->\n其他性质：  \n1. 与 (AND) : $$ A · B $$, 可简写为 $$ AB $$\n2. 或 (OR) : $$ A + B $$\n3. 非 (NOT) : $$ A' $$\n4. 同或与异或互为反运算\n\n### 三、逻辑代数中的基本公式和常用公式\n*以下部分内容直接使用代数系统术语*  \n**基本公式：**\n1. **0**为与运算零元，或运算幺元\n2. **1**为与运算幺元，或运算零元\n3. 与，或运算均满足交换律、结合律，互相满足分配律\n4. 德摩根律 (De. Morgan's Law)，或称反演律。  \n\n**常用公式（部分）：**    \n\t> $$ A + A · B = A  $$  \n\t> $$ A + A' · B = A + B  $$  \n\t> $$ A · B + A · B' = A $$  \n\n### 四、逻辑代数的基本定理\n1. 代入定理：用逻辑式代入等式中的某个变量，等式仍然成立。\n2. 反演定理：将符号替换后得到已知逻辑式的反逻辑式。\n3. 对偶定理：两逻辑式相等，则对偶式也相等。\n\n### 五、逻辑函数及表示方法\n1. 记法：$$ Y = F (A,B,C,…) $$\n2. 表示：真值表/函数式/逻辑图/波形图\n3. 最小项：n变量逻辑函数中，包含n个唯一因子的乘积项，如 $$ A'BC $$  \n编号：记原变量为1，反变量为0，计算表达式的二进制值 $$ (0到2^{n-1}) $$  \n***注意：相邻的最小项可以合并化简***\n4. 最大项：n变量逻辑函数中，包含n个唯一因子的加和项，如 $$ A+B+C' $$\n5. 所有逻辑函数都能写成**最小项之和**或**最大项之积**的形式\n6. 将逻辑函数化为与或非形式：首先展开为最小项之和，再将不包含的最小项相加，求反。\n\n### 六、逻辑函数的化简方法\n1. 公式化简法：\n- 并项法： $$ AB+AB'=A $$\n- 吸收法： $$ A+AB=A $$\n- 消项法： $$ AB+A'C+BC(D)=AB+A'C $$  \n- 消因子法： $$ A+A'B=A+B $$\n- 配项法：重复加上某一因子项或拆开 $$ 1=A+A' $$\n2. 卡诺图化简法：\n\t1. 表示：以所有最小项构造矩形，用0与1对方格赋值。  \n\t2. **合并化简：合并相邻的，构成矩形的 $$ 2^n $$ 个值为1的方格。**\n\t3. 选取化简后的乘积项：全部覆盖，数目最小，因子最少。\n\t4. 化简一般得到最简与或式，结果不一定唯一。\n3. Q-M法：便于计算机辅助化简\n\n### 七、具有无关项的逻辑函数及其化简\n1. 约束项：对输入变量取值的限制  \n表示：对应的最小项恒为**0**，例如 $$ A'B'C'+A'BC+ABC'+ABC=0 $$  \n2. 约束项在卡诺图中用 $$ \\times $$ 表示，可认为是**0**或**1**\n3. 合并时通过改变 $$ \\times $$ 的取值，使得化简结果最简。\n\n### 参考资料\n1. 阎石. *数字电子技术基础.* 高等教育出版社, 2005.\n\n\n\n","slug":"digital-circuit-02","published":1,"updated":"2019-04-30T16:43:26.029Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjl000330uvi67p5gad","content":"<h1 id=\"逻辑代数基础\"><a href=\"#逻辑代数基础\" class=\"headerlink\" title=\"逻辑代数基础\"></a>逻辑代数基础</h1><blockquote>\n<p>关键词：逻辑运算, 逻辑函数及化简</p>\n</blockquote>\n<h3 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h3><p>二值逻辑：只有两者对立逻辑状态的逻辑关系  </p>\n<h3 id=\"二、逻辑代数中的基本运算\"><a href=\"#二、逻辑代数中的基本运算\" class=\"headerlink\" title=\"二、逻辑代数中的基本运算\"></a>二、逻辑代数中的基本运算</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算名称</th>\n<th style=\"text-align:center\">运算元素个数</th>\n<th style=\"text-align:center\">效果</th>\n<th style=\"text-align:center\">为真条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">与非</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">先与再取反</td>\n<td style=\"text-align:center\">不均为真</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">或非</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">先或再取反</td>\n<td style=\"text-align:center\">均为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">异或</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">判断是否不同</td>\n<td style=\"text-align:center\">两元素不同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">同或</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">判断是否相同</td>\n<td style=\"text-align:center\">两元素相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">与或非</td>\n<td style=\"text-align:center\">4 (2x2)</td>\n<td style=\"text-align:center\">判断是否每组元素都含有假</td>\n<td style=\"text-align:center\">每组元素都含有假</td>\n</tr>\n</tbody>\n</table>\n<a id=\"more\"></a>\n<p>其他性质：  </p>\n<ol>\n<li>与 (AND) : $$ A · B $$, 可简写为 $$ AB $$</li>\n<li>或 (OR) : $$ A + B $$</li>\n<li>非 (NOT) : $$ A’ $$</li>\n<li>同或与异或互为反运算</li>\n</ol>\n<h3 id=\"三、逻辑代数中的基本公式和常用公式\"><a href=\"#三、逻辑代数中的基本公式和常用公式\" class=\"headerlink\" title=\"三、逻辑代数中的基本公式和常用公式\"></a>三、逻辑代数中的基本公式和常用公式</h3><p><em>以下部分内容直接使用代数系统术语</em><br><strong>基本公式：</strong></p>\n<ol>\n<li><strong>0</strong>为与运算零元，或运算幺元</li>\n<li><strong>1</strong>为与运算幺元，或运算零元</li>\n<li>与，或运算均满足交换律、结合律，互相满足分配律</li>\n<li>德摩根律 (De. Morgan’s Law)，或称反演律。  </li>\n</ol>\n<p><strong>常用公式（部分）：</strong><br>    &gt; $$ A + A · B = A  $$<br>    &gt; $$ A + A’ · B = A + B  $$<br>    &gt; $$ A · B + A · B’ = A $$  </p>\n<h3 id=\"四、逻辑代数的基本定理\"><a href=\"#四、逻辑代数的基本定理\" class=\"headerlink\" title=\"四、逻辑代数的基本定理\"></a>四、逻辑代数的基本定理</h3><ol>\n<li>代入定理：用逻辑式代入等式中的某个变量，等式仍然成立。</li>\n<li>反演定理：将符号替换后得到已知逻辑式的反逻辑式。</li>\n<li>对偶定理：两逻辑式相等，则对偶式也相等。</li>\n</ol>\n<h3 id=\"五、逻辑函数及表示方法\"><a href=\"#五、逻辑函数及表示方法\" class=\"headerlink\" title=\"五、逻辑函数及表示方法\"></a>五、逻辑函数及表示方法</h3><ol>\n<li>记法：$$ Y = F (A,B,C,…) $$</li>\n<li>表示：真值表/函数式/逻辑图/波形图</li>\n<li>最小项：n变量逻辑函数中，包含n个唯一因子的乘积项，如 $$ A’BC $$<br>编号：记原变量为1，反变量为0，计算表达式的二进制值 $$ (0到2^{n-1}) $$<br><strong><em>注意：相邻的最小项可以合并化简</em></strong></li>\n<li>最大项：n变量逻辑函数中，包含n个唯一因子的加和项，如 $$ A+B+C’ $$</li>\n<li>所有逻辑函数都能写成<strong>最小项之和</strong>或<strong>最大项之积</strong>的形式</li>\n<li>将逻辑函数化为与或非形式：首先展开为最小项之和，再将不包含的最小项相加，求反。</li>\n</ol>\n<h3 id=\"六、逻辑函数的化简方法\"><a href=\"#六、逻辑函数的化简方法\" class=\"headerlink\" title=\"六、逻辑函数的化简方法\"></a>六、逻辑函数的化简方法</h3><ol>\n<li>公式化简法：</li>\n</ol>\n<ul>\n<li>并项法： $$ AB+AB’=A $$</li>\n<li>吸收法： $$ A+AB=A $$</li>\n<li>消项法： $$ AB+A’C+BC(D)=AB+A’C $$  </li>\n<li>消因子法： $$ A+A’B=A+B $$</li>\n<li>配项法：重复加上某一因子项或拆开 $$ 1=A+A’ $$</li>\n</ul>\n<ol start=\"2\">\n<li>卡诺图化简法：<ol>\n<li>表示：以所有最小项构造矩形，用0与1对方格赋值。  </li>\n<li><strong>合并化简：合并相邻的，构成矩形的 $$ 2^n $$ 个值为1的方格。</strong></li>\n<li>选取化简后的乘积项：全部覆盖，数目最小，因子最少。</li>\n<li>化简一般得到最简与或式，结果不一定唯一。</li>\n</ol>\n</li>\n<li>Q-M法：便于计算机辅助化简</li>\n</ol>\n<h3 id=\"七、具有无关项的逻辑函数及其化简\"><a href=\"#七、具有无关项的逻辑函数及其化简\" class=\"headerlink\" title=\"七、具有无关项的逻辑函数及其化简\"></a>七、具有无关项的逻辑函数及其化简</h3><ol>\n<li>约束项：对输入变量取值的限制<br>表示：对应的最小项恒为<strong>0</strong>，例如 $$ A’B’C’+A’BC+ABC’+ABC=0 $$  </li>\n<li>约束项在卡诺图中用 $$ \\times $$ 表示，可认为是<strong>0</strong>或<strong>1</strong></li>\n<li>合并时通过改变 $$ \\times $$ 的取值，使得化简结果最简。</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>阎石. <em>数字电子技术基础.</em> 高等教育出版社, 2005.</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"逻辑代数基础\"><a href=\"#逻辑代数基础\" class=\"headerlink\" title=\"逻辑代数基础\"></a>逻辑代数基础</h1><blockquote>\n<p>关键词：逻辑运算, 逻辑函数及化简</p>\n</blockquote>\n<h3 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h3><p>二值逻辑：只有两者对立逻辑状态的逻辑关系  </p>\n<h3 id=\"二、逻辑代数中的基本运算\"><a href=\"#二、逻辑代数中的基本运算\" class=\"headerlink\" title=\"二、逻辑代数中的基本运算\"></a>二、逻辑代数中的基本运算</h3><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">运算名称</th>\n<th style=\"text-align:center\">运算元素个数</th>\n<th style=\"text-align:center\">效果</th>\n<th style=\"text-align:center\">为真条件</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">与非</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">先与再取反</td>\n<td style=\"text-align:center\">不均为真</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">或非</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">先或再取反</td>\n<td style=\"text-align:center\">均为假</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">异或</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">判断是否不同</td>\n<td style=\"text-align:center\">两元素不同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">同或</td>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">判断是否相同</td>\n<td style=\"text-align:center\">两元素相同</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">与或非</td>\n<td style=\"text-align:center\">4 (2x2)</td>\n<td style=\"text-align:center\">判断是否每组元素都含有假</td>\n<td style=\"text-align:center\">每组元素都含有假</td>\n</tr>\n</tbody>\n</table>","more":"<p>其他性质：  </p>\n<ol>\n<li>与 (AND) : $$ A · B $$, 可简写为 $$ AB $$</li>\n<li>或 (OR) : $$ A + B $$</li>\n<li>非 (NOT) : $$ A’ $$</li>\n<li>同或与异或互为反运算</li>\n</ol>\n<h3 id=\"三、逻辑代数中的基本公式和常用公式\"><a href=\"#三、逻辑代数中的基本公式和常用公式\" class=\"headerlink\" title=\"三、逻辑代数中的基本公式和常用公式\"></a>三、逻辑代数中的基本公式和常用公式</h3><p><em>以下部分内容直接使用代数系统术语</em><br><strong>基本公式：</strong></p>\n<ol>\n<li><strong>0</strong>为与运算零元，或运算幺元</li>\n<li><strong>1</strong>为与运算幺元，或运算零元</li>\n<li>与，或运算均满足交换律、结合律，互相满足分配律</li>\n<li>德摩根律 (De. Morgan’s Law)，或称反演律。  </li>\n</ol>\n<p><strong>常用公式（部分）：</strong><br>    &gt; $$ A + A · B = A  $$<br>    &gt; $$ A + A’ · B = A + B  $$<br>    &gt; $$ A · B + A · B’ = A $$  </p>\n<h3 id=\"四、逻辑代数的基本定理\"><a href=\"#四、逻辑代数的基本定理\" class=\"headerlink\" title=\"四、逻辑代数的基本定理\"></a>四、逻辑代数的基本定理</h3><ol>\n<li>代入定理：用逻辑式代入等式中的某个变量，等式仍然成立。</li>\n<li>反演定理：将符号替换后得到已知逻辑式的反逻辑式。</li>\n<li>对偶定理：两逻辑式相等，则对偶式也相等。</li>\n</ol>\n<h3 id=\"五、逻辑函数及表示方法\"><a href=\"#五、逻辑函数及表示方法\" class=\"headerlink\" title=\"五、逻辑函数及表示方法\"></a>五、逻辑函数及表示方法</h3><ol>\n<li>记法：$$ Y = F (A,B,C,…) $$</li>\n<li>表示：真值表/函数式/逻辑图/波形图</li>\n<li>最小项：n变量逻辑函数中，包含n个唯一因子的乘积项，如 $$ A’BC $$<br>编号：记原变量为1，反变量为0，计算表达式的二进制值 $$ (0到2^{n-1}) $$<br><strong><em>注意：相邻的最小项可以合并化简</em></strong></li>\n<li>最大项：n变量逻辑函数中，包含n个唯一因子的加和项，如 $$ A+B+C’ $$</li>\n<li>所有逻辑函数都能写成<strong>最小项之和</strong>或<strong>最大项之积</strong>的形式</li>\n<li>将逻辑函数化为与或非形式：首先展开为最小项之和，再将不包含的最小项相加，求反。</li>\n</ol>\n<h3 id=\"六、逻辑函数的化简方法\"><a href=\"#六、逻辑函数的化简方法\" class=\"headerlink\" title=\"六、逻辑函数的化简方法\"></a>六、逻辑函数的化简方法</h3><ol>\n<li>公式化简法：</li>\n</ol>\n<ul>\n<li>并项法： $$ AB+AB’=A $$</li>\n<li>吸收法： $$ A+AB=A $$</li>\n<li>消项法： $$ AB+A’C+BC(D)=AB+A’C $$  </li>\n<li>消因子法： $$ A+A’B=A+B $$</li>\n<li>配项法：重复加上某一因子项或拆开 $$ 1=A+A’ $$</li>\n</ul>\n<ol start=\"2\">\n<li>卡诺图化简法：<ol>\n<li>表示：以所有最小项构造矩形，用0与1对方格赋值。  </li>\n<li><strong>合并化简：合并相邻的，构成矩形的 $$ 2^n $$ 个值为1的方格。</strong></li>\n<li>选取化简后的乘积项：全部覆盖，数目最小，因子最少。</li>\n<li>化简一般得到最简与或式，结果不一定唯一。</li>\n</ol>\n</li>\n<li>Q-M法：便于计算机辅助化简</li>\n</ol>\n<h3 id=\"七、具有无关项的逻辑函数及其化简\"><a href=\"#七、具有无关项的逻辑函数及其化简\" class=\"headerlink\" title=\"七、具有无关项的逻辑函数及其化简\"></a>七、具有无关项的逻辑函数及其化简</h3><ol>\n<li>约束项：对输入变量取值的限制<br>表示：对应的最小项恒为<strong>0</strong>，例如 $$ A’B’C’+A’BC+ABC’+ABC=0 $$  </li>\n<li>约束项在卡诺图中用 $$ \\times $$ 表示，可认为是<strong>0</strong>或<strong>1</strong></li>\n<li>合并时通过改变 $$ \\times $$ 的取值，使得化简结果最简。</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>阎石. <em>数字电子技术基础.</em> 高等教育出版社, 2005.</li>\n</ol>"},{"title":"The Pragmatic Programmer, Chapter 1&2","date":"2019-02-20T16:00:00.000Z","_content":"# The Pragmatic Programmer\n## 1. A Pragmatic Philosophy\n### The Cat Ate My Source Code\n* Take responsibilities for yourself and your actions, being honest and direct\n* Provide options instead of lame excuses\n* Be ready for others' errors\n* Admit that you need help when necessary\n\n### Software Entropy\n* **Don't live with broken windows, fix them as soon as they are discovered**\n* If time is insufficient, leave a comment at least\n* Neglect accelerates the rot faster than any other factor\n\n<!-- more --> \n\n### Stone Soup and Boiled Frogs\n* **Be a catalyst for change. Show them a glimpse of the future and you'll get them to rally around**\n* Remember the big picture. Constantly review what's happening around you.\n\n### Good-Enough Software\n* Write software that's good enough for users, future maintainers, your own peace of mind. \n* **The scope and quality of the system should be part of the early requirement**\n* Great software today is often preferable to perfect software tomorrow. They can NEVER be perfect.\n\n### Your Knowledge Portfolio\n* **Invest in your knowledge portfolio regularly. Learn at least one new language every year**\n* Diversity matters. Learn technical and non-technical knowledge.\n* Balance between high-risk technologies and low-risk ones\n* Be ready to learn emerging technology before it gets popular.  \n* Stay current and get wired\n\n### Communicate! \n* Know what you want to say\n* **It's both WHAY YOU SAY and THE WAY YOU SAY IT**\n* Know the audience\n\n## 2. A Pragmatic Approach\n### The  Evils of Duplication\n* DRY principle: Don't Repeat Yourself\n* If duplication is unavoidable, make the process active by using automatic methods\n* Make comments independent from detailed code\n* Use header files to document interface issues\n* **Normalize data by using accessor functions to read/write and localizing impacts**\n* Shortcuts make for longer delays. Avoid impatient Duplication\n* Encourage active and frequent communications between developers. Appoint a member as the project librarian if possible\n\n### Orthogonality\n* Orthogonality signifies independence and decoupling.\n* **Eliminate effects between unrelated things**\n* Orthogonality increases productivity and reduces risk\n* An orthogonal team is more efficient\n\n### Reversibility\n* There are no final decisions. ALL decisions are temporary in real circumstances\n* Make architecture flexible to get ready for a change in platform, language, design pattern, etc\n\n### Tracer Bullets\n* Use tracer bullets like printing variables to test components of the system\n* **Tracer code is not disposable because a project is never fininshed**\n* Prototype generates disposable code while tracer code is lean but complete. They are different development styles\n\n### Prototypes and Post-it Notes\n* Prototypes are designed to test some specific aspects of a project\n* Prototypes can be built on different materials, like workflow or application logic for dynamic things and whiteboard for user interface\n* Prototypes are designed to answer just a few questions. They are much cheaper and faster to develop\n* **The value of prototype lies both in the code produced and the lesson learned**\n* Things can be ignored when building a prototype\n    * Correctness of data\n    * Completeness of function\n    * Robustness (Error checking)\n    * Pretty and standard style\n* When prototype is inclined to be based on, turn to tracer bullet approach instead\n\n### Domain Languages\n* **Program close to the problem domain**\n* Use mini-language to help create artifacts (related to metaprogramming)\n\n### Estimating\n* Estimate to avoid surprises and optimize efficiently \n* Iterate the schedule with the code\n* Make time estimate cautiously\n\nLink: [Mindmap (as PDF format)](/files/notes/The_Pragmatic_Programmer_chapter_1&2.pdf)\n\n\n\n\n\n\n\n","source":"_posts/The-Pragmatic-Programmer-chapter-1&2.md","raw":"---\ntitle: The Pragmatic Programmer, Chapter 1&2\ndate: 2019-02-21\ntags: [Reading Notes]\n---\n# The Pragmatic Programmer\n## 1. A Pragmatic Philosophy\n### The Cat Ate My Source Code\n* Take responsibilities for yourself and your actions, being honest and direct\n* Provide options instead of lame excuses\n* Be ready for others' errors\n* Admit that you need help when necessary\n\n### Software Entropy\n* **Don't live with broken windows, fix them as soon as they are discovered**\n* If time is insufficient, leave a comment at least\n* Neglect accelerates the rot faster than any other factor\n\n<!-- more --> \n\n### Stone Soup and Boiled Frogs\n* **Be a catalyst for change. Show them a glimpse of the future and you'll get them to rally around**\n* Remember the big picture. Constantly review what's happening around you.\n\n### Good-Enough Software\n* Write software that's good enough for users, future maintainers, your own peace of mind. \n* **The scope and quality of the system should be part of the early requirement**\n* Great software today is often preferable to perfect software tomorrow. They can NEVER be perfect.\n\n### Your Knowledge Portfolio\n* **Invest in your knowledge portfolio regularly. Learn at least one new language every year**\n* Diversity matters. Learn technical and non-technical knowledge.\n* Balance between high-risk technologies and low-risk ones\n* Be ready to learn emerging technology before it gets popular.  \n* Stay current and get wired\n\n### Communicate! \n* Know what you want to say\n* **It's both WHAY YOU SAY and THE WAY YOU SAY IT**\n* Know the audience\n\n## 2. A Pragmatic Approach\n### The  Evils of Duplication\n* DRY principle: Don't Repeat Yourself\n* If duplication is unavoidable, make the process active by using automatic methods\n* Make comments independent from detailed code\n* Use header files to document interface issues\n* **Normalize data by using accessor functions to read/write and localizing impacts**\n* Shortcuts make for longer delays. Avoid impatient Duplication\n* Encourage active and frequent communications between developers. Appoint a member as the project librarian if possible\n\n### Orthogonality\n* Orthogonality signifies independence and decoupling.\n* **Eliminate effects between unrelated things**\n* Orthogonality increases productivity and reduces risk\n* An orthogonal team is more efficient\n\n### Reversibility\n* There are no final decisions. ALL decisions are temporary in real circumstances\n* Make architecture flexible to get ready for a change in platform, language, design pattern, etc\n\n### Tracer Bullets\n* Use tracer bullets like printing variables to test components of the system\n* **Tracer code is not disposable because a project is never fininshed**\n* Prototype generates disposable code while tracer code is lean but complete. They are different development styles\n\n### Prototypes and Post-it Notes\n* Prototypes are designed to test some specific aspects of a project\n* Prototypes can be built on different materials, like workflow or application logic for dynamic things and whiteboard for user interface\n* Prototypes are designed to answer just a few questions. They are much cheaper and faster to develop\n* **The value of prototype lies both in the code produced and the lesson learned**\n* Things can be ignored when building a prototype\n    * Correctness of data\n    * Completeness of function\n    * Robustness (Error checking)\n    * Pretty and standard style\n* When prototype is inclined to be based on, turn to tracer bullet approach instead\n\n### Domain Languages\n* **Program close to the problem domain**\n* Use mini-language to help create artifacts (related to metaprogramming)\n\n### Estimating\n* Estimate to avoid surprises and optimize efficiently \n* Iterate the schedule with the code\n* Make time estimate cautiously\n\nLink: [Mindmap (as PDF format)](/files/notes/The_Pragmatic_Programmer_chapter_1&2.pdf)\n\n\n\n\n\n\n\n","slug":"The-Pragmatic-Programmer-chapter-1&2","published":1,"updated":"2019-04-30T16:42:40.133Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjn000430uvdp1ffsfv","content":"<h1 id=\"The-Pragmatic-Programmer\"><a href=\"#The-Pragmatic-Programmer\" class=\"headerlink\" title=\"The Pragmatic Programmer\"></a>The Pragmatic Programmer</h1><h2 id=\"1-A-Pragmatic-Philosophy\"><a href=\"#1-A-Pragmatic-Philosophy\" class=\"headerlink\" title=\"1. A Pragmatic Philosophy\"></a>1. A Pragmatic Philosophy</h2><h3 id=\"The-Cat-Ate-My-Source-Code\"><a href=\"#The-Cat-Ate-My-Source-Code\" class=\"headerlink\" title=\"The Cat Ate My Source Code\"></a>The Cat Ate My Source Code</h3><ul>\n<li>Take responsibilities for yourself and your actions, being honest and direct</li>\n<li>Provide options instead of lame excuses</li>\n<li>Be ready for others’ errors</li>\n<li>Admit that you need help when necessary</li>\n</ul>\n<h3 id=\"Software-Entropy\"><a href=\"#Software-Entropy\" class=\"headerlink\" title=\"Software Entropy\"></a>Software Entropy</h3><ul>\n<li><strong>Don’t live with broken windows, fix them as soon as they are discovered</strong></li>\n<li>If time is insufficient, leave a comment at least</li>\n<li>Neglect accelerates the rot faster than any other factor</li>\n</ul>\n<a id=\"more\"></a> \n<h3 id=\"Stone-Soup-and-Boiled-Frogs\"><a href=\"#Stone-Soup-and-Boiled-Frogs\" class=\"headerlink\" title=\"Stone Soup and Boiled Frogs\"></a>Stone Soup and Boiled Frogs</h3><ul>\n<li><strong>Be a catalyst for change. Show them a glimpse of the future and you’ll get them to rally around</strong></li>\n<li>Remember the big picture. Constantly review what’s happening around you.</li>\n</ul>\n<h3 id=\"Good-Enough-Software\"><a href=\"#Good-Enough-Software\" class=\"headerlink\" title=\"Good-Enough Software\"></a>Good-Enough Software</h3><ul>\n<li>Write software that’s good enough for users, future maintainers, your own peace of mind. </li>\n<li><strong>The scope and quality of the system should be part of the early requirement</strong></li>\n<li>Great software today is often preferable to perfect software tomorrow. They can NEVER be perfect.</li>\n</ul>\n<h3 id=\"Your-Knowledge-Portfolio\"><a href=\"#Your-Knowledge-Portfolio\" class=\"headerlink\" title=\"Your Knowledge Portfolio\"></a>Your Knowledge Portfolio</h3><ul>\n<li><strong>Invest in your knowledge portfolio regularly. Learn at least one new language every year</strong></li>\n<li>Diversity matters. Learn technical and non-technical knowledge.</li>\n<li>Balance between high-risk technologies and low-risk ones</li>\n<li>Be ready to learn emerging technology before it gets popular.  </li>\n<li>Stay current and get wired</li>\n</ul>\n<h3 id=\"Communicate\"><a href=\"#Communicate\" class=\"headerlink\" title=\"Communicate!\"></a>Communicate!</h3><ul>\n<li>Know what you want to say</li>\n<li><strong>It’s both WHAY YOU SAY and THE WAY YOU SAY IT</strong></li>\n<li>Know the audience</li>\n</ul>\n<h2 id=\"2-A-Pragmatic-Approach\"><a href=\"#2-A-Pragmatic-Approach\" class=\"headerlink\" title=\"2. A Pragmatic Approach\"></a>2. A Pragmatic Approach</h2><h3 id=\"The-Evils-of-Duplication\"><a href=\"#The-Evils-of-Duplication\" class=\"headerlink\" title=\"The  Evils of Duplication\"></a>The  Evils of Duplication</h3><ul>\n<li>DRY principle: Don’t Repeat Yourself</li>\n<li>If duplication is unavoidable, make the process active by using automatic methods</li>\n<li>Make comments independent from detailed code</li>\n<li>Use header files to document interface issues</li>\n<li><strong>Normalize data by using accessor functions to read/write and localizing impacts</strong></li>\n<li>Shortcuts make for longer delays. Avoid impatient Duplication</li>\n<li>Encourage active and frequent communications between developers. Appoint a member as the project librarian if possible</li>\n</ul>\n<h3 id=\"Orthogonality\"><a href=\"#Orthogonality\" class=\"headerlink\" title=\"Orthogonality\"></a>Orthogonality</h3><ul>\n<li>Orthogonality signifies independence and decoupling.</li>\n<li><strong>Eliminate effects between unrelated things</strong></li>\n<li>Orthogonality increases productivity and reduces risk</li>\n<li>An orthogonal team is more efficient</li>\n</ul>\n<h3 id=\"Reversibility\"><a href=\"#Reversibility\" class=\"headerlink\" title=\"Reversibility\"></a>Reversibility</h3><ul>\n<li>There are no final decisions. ALL decisions are temporary in real circumstances</li>\n<li>Make architecture flexible to get ready for a change in platform, language, design pattern, etc</li>\n</ul>\n<h3 id=\"Tracer-Bullets\"><a href=\"#Tracer-Bullets\" class=\"headerlink\" title=\"Tracer Bullets\"></a>Tracer Bullets</h3><ul>\n<li>Use tracer bullets like printing variables to test components of the system</li>\n<li><strong>Tracer code is not disposable because a project is never fininshed</strong></li>\n<li>Prototype generates disposable code while tracer code is lean but complete. They are different development styles</li>\n</ul>\n<h3 id=\"Prototypes-and-Post-it-Notes\"><a href=\"#Prototypes-and-Post-it-Notes\" class=\"headerlink\" title=\"Prototypes and Post-it Notes\"></a>Prototypes and Post-it Notes</h3><ul>\n<li>Prototypes are designed to test some specific aspects of a project</li>\n<li>Prototypes can be built on different materials, like workflow or application logic for dynamic things and whiteboard for user interface</li>\n<li>Prototypes are designed to answer just a few questions. They are much cheaper and faster to develop</li>\n<li><strong>The value of prototype lies both in the code produced and the lesson learned</strong></li>\n<li>Things can be ignored when building a prototype<ul>\n<li>Correctness of data</li>\n<li>Completeness of function</li>\n<li>Robustness (Error checking)</li>\n<li>Pretty and standard style</li>\n</ul>\n</li>\n<li>When prototype is inclined to be based on, turn to tracer bullet approach instead</li>\n</ul>\n<h3 id=\"Domain-Languages\"><a href=\"#Domain-Languages\" class=\"headerlink\" title=\"Domain Languages\"></a>Domain Languages</h3><ul>\n<li><strong>Program close to the problem domain</strong></li>\n<li>Use mini-language to help create artifacts (related to metaprogramming)</li>\n</ul>\n<h3 id=\"Estimating\"><a href=\"#Estimating\" class=\"headerlink\" title=\"Estimating\"></a>Estimating</h3><ul>\n<li>Estimate to avoid surprises and optimize efficiently </li>\n<li>Iterate the schedule with the code</li>\n<li>Make time estimate cautiously</li>\n</ul>\n<p>Link: <a href=\"/files/notes/The_Pragmatic_Programmer_chapter_1&amp;2.pdf\">Mindmap (as PDF format)</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"The-Pragmatic-Programmer\"><a href=\"#The-Pragmatic-Programmer\" class=\"headerlink\" title=\"The Pragmatic Programmer\"></a>The Pragmatic Programmer</h1><h2 id=\"1-A-Pragmatic-Philosophy\"><a href=\"#1-A-Pragmatic-Philosophy\" class=\"headerlink\" title=\"1. A Pragmatic Philosophy\"></a>1. A Pragmatic Philosophy</h2><h3 id=\"The-Cat-Ate-My-Source-Code\"><a href=\"#The-Cat-Ate-My-Source-Code\" class=\"headerlink\" title=\"The Cat Ate My Source Code\"></a>The Cat Ate My Source Code</h3><ul>\n<li>Take responsibilities for yourself and your actions, being honest and direct</li>\n<li>Provide options instead of lame excuses</li>\n<li>Be ready for others’ errors</li>\n<li>Admit that you need help when necessary</li>\n</ul>\n<h3 id=\"Software-Entropy\"><a href=\"#Software-Entropy\" class=\"headerlink\" title=\"Software Entropy\"></a>Software Entropy</h3><ul>\n<li><strong>Don’t live with broken windows, fix them as soon as they are discovered</strong></li>\n<li>If time is insufficient, leave a comment at least</li>\n<li>Neglect accelerates the rot faster than any other factor</li>\n</ul>","more":"<h3 id=\"Stone-Soup-and-Boiled-Frogs\"><a href=\"#Stone-Soup-and-Boiled-Frogs\" class=\"headerlink\" title=\"Stone Soup and Boiled Frogs\"></a>Stone Soup and Boiled Frogs</h3><ul>\n<li><strong>Be a catalyst for change. Show them a glimpse of the future and you’ll get them to rally around</strong></li>\n<li>Remember the big picture. Constantly review what’s happening around you.</li>\n</ul>\n<h3 id=\"Good-Enough-Software\"><a href=\"#Good-Enough-Software\" class=\"headerlink\" title=\"Good-Enough Software\"></a>Good-Enough Software</h3><ul>\n<li>Write software that’s good enough for users, future maintainers, your own peace of mind. </li>\n<li><strong>The scope and quality of the system should be part of the early requirement</strong></li>\n<li>Great software today is often preferable to perfect software tomorrow. They can NEVER be perfect.</li>\n</ul>\n<h3 id=\"Your-Knowledge-Portfolio\"><a href=\"#Your-Knowledge-Portfolio\" class=\"headerlink\" title=\"Your Knowledge Portfolio\"></a>Your Knowledge Portfolio</h3><ul>\n<li><strong>Invest in your knowledge portfolio regularly. Learn at least one new language every year</strong></li>\n<li>Diversity matters. Learn technical and non-technical knowledge.</li>\n<li>Balance between high-risk technologies and low-risk ones</li>\n<li>Be ready to learn emerging technology before it gets popular.  </li>\n<li>Stay current and get wired</li>\n</ul>\n<h3 id=\"Communicate\"><a href=\"#Communicate\" class=\"headerlink\" title=\"Communicate!\"></a>Communicate!</h3><ul>\n<li>Know what you want to say</li>\n<li><strong>It’s both WHAY YOU SAY and THE WAY YOU SAY IT</strong></li>\n<li>Know the audience</li>\n</ul>\n<h2 id=\"2-A-Pragmatic-Approach\"><a href=\"#2-A-Pragmatic-Approach\" class=\"headerlink\" title=\"2. A Pragmatic Approach\"></a>2. A Pragmatic Approach</h2><h3 id=\"The-Evils-of-Duplication\"><a href=\"#The-Evils-of-Duplication\" class=\"headerlink\" title=\"The  Evils of Duplication\"></a>The  Evils of Duplication</h3><ul>\n<li>DRY principle: Don’t Repeat Yourself</li>\n<li>If duplication is unavoidable, make the process active by using automatic methods</li>\n<li>Make comments independent from detailed code</li>\n<li>Use header files to document interface issues</li>\n<li><strong>Normalize data by using accessor functions to read/write and localizing impacts</strong></li>\n<li>Shortcuts make for longer delays. Avoid impatient Duplication</li>\n<li>Encourage active and frequent communications between developers. Appoint a member as the project librarian if possible</li>\n</ul>\n<h3 id=\"Orthogonality\"><a href=\"#Orthogonality\" class=\"headerlink\" title=\"Orthogonality\"></a>Orthogonality</h3><ul>\n<li>Orthogonality signifies independence and decoupling.</li>\n<li><strong>Eliminate effects between unrelated things</strong></li>\n<li>Orthogonality increases productivity and reduces risk</li>\n<li>An orthogonal team is more efficient</li>\n</ul>\n<h3 id=\"Reversibility\"><a href=\"#Reversibility\" class=\"headerlink\" title=\"Reversibility\"></a>Reversibility</h3><ul>\n<li>There are no final decisions. ALL decisions are temporary in real circumstances</li>\n<li>Make architecture flexible to get ready for a change in platform, language, design pattern, etc</li>\n</ul>\n<h3 id=\"Tracer-Bullets\"><a href=\"#Tracer-Bullets\" class=\"headerlink\" title=\"Tracer Bullets\"></a>Tracer Bullets</h3><ul>\n<li>Use tracer bullets like printing variables to test components of the system</li>\n<li><strong>Tracer code is not disposable because a project is never fininshed</strong></li>\n<li>Prototype generates disposable code while tracer code is lean but complete. They are different development styles</li>\n</ul>\n<h3 id=\"Prototypes-and-Post-it-Notes\"><a href=\"#Prototypes-and-Post-it-Notes\" class=\"headerlink\" title=\"Prototypes and Post-it Notes\"></a>Prototypes and Post-it Notes</h3><ul>\n<li>Prototypes are designed to test some specific aspects of a project</li>\n<li>Prototypes can be built on different materials, like workflow or application logic for dynamic things and whiteboard for user interface</li>\n<li>Prototypes are designed to answer just a few questions. They are much cheaper and faster to develop</li>\n<li><strong>The value of prototype lies both in the code produced and the lesson learned</strong></li>\n<li>Things can be ignored when building a prototype<ul>\n<li>Correctness of data</li>\n<li>Completeness of function</li>\n<li>Robustness (Error checking)</li>\n<li>Pretty and standard style</li>\n</ul>\n</li>\n<li>When prototype is inclined to be based on, turn to tracer bullet approach instead</li>\n</ul>\n<h3 id=\"Domain-Languages\"><a href=\"#Domain-Languages\" class=\"headerlink\" title=\"Domain Languages\"></a>Domain Languages</h3><ul>\n<li><strong>Program close to the problem domain</strong></li>\n<li>Use mini-language to help create artifacts (related to metaprogramming)</li>\n</ul>\n<h3 id=\"Estimating\"><a href=\"#Estimating\" class=\"headerlink\" title=\"Estimating\"></a>Estimating</h3><ul>\n<li>Estimate to avoid surprises and optimize efficiently </li>\n<li>Iterate the schedule with the code</li>\n<li>Make time estimate cautiously</li>\n</ul>\n<p>Link: <a href=\"/files/notes/The_Pragmatic_Programmer_chapter_1&amp;2.pdf\">Mindmap (as PDF format)</a></p>"},{"title":"数字电路-概念笔记-01","date":"2019-02-02T16:00:00.000Z","_content":"> 关键词：  数制, 码制  \n\n### 一、几种常用的数制  \n- 十进制 (Decimal)\n- 二进制 (Binary)\n- 八进制 (Octal)\n- 十六进制 (Hexadecimal, Hex)\n<!-- more -->\n\n### 二、进制转换  \n1. 二 - 十转换：按各 \"1\" 位权重相加\n2. 十 - 二转换：  \n  - 整数：除2取余数，逆序排列\n  - 小数：乘2取整数，顺序排列\n3. 二 - 十六相互转换：以四位为一个整体\n4. 二 - 八相互转换：以三位为一个整体\n5. 十 - 八/十六相互转换：以二进制为中间值  \n\n### 三、二进制算术运算\n1. **特点：加减乘除均可用“移位”与“相加”两种操作实现**\n2. 原码、反码(1's Complement)和补码(2's Complement)  \n  - 正整数：三种码相同\n  - 负整数：  \n    - 原→反：符号位不变，数值位取反\n    - 原→补：符号位不变，数值位取反再加一\n3. 补码的意义：用加法取代减法（A - B = A<sub>补</sub> + B<sub>补</sub>）\n4. 补码的理论基础：离散数学中的循环群  \n\n### 四、几种常用的编码\n1. 十进制代码：\n- BCD码：恒权码，4位表示一个十进制位\n- 余3码：变权码，4位表示一个比实际二进制数小3的十进制数，如0011表示(0)<sub>10</sub>  \n***作用：和为10的两数等于二进制的16，从高位自动产生进位信号***\n- 余3循环码：变权码，相邻代码间只有一位不同\n2. 格雷码(Gary Code)，又称循环码：  \n***作用：相邻代码间只有一位变化，不产生过渡噪声***\n3. ASCII码：7位二进制代码，共128个\n\n### 参考资料\n1. 阎石. *数字电子技术基础.* 高等教育出版社, 2005.\n\n\n\n\n\n\n","source":"_posts/digital-circuit-01.md","raw":"---\ntitle: 数字电路-概念笔记-01\ndate: 2019-02-03\ntags: [Digital Circuit]\n---\n> 关键词：  数制, 码制  \n\n### 一、几种常用的数制  \n- 十进制 (Decimal)\n- 二进制 (Binary)\n- 八进制 (Octal)\n- 十六进制 (Hexadecimal, Hex)\n<!-- more -->\n\n### 二、进制转换  \n1. 二 - 十转换：按各 \"1\" 位权重相加\n2. 十 - 二转换：  \n  - 整数：除2取余数，逆序排列\n  - 小数：乘2取整数，顺序排列\n3. 二 - 十六相互转换：以四位为一个整体\n4. 二 - 八相互转换：以三位为一个整体\n5. 十 - 八/十六相互转换：以二进制为中间值  \n\n### 三、二进制算术运算\n1. **特点：加减乘除均可用“移位”与“相加”两种操作实现**\n2. 原码、反码(1's Complement)和补码(2's Complement)  \n  - 正整数：三种码相同\n  - 负整数：  \n    - 原→反：符号位不变，数值位取反\n    - 原→补：符号位不变，数值位取反再加一\n3. 补码的意义：用加法取代减法（A - B = A<sub>补</sub> + B<sub>补</sub>）\n4. 补码的理论基础：离散数学中的循环群  \n\n### 四、几种常用的编码\n1. 十进制代码：\n- BCD码：恒权码，4位表示一个十进制位\n- 余3码：变权码，4位表示一个比实际二进制数小3的十进制数，如0011表示(0)<sub>10</sub>  \n***作用：和为10的两数等于二进制的16，从高位自动产生进位信号***\n- 余3循环码：变权码，相邻代码间只有一位不同\n2. 格雷码(Gary Code)，又称循环码：  \n***作用：相邻代码间只有一位变化，不产生过渡噪声***\n3. ASCII码：7位二进制代码，共128个\n\n### 参考资料\n1. 阎石. *数字电子技术基础.* 高等教育出版社, 2005.\n\n\n\n\n\n\n","slug":"digital-circuit-01","published":1,"updated":"2019-05-04T03:31:45.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjq000530uv71d0gvpk","content":"<blockquote>\n<p>关键词：  数制, 码制  </p>\n</blockquote>\n<h3 id=\"一、几种常用的数制\"><a href=\"#一、几种常用的数制\" class=\"headerlink\" title=\"一、几种常用的数制\"></a>一、几种常用的数制</h3><ul>\n<li>十进制 (Decimal)</li>\n<li>二进制 (Binary)</li>\n<li>八进制 (Octal)</li>\n<li>十六进制 (Hexadecimal, Hex)<a id=\"more\"></a>\n</li>\n</ul>\n<h3 id=\"二、进制转换\"><a href=\"#二、进制转换\" class=\"headerlink\" title=\"二、进制转换\"></a>二、进制转换</h3><ol>\n<li>二 - 十转换：按各 “1” 位权重相加</li>\n<li>十 - 二转换：  <ul>\n<li>整数：除2取余数，逆序排列</li>\n<li>小数：乘2取整数，顺序排列</li>\n</ul>\n</li>\n<li>二 - 十六相互转换：以四位为一个整体</li>\n<li>二 - 八相互转换：以三位为一个整体</li>\n<li>十 - 八/十六相互转换：以二进制为中间值  </li>\n</ol>\n<h3 id=\"三、二进制算术运算\"><a href=\"#三、二进制算术运算\" class=\"headerlink\" title=\"三、二进制算术运算\"></a>三、二进制算术运算</h3><ol>\n<li><strong>特点：加减乘除均可用“移位”与“相加”两种操作实现</strong></li>\n<li>原码、反码(1’s Complement)和补码(2’s Complement)  <ul>\n<li>正整数：三种码相同</li>\n<li>负整数：  <ul>\n<li>原→反：符号位不变，数值位取反</li>\n<li>原→补：符号位不变，数值位取反再加一</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>补码的意义：用加法取代减法（A - B = A<sub>补</sub> + B<sub>补</sub>）</li>\n<li>补码的理论基础：离散数学中的循环群  </li>\n</ol>\n<h3 id=\"四、几种常用的编码\"><a href=\"#四、几种常用的编码\" class=\"headerlink\" title=\"四、几种常用的编码\"></a>四、几种常用的编码</h3><ol>\n<li>十进制代码：</li>\n</ol>\n<ul>\n<li>BCD码：恒权码，4位表示一个十进制位</li>\n<li>余3码：变权码，4位表示一个比实际二进制数小3的十进制数，如0011表示(0)<sub>10</sub><br><strong><em>作用：和为10的两数等于二进制的16，从高位自动产生进位信号</em></strong></li>\n<li>余3循环码：变权码，相邻代码间只有一位不同</li>\n</ul>\n<ol start=\"2\">\n<li>格雷码(Gary Code)，又称循环码：<br><strong><em>作用：相邻代码间只有一位变化，不产生过渡噪声</em></strong></li>\n<li>ASCII码：7位二进制代码，共128个</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>阎石. <em>数字电子技术基础.</em> 高等教育出版社, 2005.</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>关键词：  数制, 码制  </p>\n</blockquote>\n<h3 id=\"一、几种常用的数制\"><a href=\"#一、几种常用的数制\" class=\"headerlink\" title=\"一、几种常用的数制\"></a>一、几种常用的数制</h3><ul>\n<li>十进制 (Decimal)</li>\n<li>二进制 (Binary)</li>\n<li>八进制 (Octal)</li>\n<li>十六进制 (Hexadecimal, Hex)</li></ul>","more":"\n\n<h3 id=\"二、进制转换\"><a href=\"#二、进制转换\" class=\"headerlink\" title=\"二、进制转换\"></a>二、进制转换</h3><ol>\n<li>二 - 十转换：按各 “1” 位权重相加</li>\n<li>十 - 二转换：  <ul>\n<li>整数：除2取余数，逆序排列</li>\n<li>小数：乘2取整数，顺序排列</li>\n</ul>\n</li>\n<li>二 - 十六相互转换：以四位为一个整体</li>\n<li>二 - 八相互转换：以三位为一个整体</li>\n<li>十 - 八/十六相互转换：以二进制为中间值  </li>\n</ol>\n<h3 id=\"三、二进制算术运算\"><a href=\"#三、二进制算术运算\" class=\"headerlink\" title=\"三、二进制算术运算\"></a>三、二进制算术运算</h3><ol>\n<li><strong>特点：加减乘除均可用“移位”与“相加”两种操作实现</strong></li>\n<li>原码、反码(1’s Complement)和补码(2’s Complement)  <ul>\n<li>正整数：三种码相同</li>\n<li>负整数：  <ul>\n<li>原→反：符号位不变，数值位取反</li>\n<li>原→补：符号位不变，数值位取反再加一</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>补码的意义：用加法取代减法（A - B = A<sub>补</sub> + B<sub>补</sub>）</li>\n<li>补码的理论基础：离散数学中的循环群  </li>\n</ol>\n<h3 id=\"四、几种常用的编码\"><a href=\"#四、几种常用的编码\" class=\"headerlink\" title=\"四、几种常用的编码\"></a>四、几种常用的编码</h3><ol>\n<li>十进制代码：</li>\n</ol>\n<ul>\n<li>BCD码：恒权码，4位表示一个十进制位</li>\n<li>余3码：变权码，4位表示一个比实际二进制数小3的十进制数，如0011表示(0)<sub>10</sub><br><strong><em>作用：和为10的两数等于二进制的16，从高位自动产生进位信号</em></strong></li>\n<li>余3循环码：变权码，相邻代码间只有一位不同</li>\n</ul>\n<ol start=\"2\">\n<li>格雷码(Gary Code)，又称循环码：<br><strong><em>作用：相邻代码间只有一位变化，不产生过渡噪声</em></strong></li>\n<li>ASCII码：7位二进制代码，共128个</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>阎石. <em>数字电子技术基础.</em> 高等教育出版社, 2005.</li>\n</ol>"},{"title":"Python-Brief Introduction of Grammar","date":"2019-02-25T16:00:00.000Z","_content":"\n​\tThis article gives a brief introduction of grammar of Python\n\n### Basic Grammar\n\n1. **Definition & assignment of variables**\n```python\n   foo = 1\n   bar, baz = \"Hello world!\", True\n```\n2. **Condition statements**\n```python\n   if a < b:\n   ​\tprint (\"YES\")\n   elif a > b:\n   ​\tprint (\"NO\")\n   else:\n   ​\tpass\t# Do nothing\n```\n<!-- more -->\n\n### Basic containers \n\n1. **List**\n```python\n   names = [\"Dave\", \"Mike\", \"Adams\"]\n   names.append(\"Eric\")\n   names.insert(2, \"Jobs\")\n   sub_a = names[0:2]\n   sub_b = names[0:-1]\n   reverse_str = names[::-1]\n   name[0:2] = [\"Dave\", \"Mark\", \"Jeff\"]\n   a = [1, 2, 3] + [4, 5]\n   b = [1, True, \"Eric\", [2, 3]]\n```\n2. **Tuple**\n```python\n   stock = (\"Good\", 100, True)\n   items = (\"Apple\", )\t# ',' is necessary since ( ) are always valid\n```\n   Items in a tuple **CANNOT** be changed. But if it is another container, things can be different.\n```python\n   a = [\"Apple\"]\n   b = (a, )\n   a.append(\"Pear\")\t# Valid\n```\n   Tuple takes less memory than list, so use them if possible.\n\n3. **Set**\n\n   Sets are used to contain a series of **unique** elements **without order**.\n```python\n   s = set([1, 2, 3, 4])\n   a = t | s\t# Union of t and s\n   b = t | s\t# Intersection of t and s\n   c = t - s\t\n   d = t ^ s\t# Symmetric difference of t and s\n   t.add('x') # Add an item\n   s.update([1, 2, 3]) # Add multiple items\n   t.remove('x') # Remove an item\n```\n\n4. **Dictionary** \n\n   Dictionary contains some key-value pairs.\n```python\n\tstock = {\n        \"name\"   : \"Eric\",\n        \"Age\"    : 19,\n        \"Gender\" : \"Male\"\n\t}\n\tstock[\"Balance\"] = 0\n\tp = stock.get(\"Age\", 0)\n```\n\n### Iterate and loop  \n```python\n\tFor item in range(0,5):\n\t\tprint (item, end='')\t# 0 1 2 3 4\n\twith open(data.txt) as f:\n\t\tfor line in f:\n\t\t\tprint (line)\t# Print all the lines in this file.\n```\n\n### Function\n\n​\tUse `def` to define functions.\n```python\n\tdef new_max(a,b):\n\t\tif a > b:\n\t\t\treturn a\n\t\telse:\n    \t\treturn b\n```\n\n​\tIf you want to return multiple variables, return them as a tuple.\n```python\n\tdef my_func(a,b=100):\n\t\treturn (a,b)\n    x = eval(input(\"Please input a number\"))\n    y = my_func(x,0)\n```\n\n​\tuse `global` to get global variables.\n```python\n\tcount = 0\n\tdef my_func(x):\n\t\tglobal count\n\t\tcount += 1\n\t\treturn count\n```\n\n### Class and object\n\n​\t**All values in Python are OBJECTS.** We can design your own class easily.\n```python\nClass Stack(object):\t# Stack inherit from object\n\tdef __init__(self):\t\t# Initialize this stack\n        self.stack = [] \n    def push(self,object):\n        self.stack.append(object)\n    def pop(self):\n        return self.stack.pop()\ns = Stack()\ns.push(\"David\")\ndel s\n```\n\n### Error\n\n​\tError will lead to the termination of program. But we can use `try` and `except` to catch and deal with them.\n```python\n\ttry:\n\t\tf = open(\"test.txt\",\"r\")\n\texcept IOError as e:\t# Catch IOError\n\t\tprint (e)\n\texcept:\t\t# Catch other errors\n\t\tprint(\"GG\")\n```\n\n​\tWe can use `raise` to cause an error manually.\n\n```python\n\traise RuntimeError(\"Computer says no\")\n```\n\n**Modules**\n\n​\tWe can divide a program as several modules for easy maintenance.\n```python\n\t#file : temp.py\n\tdef my_max(a,b):\n\t\treturn max(a,b)\n\tif __name__ == '__main__':\n\t\tprint(\"Hello\")\n\t\n\t#file : main.py\n\timport temp as t\t# No output here\n\tx = t.my_max(10,15)\t\t# x == 15\n```\n\n### References\n\n​\t1. David M. Beazley. *Python Essential Reference*. Sams, 2001.","source":"_posts/python-02.md","raw":"---\ntitle: Python-Brief Introduction of Grammar \ndate: 2019-02-26\ntags: [python]\n---\n\n​\tThis article gives a brief introduction of grammar of Python\n\n### Basic Grammar\n\n1. **Definition & assignment of variables**\n```python\n   foo = 1\n   bar, baz = \"Hello world!\", True\n```\n2. **Condition statements**\n```python\n   if a < b:\n   ​\tprint (\"YES\")\n   elif a > b:\n   ​\tprint (\"NO\")\n   else:\n   ​\tpass\t# Do nothing\n```\n<!-- more -->\n\n### Basic containers \n\n1. **List**\n```python\n   names = [\"Dave\", \"Mike\", \"Adams\"]\n   names.append(\"Eric\")\n   names.insert(2, \"Jobs\")\n   sub_a = names[0:2]\n   sub_b = names[0:-1]\n   reverse_str = names[::-1]\n   name[0:2] = [\"Dave\", \"Mark\", \"Jeff\"]\n   a = [1, 2, 3] + [4, 5]\n   b = [1, True, \"Eric\", [2, 3]]\n```\n2. **Tuple**\n```python\n   stock = (\"Good\", 100, True)\n   items = (\"Apple\", )\t# ',' is necessary since ( ) are always valid\n```\n   Items in a tuple **CANNOT** be changed. But if it is another container, things can be different.\n```python\n   a = [\"Apple\"]\n   b = (a, )\n   a.append(\"Pear\")\t# Valid\n```\n   Tuple takes less memory than list, so use them if possible.\n\n3. **Set**\n\n   Sets are used to contain a series of **unique** elements **without order**.\n```python\n   s = set([1, 2, 3, 4])\n   a = t | s\t# Union of t and s\n   b = t | s\t# Intersection of t and s\n   c = t - s\t\n   d = t ^ s\t# Symmetric difference of t and s\n   t.add('x') # Add an item\n   s.update([1, 2, 3]) # Add multiple items\n   t.remove('x') # Remove an item\n```\n\n4. **Dictionary** \n\n   Dictionary contains some key-value pairs.\n```python\n\tstock = {\n        \"name\"   : \"Eric\",\n        \"Age\"    : 19,\n        \"Gender\" : \"Male\"\n\t}\n\tstock[\"Balance\"] = 0\n\tp = stock.get(\"Age\", 0)\n```\n\n### Iterate and loop  \n```python\n\tFor item in range(0,5):\n\t\tprint (item, end='')\t# 0 1 2 3 4\n\twith open(data.txt) as f:\n\t\tfor line in f:\n\t\t\tprint (line)\t# Print all the lines in this file.\n```\n\n### Function\n\n​\tUse `def` to define functions.\n```python\n\tdef new_max(a,b):\n\t\tif a > b:\n\t\t\treturn a\n\t\telse:\n    \t\treturn b\n```\n\n​\tIf you want to return multiple variables, return them as a tuple.\n```python\n\tdef my_func(a,b=100):\n\t\treturn (a,b)\n    x = eval(input(\"Please input a number\"))\n    y = my_func(x,0)\n```\n\n​\tuse `global` to get global variables.\n```python\n\tcount = 0\n\tdef my_func(x):\n\t\tglobal count\n\t\tcount += 1\n\t\treturn count\n```\n\n### Class and object\n\n​\t**All values in Python are OBJECTS.** We can design your own class easily.\n```python\nClass Stack(object):\t# Stack inherit from object\n\tdef __init__(self):\t\t# Initialize this stack\n        self.stack = [] \n    def push(self,object):\n        self.stack.append(object)\n    def pop(self):\n        return self.stack.pop()\ns = Stack()\ns.push(\"David\")\ndel s\n```\n\n### Error\n\n​\tError will lead to the termination of program. But we can use `try` and `except` to catch and deal with them.\n```python\n\ttry:\n\t\tf = open(\"test.txt\",\"r\")\n\texcept IOError as e:\t# Catch IOError\n\t\tprint (e)\n\texcept:\t\t# Catch other errors\n\t\tprint(\"GG\")\n```\n\n​\tWe can use `raise` to cause an error manually.\n\n```python\n\traise RuntimeError(\"Computer says no\")\n```\n\n**Modules**\n\n​\tWe can divide a program as several modules for easy maintenance.\n```python\n\t#file : temp.py\n\tdef my_max(a,b):\n\t\treturn max(a,b)\n\tif __name__ == '__main__':\n\t\tprint(\"Hello\")\n\t\n\t#file : main.py\n\timport temp as t\t# No output here\n\tx = t.my_max(10,15)\t\t# x == 15\n```\n\n### References\n\n​\t1. David M. Beazley. *Python Essential Reference*. Sams, 2001.","slug":"python-02","published":1,"updated":"2019-04-30T16:42:14.550Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjt000830uvgvm0k4qb","content":"<p>​    This article gives a brief introduction of grammar of Python</p>\n<h3 id=\"Basic-Grammar\"><a href=\"#Basic-Grammar\" class=\"headerlink\" title=\"Basic Grammar\"></a>Basic Grammar</h3><ol>\n<li><p><strong>Definition &amp; assignment of variables</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = <span class=\"number\">1</span></span><br><span class=\"line\">bar, baz = <span class=\"string\">\"Hello world!\"</span>, <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Condition statements</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a &lt; b:</span><br><span class=\"line\">​\t<span class=\"keyword\">print</span> (<span class=\"string\">\"YES\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> a &gt; b:</span><br><span class=\"line\">​\t<span class=\"keyword\">print</span> (<span class=\"string\">\"NO\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">​\t<span class=\"keyword\">pass</span>\t<span class=\"comment\"># Do nothing</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a>\n<h3 id=\"Basic-containers\"><a href=\"#Basic-containers\" class=\"headerlink\" title=\"Basic containers\"></a>Basic containers</h3><ol>\n<li><p><strong>List</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">\"Dave\"</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Adams\"</span>]</span><br><span class=\"line\">names.append(<span class=\"string\">\"Eric\"</span>)</span><br><span class=\"line\">names.insert(<span class=\"number\">2</span>, <span class=\"string\">\"Jobs\"</span>)</span><br><span class=\"line\">sub_a = names[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">sub_b = names[<span class=\"number\">0</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">reverse_str = names[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">name[<span class=\"number\">0</span>:<span class=\"number\">2</span>] = [<span class=\"string\">\"Dave\"</span>, <span class=\"string\">\"Mark\"</span>, <span class=\"string\">\"Jeff\"</span>]</span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] + [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"literal\">True</span>, <span class=\"string\">\"Eric\"</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Tuple</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stock = (<span class=\"string\">\"Good\"</span>, <span class=\"number\">100</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">items = (<span class=\"string\">\"Apple\"</span>, )\t<span class=\"comment\"># ',' is necessary since ( ) are always valid</span></span><br></pre></td></tr></table></figure>\n<p>Items in a tuple <strong>CANNOT</strong> be changed. But if it is another container, things can be different.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">\"Apple\"</span>]</span><br><span class=\"line\">b = (a, )</span><br><span class=\"line\">a.append(<span class=\"string\">\"Pear\"</span>)\t<span class=\"comment\"># Valid</span></span><br></pre></td></tr></table></figure>\n<p>Tuple takes less memory than list, so use them if possible.</p>\n</li>\n<li><p><strong>Set</strong></p>\n<p>Sets are used to contain a series of <strong>unique</strong> elements <strong>without order</strong>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\">a = t | s\t<span class=\"comment\"># Union of t and s</span></span><br><span class=\"line\">b = t | s\t<span class=\"comment\"># Intersection of t and s</span></span><br><span class=\"line\">c = t - s\t</span><br><span class=\"line\">d = t ^ s\t<span class=\"comment\"># Symmetric difference of t and s</span></span><br><span class=\"line\">t.add(<span class=\"string\">'x'</span>) <span class=\"comment\"># Add an item</span></span><br><span class=\"line\">s.update([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\"># Add multiple items</span></span><br><span class=\"line\">t.remove(<span class=\"string\">'x'</span>) <span class=\"comment\"># Remove an item</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Dictionary</strong> </p>\n<p>Dictionary contains some key-value pairs.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stock = &#123;</span><br><span class=\"line\">       <span class=\"string\">\"name\"</span>   : <span class=\"string\">\"Eric\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"Age\"</span>    : <span class=\"number\">19</span>,</span><br><span class=\"line\">       <span class=\"string\">\"Gender\"</span> : <span class=\"string\">\"Male\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stock[<span class=\"string\">\"Balance\"</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">p = stock.get(<span class=\"string\">\"Age\"</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Iterate-and-loop\"><a href=\"#Iterate-and-loop\" class=\"headerlink\" title=\"Iterate and loop\"></a>Iterate and loop</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For item <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (item, end=<span class=\"string\">''</span>)\t<span class=\"comment\"># 0 1 2 3 4</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(data.txt) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> (line)\t<span class=\"comment\"># Print all the lines in this file.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><p>​    Use <code>def</code> to define functions.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new_max</span><span class=\"params\">(a,b)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> b</span><br></pre></td></tr></table></figure></p>\n<p>​    If you want to return multiple variables, return them as a tuple.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_func</span><span class=\"params\">(a,b=<span class=\"number\">100</span>)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a,b)</span><br><span class=\"line\">   x = eval(input(<span class=\"string\">\"Please input a number\"</span>))</span><br><span class=\"line\">   y = my_func(x,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>​    use <code>global</code> to get global variables.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_func</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">global</span> count</span><br><span class=\"line\">\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Class-and-object\"><a href=\"#Class-and-object\" class=\"headerlink\" title=\"Class and object\"></a>Class and object</h3><p>​    <strong>All values in Python are OBJECTS.</strong> We can design your own class easily.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Stack(object):\t<span class=\"comment\"># Stack inherit from object</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span>\t\t<span class=\"comment\"># Initialize this stack</span></span><br><span class=\"line\">        self.stack = [] </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self,object)</span>:</span></span><br><span class=\"line\">        self.stack.append(object)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack.pop()</span><br><span class=\"line\">s = Stack()</span><br><span class=\"line\">s.push(<span class=\"string\">\"David\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">del</span> s</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><p>​    Error will lead to the termination of program. But we can use <code>try</code> and <code>except</code> to catch and deal with them.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\tf = open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"r\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:\t<span class=\"comment\"># Catch IOError</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (e)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:\t\t<span class=\"comment\"># Catch other errors</span></span><br><span class=\"line\">\tprint(<span class=\"string\">\"GG\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>​    We can use <code>raise</code> to cause an error manually.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">\"Computer says no\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>Modules</strong></p>\n<p>​    We can divide a program as several modules for easy maintenance.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#file : temp.py</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_max</span><span class=\"params\">(a,b)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max(a,b)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#file : main.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> temp <span class=\"keyword\">as</span> t\t<span class=\"comment\"># No output here</span></span><br><span class=\"line\">x = t.my_max(<span class=\"number\">10</span>,<span class=\"number\">15</span>)\t\t<span class=\"comment\"># x == 15</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>​    1. David M. Beazley. <em>Python Essential Reference</em>. Sams, 2001.</p>\n","site":{"data":{}},"excerpt":"<p>​    This article gives a brief introduction of grammar of Python</p>\n<h3 id=\"Basic-Grammar\"><a href=\"#Basic-Grammar\" class=\"headerlink\" title=\"Basic Grammar\"></a>Basic Grammar</h3><ol>\n<li><p><strong>Definition &amp; assignment of variables</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">foo = <span class=\"number\">1</span></span><br><span class=\"line\">bar, baz = <span class=\"string\">\"Hello world!\"</span>, <span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Condition statements</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> a &lt; b:</span><br><span class=\"line\">​\t<span class=\"keyword\">print</span> (<span class=\"string\">\"YES\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">elif</span> a &gt; b:</span><br><span class=\"line\">​\t<span class=\"keyword\">print</span> (<span class=\"string\">\"NO\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">​\t<span class=\"keyword\">pass</span>\t<span class=\"comment\"># Do nothing</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<h3 id=\"Basic-containers\"><a href=\"#Basic-containers\" class=\"headerlink\" title=\"Basic containers\"></a>Basic containers</h3><ol>\n<li><p><strong>List</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">names = [<span class=\"string\">\"Dave\"</span>, <span class=\"string\">\"Mike\"</span>, <span class=\"string\">\"Adams\"</span>]</span><br><span class=\"line\">names.append(<span class=\"string\">\"Eric\"</span>)</span><br><span class=\"line\">names.insert(<span class=\"number\">2</span>, <span class=\"string\">\"Jobs\"</span>)</span><br><span class=\"line\">sub_a = names[<span class=\"number\">0</span>:<span class=\"number\">2</span>]</span><br><span class=\"line\">sub_b = names[<span class=\"number\">0</span>:<span class=\"number\">-1</span>]</span><br><span class=\"line\">reverse_str = names[::<span class=\"number\">-1</span>]</span><br><span class=\"line\">name[<span class=\"number\">0</span>:<span class=\"number\">2</span>] = [<span class=\"string\">\"Dave\"</span>, <span class=\"string\">\"Mark\"</span>, <span class=\"string\">\"Jeff\"</span>]</span><br><span class=\"line\">a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>] + [<span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\">b = [<span class=\"number\">1</span>, <span class=\"literal\">True</span>, <span class=\"string\">\"Eric\"</span>, [<span class=\"number\">2</span>, <span class=\"number\">3</span>]]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Tuple</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stock = (<span class=\"string\">\"Good\"</span>, <span class=\"number\">100</span>, <span class=\"literal\">True</span>)</span><br><span class=\"line\">items = (<span class=\"string\">\"Apple\"</span>, )\t<span class=\"comment\"># ',' is necessary since ( ) are always valid</span></span><br></pre></td></tr></table></figure>\n<p>Items in a tuple <strong>CANNOT</strong> be changed. But if it is another container, things can be different.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"string\">\"Apple\"</span>]</span><br><span class=\"line\">b = (a, )</span><br><span class=\"line\">a.append(<span class=\"string\">\"Pear\"</span>)\t<span class=\"comment\"># Valid</span></span><br></pre></td></tr></table></figure>\n<p>Tuple takes less memory than list, so use them if possible.</p>\n</li>\n<li><p><strong>Set</strong></p>\n<p>Sets are used to contain a series of <strong>unique</strong> elements <strong>without order</strong>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">s = set([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>])</span><br><span class=\"line\">a = t | s\t<span class=\"comment\"># Union of t and s</span></span><br><span class=\"line\">b = t | s\t<span class=\"comment\"># Intersection of t and s</span></span><br><span class=\"line\">c = t - s\t</span><br><span class=\"line\">d = t ^ s\t<span class=\"comment\"># Symmetric difference of t and s</span></span><br><span class=\"line\">t.add(<span class=\"string\">'x'</span>) <span class=\"comment\"># Add an item</span></span><br><span class=\"line\">s.update([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]) <span class=\"comment\"># Add multiple items</span></span><br><span class=\"line\">t.remove(<span class=\"string\">'x'</span>) <span class=\"comment\"># Remove an item</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Dictionary</strong> </p>\n<p>Dictionary contains some key-value pairs.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stock = &#123;</span><br><span class=\"line\">       <span class=\"string\">\"name\"</span>   : <span class=\"string\">\"Eric\"</span>,</span><br><span class=\"line\">       <span class=\"string\">\"Age\"</span>    : <span class=\"number\">19</span>,</span><br><span class=\"line\">       <span class=\"string\">\"Gender\"</span> : <span class=\"string\">\"Male\"</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">stock[<span class=\"string\">\"Balance\"</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">p = stock.get(<span class=\"string\">\"Age\"</span>, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h3 id=\"Iterate-and-loop\"><a href=\"#Iterate-and-loop\" class=\"headerlink\" title=\"Iterate and loop\"></a>Iterate and loop</h3><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For item <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,<span class=\"number\">5</span>):</span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (item, end=<span class=\"string\">''</span>)\t<span class=\"comment\"># 0 1 2 3 4</span></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(data.txt) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> line <span class=\"keyword\">in</span> f:</span><br><span class=\"line\">\t\t<span class=\"keyword\">print</span> (line)\t<span class=\"comment\"># Print all the lines in this file.</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><p>​    Use <code>def</code> to define functions.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">new_max</span><span class=\"params\">(a,b)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> a &gt; b:</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a</span><br><span class=\"line\">\t<span class=\"keyword\">else</span>:</span><br><span class=\"line\">   \t\t<span class=\"keyword\">return</span> b</span><br></pre></td></tr></table></figure></p>\n<p>​    If you want to return multiple variables, return them as a tuple.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_func</span><span class=\"params\">(a,b=<span class=\"number\">100</span>)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (a,b)</span><br><span class=\"line\">   x = eval(input(<span class=\"string\">\"Please input a number\"</span>))</span><br><span class=\"line\">   y = my_func(x,<span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure></p>\n<p>​    use <code>global</code> to get global variables.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_func</span><span class=\"params\">(x)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">global</span> count</span><br><span class=\"line\">\tcount += <span class=\"number\">1</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> count</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Class-and-object\"><a href=\"#Class-and-object\" class=\"headerlink\" title=\"Class and object\"></a>Class and object</h3><p>​    <strong>All values in Python are OBJECTS.</strong> We can design your own class easily.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class Stack(object):\t<span class=\"comment\"># Stack inherit from object</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span>\t\t<span class=\"comment\"># Initialize this stack</span></span><br><span class=\"line\">        self.stack = [] </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">push</span><span class=\"params\">(self,object)</span>:</span></span><br><span class=\"line\">        self.stack.append(object)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">pop</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self.stack.pop()</span><br><span class=\"line\">s = Stack()</span><br><span class=\"line\">s.push(<span class=\"string\">\"David\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">del</span> s</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h3><p>​    Error will lead to the termination of program. But we can use <code>try</code> and <code>except</code> to catch and deal with them.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">\tf = open(<span class=\"string\">\"test.txt\"</span>,<span class=\"string\">\"r\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError <span class=\"keyword\">as</span> e:\t<span class=\"comment\"># Catch IOError</span></span><br><span class=\"line\">\t<span class=\"keyword\">print</span> (e)</span><br><span class=\"line\"><span class=\"keyword\">except</span>:\t\t<span class=\"comment\"># Catch other errors</span></span><br><span class=\"line\">\tprint(<span class=\"string\">\"GG\"</span>)</span><br></pre></td></tr></table></figure></p>\n<p>​    We can use <code>raise</code> to cause an error manually.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">raise</span> RuntimeError(<span class=\"string\">\"Computer says no\"</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>Modules</strong></p>\n<p>​    We can divide a program as several modules for easy maintenance.<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#file : temp.py</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">my_max</span><span class=\"params\">(a,b)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> max(a,b)</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">\tprint(<span class=\"string\">\"Hello\"</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#file : main.py</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> temp <span class=\"keyword\">as</span> t\t<span class=\"comment\"># No output here</span></span><br><span class=\"line\">x = t.my_max(<span class=\"number\">10</span>,<span class=\"number\">15</span>)\t\t<span class=\"comment\"># x == 15</span></span><br></pre></td></tr></table></figure></p>\n<h3 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References\"></a>References</h3><p>​    1. David M. Beazley. <em>Python Essential Reference</em>. Sams, 2001.</p>"},{"title":"线性代数-概念笔记-01","date":"2019-02-05T16:00:00.000Z","_content":"# 线性空间\n>关键词：线性空间, 基, 子空间, 线性空间的同构\n\n### 一、集合与映射\n1. 集合相等：含有完全相同的元素（外延公理）\n2. 映射的复合满足结合律\n\n### 二、线性空间的定义与简单性质\n1. 线性空间(Vector space)：定义了加法与数乘运算的数域。（加法群再加上一个域的数乘运算）其中：\n- 加法满足：交换，结合，有**0**（向量，其实是单位元），每个元素有相对于**0**的负元\n- 数乘满足：数字1为单位元，数字因子间可结合\n- 数乘与加法满足：互相可分配  \n<!-- more -->\n\n2. 简单性质\n- 加法的**0**唯一\n- 每个元素加法的负元素唯一\n- 数字0是数乘的**零元**，向量**0**是数乘在变量意义上的零元\n- 若 $$ k\\alpha=0 $$ ，则 $$ k=0 $$ 或 $$ \\alpha=0 $$\n\n### 三、维数, 基与坐标\n1. 定义：若线性空间V中有n个线性无关的向量，但没有更多数目的线性无关的向量，则称V为**n维的**。若V中可以找到任意多个线性无关的向量，则称V为**无限维的**。\n2. 定义：在n维线性空间V中，n个线性无关的向量 $$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$称为V的一组**基**。\n3. 定义：若$$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$是V的一组基，$$ \\alpha $$是V中任一向量，则$$ \\alpha $$可被基唯一线性表出：$$ \\alpha=a_1 \\epsilon_1+a_2 \\epsilon_2 + ... + a_n \\epsilon_n $$, 其中系数 $$ a_1, a_2, ..., a_n $$ 是被 $$ \\alpha $$ 与基唯一确定的，则称 $$ (a_1, a_2, ..., a_n) $$ 是 $$ \\alpha $$ 在基$$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$下的**坐标**。\n5. 若V中n个线性无关的向量 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 可表示出V中任意向量，那V是n维的，而 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 是V的一组基。\n\n### 四、基变换与坐标变换\n1. 基 $$ {\\epsilon_1}', {\\epsilon_2}', ..., {\\epsilon_n}' $$ 是基 $$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$ 的线性组合。记为 $$ ({\\epsilon_1}', {\\epsilon_2}', ..., {\\epsilon_n}') = A(\\epsilon_1, \\epsilon_2, ..., \\epsilon_n) $$, 称A为由基 $$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$ 到基 $$ {\\epsilon_1}', {\\epsilon_2}', ..., {\\epsilon_n}' $$ 的**过渡矩阵**。\n2. **向量的坐标变化公式**： $$ \\alpha' = A\\alpha $$ 或 $$ \\alpha = A^{-1} \\alpha' $$\n\n### 五、线性子空间\n1. 定义：数域P上线性空间V的一个非空子集合W称为V的一个**（线性）子空间**，如果W对于V的两种运算也构成数域P上的线性空间。\n2. 定理：若线性空间V的非空子集合W对于V的两种运算封闭，那么W是一个子空间。\n3. 任何一个子空间的维数不能超过整个线性空间的维数。\n4. **零子空间**（只含有零向量的子空间）与V本身称作线性空间V的**平凡子空间**，其他线性子空间称作**非平凡子空间**。\n5. 齐次线性方程组的全部解向量组成齐次线性方程组的**解空间**，其维数等于 $$ n-r $$ .\n6. 线性空间V中向量组 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 所有的线性组合称作**由 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 生成的子空间**，记为 $$ L(\\alpha_1, \\alpha_2, ..., \\alpha_n) $$ .\n7. 两个向量组生成相同子空间 $$ \\Leftrightarrow $$ 这两个向量组等价。\n8. $$ L(\\alpha_1, \\alpha_2, ..., \\alpha_n) $$ 的维数等于向量组 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 的秩。\n9. W为数域P上n维线性空间V的一个m维子空间，$$ \\alpha_1, \\alpha_2, ..., \\alpha_m $$ 是W的一组基，那么在V中一定能找到n-m个向量$$ \\alpha_{m+1}, \\alpha_2, ..., \\alpha_n $$，使$$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 是V的一组基（即扩充向量组）。\n\n### 六、子空间的交与和\n1. 定义： $$ V_1 + V_2 = \\{\\alpha_1 + \\alpha_2 \\vert \\alpha_1 \\in V_1, \\alpha_2 \\in V_2\\} $$\n2. 定理：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，则他们的交 $$ V_1 \\cap V_2 $$ 与和 $$ V_1 + V_2 $$ 也是 $$ V $$ 的子空间。\n3. **定理（维数公式）**：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，那么维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$ + 维 $$ (V_1 \\cap V_2) $$ 。\n4. 推论：若 $$ n $$ 维线性空间V中两个子空间 $$ V_1,V_2 $$  的维数之和大于n，那么 $$ V_1,V_2 $$ 必含有非零的公共向量。\n\n### 七、子空间的直和\n1. 子空间的直和是子空间的和的重要特殊情形。\n2. 设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，且和 $$ V_1+V_2 $$ 中每个向量 $$ \\alpha $$ 的分解式 $$ \\alpha = \\alpha_1+\\alpha_2, \\alpha_1 \\in V_1, \\alpha_2 \\in V_2 $$ 是**唯一**的，则这个和称为**直和**，记为 $$ V_1 \\oplus V_2 $$.\n3. 定理：设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，则**以下概念等价**：\n- $$ W = V_1+V_2 $$ 是直和 \n- 等式 $$ \\alpha_1+\\alpha_2=0, \\alpha_i \\in V_i (i=1,2) $$ 只有在 $$ \\alpha_i $$ 全为零向量时才成立 \n- $$ V_1 \\cap V_2 = \\{0\\} $$ 成立\n- 维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$\n4. 定理：设 $$ U $$ 为线性空间 $$ V $$ 的一个子空间，那么一定存在一个子空间 $$ W $$ 使 $$ V = U \\oplus W $$.\n5. 直和的多维推广：(3)中定理在多个子空间情况下的推广。\n\n### 八、线性空间的同构\n1. 向量与它的坐标间的对应关系，实质上是$$ V $$到 $$ P^n $$的一个双射。\n2. 定义：若线性空间$$V$$到$$V'$$有一个双射$$\\sigma$$,且满足以下性质：\n- \\\\( \\sigma(\\alpha + \\beta) = \\sigma(\\alpha)+\\sigma(\\beta) \\\\)\n- \\\\( \\sigma(k\\alpha) = k\\sigma(\\alpha) \\\\)  \n其中 $$\\alpha,\\beta$$是$$V$$中任意向量，$$ k $$是 $$ P $$中任意数，则称$$V$$与$$V'$$**同构**，而$$\\sigma$$称作**同构映射**。\n3. $$ P $$ 上任意一个 $$ n $$ 维线性空间都与 $$ P^n $$ 同构。\n4. $$ V $$中向量组$$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$线性相关 $$ \\Leftrightarrow $$ 他们的像 $$ \\sigma(\\alpha_1), \\sigma(\\alpha_2), ..., \\sigma(\\alpha_n) $$ 线性相关。\n5. $$ V $$ 在同构映射 $$\\sigma$$ 下的像集合 $$V'$$ 维数与 $$V$$ 相同。\n6. 同构映射的逆映射与两个同构映射的复合还是同构映射。\n7. **数域$$P$$上两个有限维线性空间同构的充要条件为他们有相同的维数**。\n\n### 参考资料\n1. 王萼芳,石生明. 高等代数(第四版). 高等教育出版社, 2013.\n\n\n\n\n","source":"_posts/liner-algebra-01.md","raw":"---\ntitle: 线性代数-概念笔记-01\ndate: 2019-02-06\ntags: [liner algebra]\n---\n# 线性空间\n>关键词：线性空间, 基, 子空间, 线性空间的同构\n\n### 一、集合与映射\n1. 集合相等：含有完全相同的元素（外延公理）\n2. 映射的复合满足结合律\n\n### 二、线性空间的定义与简单性质\n1. 线性空间(Vector space)：定义了加法与数乘运算的数域。（加法群再加上一个域的数乘运算）其中：\n- 加法满足：交换，结合，有**0**（向量，其实是单位元），每个元素有相对于**0**的负元\n- 数乘满足：数字1为单位元，数字因子间可结合\n- 数乘与加法满足：互相可分配  \n<!-- more -->\n\n2. 简单性质\n- 加法的**0**唯一\n- 每个元素加法的负元素唯一\n- 数字0是数乘的**零元**，向量**0**是数乘在变量意义上的零元\n- 若 $$ k\\alpha=0 $$ ，则 $$ k=0 $$ 或 $$ \\alpha=0 $$\n\n### 三、维数, 基与坐标\n1. 定义：若线性空间V中有n个线性无关的向量，但没有更多数目的线性无关的向量，则称V为**n维的**。若V中可以找到任意多个线性无关的向量，则称V为**无限维的**。\n2. 定义：在n维线性空间V中，n个线性无关的向量 $$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$称为V的一组**基**。\n3. 定义：若$$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$是V的一组基，$$ \\alpha $$是V中任一向量，则$$ \\alpha $$可被基唯一线性表出：$$ \\alpha=a_1 \\epsilon_1+a_2 \\epsilon_2 + ... + a_n \\epsilon_n $$, 其中系数 $$ a_1, a_2, ..., a_n $$ 是被 $$ \\alpha $$ 与基唯一确定的，则称 $$ (a_1, a_2, ..., a_n) $$ 是 $$ \\alpha $$ 在基$$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$下的**坐标**。\n5. 若V中n个线性无关的向量 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 可表示出V中任意向量，那V是n维的，而 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 是V的一组基。\n\n### 四、基变换与坐标变换\n1. 基 $$ {\\epsilon_1}', {\\epsilon_2}', ..., {\\epsilon_n}' $$ 是基 $$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$ 的线性组合。记为 $$ ({\\epsilon_1}', {\\epsilon_2}', ..., {\\epsilon_n}') = A(\\epsilon_1, \\epsilon_2, ..., \\epsilon_n) $$, 称A为由基 $$ \\epsilon_1, \\epsilon_2, ..., \\epsilon_n $$ 到基 $$ {\\epsilon_1}', {\\epsilon_2}', ..., {\\epsilon_n}' $$ 的**过渡矩阵**。\n2. **向量的坐标变化公式**： $$ \\alpha' = A\\alpha $$ 或 $$ \\alpha = A^{-1} \\alpha' $$\n\n### 五、线性子空间\n1. 定义：数域P上线性空间V的一个非空子集合W称为V的一个**（线性）子空间**，如果W对于V的两种运算也构成数域P上的线性空间。\n2. 定理：若线性空间V的非空子集合W对于V的两种运算封闭，那么W是一个子空间。\n3. 任何一个子空间的维数不能超过整个线性空间的维数。\n4. **零子空间**（只含有零向量的子空间）与V本身称作线性空间V的**平凡子空间**，其他线性子空间称作**非平凡子空间**。\n5. 齐次线性方程组的全部解向量组成齐次线性方程组的**解空间**，其维数等于 $$ n-r $$ .\n6. 线性空间V中向量组 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 所有的线性组合称作**由 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 生成的子空间**，记为 $$ L(\\alpha_1, \\alpha_2, ..., \\alpha_n) $$ .\n7. 两个向量组生成相同子空间 $$ \\Leftrightarrow $$ 这两个向量组等价。\n8. $$ L(\\alpha_1, \\alpha_2, ..., \\alpha_n) $$ 的维数等于向量组 $$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 的秩。\n9. W为数域P上n维线性空间V的一个m维子空间，$$ \\alpha_1, \\alpha_2, ..., \\alpha_m $$ 是W的一组基，那么在V中一定能找到n-m个向量$$ \\alpha_{m+1}, \\alpha_2, ..., \\alpha_n $$，使$$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$ 是V的一组基（即扩充向量组）。\n\n### 六、子空间的交与和\n1. 定义： $$ V_1 + V_2 = \\{\\alpha_1 + \\alpha_2 \\vert \\alpha_1 \\in V_1, \\alpha_2 \\in V_2\\} $$\n2. 定理：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，则他们的交 $$ V_1 \\cap V_2 $$ 与和 $$ V_1 + V_2 $$ 也是 $$ V $$ 的子空间。\n3. **定理（维数公式）**：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，那么维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$ + 维 $$ (V_1 \\cap V_2) $$ 。\n4. 推论：若 $$ n $$ 维线性空间V中两个子空间 $$ V_1,V_2 $$  的维数之和大于n，那么 $$ V_1,V_2 $$ 必含有非零的公共向量。\n\n### 七、子空间的直和\n1. 子空间的直和是子空间的和的重要特殊情形。\n2. 设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，且和 $$ V_1+V_2 $$ 中每个向量 $$ \\alpha $$ 的分解式 $$ \\alpha = \\alpha_1+\\alpha_2, \\alpha_1 \\in V_1, \\alpha_2 \\in V_2 $$ 是**唯一**的，则这个和称为**直和**，记为 $$ V_1 \\oplus V_2 $$.\n3. 定理：设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，则**以下概念等价**：\n- $$ W = V_1+V_2 $$ 是直和 \n- 等式 $$ \\alpha_1+\\alpha_2=0, \\alpha_i \\in V_i (i=1,2) $$ 只有在 $$ \\alpha_i $$ 全为零向量时才成立 \n- $$ V_1 \\cap V_2 = \\{0\\} $$ 成立\n- 维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$\n4. 定理：设 $$ U $$ 为线性空间 $$ V $$ 的一个子空间，那么一定存在一个子空间 $$ W $$ 使 $$ V = U \\oplus W $$.\n5. 直和的多维推广：(3)中定理在多个子空间情况下的推广。\n\n### 八、线性空间的同构\n1. 向量与它的坐标间的对应关系，实质上是$$ V $$到 $$ P^n $$的一个双射。\n2. 定义：若线性空间$$V$$到$$V'$$有一个双射$$\\sigma$$,且满足以下性质：\n- \\\\( \\sigma(\\alpha + \\beta) = \\sigma(\\alpha)+\\sigma(\\beta) \\\\)\n- \\\\( \\sigma(k\\alpha) = k\\sigma(\\alpha) \\\\)  \n其中 $$\\alpha,\\beta$$是$$V$$中任意向量，$$ k $$是 $$ P $$中任意数，则称$$V$$与$$V'$$**同构**，而$$\\sigma$$称作**同构映射**。\n3. $$ P $$ 上任意一个 $$ n $$ 维线性空间都与 $$ P^n $$ 同构。\n4. $$ V $$中向量组$$ \\alpha_1, \\alpha_2, ..., \\alpha_n $$线性相关 $$ \\Leftrightarrow $$ 他们的像 $$ \\sigma(\\alpha_1), \\sigma(\\alpha_2), ..., \\sigma(\\alpha_n) $$ 线性相关。\n5. $$ V $$ 在同构映射 $$\\sigma$$ 下的像集合 $$V'$$ 维数与 $$V$$ 相同。\n6. 同构映射的逆映射与两个同构映射的复合还是同构映射。\n7. **数域$$P$$上两个有限维线性空间同构的充要条件为他们有相同的维数**。\n\n### 参考资料\n1. 王萼芳,石生明. 高等代数(第四版). 高等教育出版社, 2013.\n\n\n\n\n","slug":"liner-algebra-01","published":1,"updated":"2019-04-30T16:43:10.949Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjv000930uvsosxe1bu","content":"<h1 id=\"线性空间\"><a href=\"#线性空间\" class=\"headerlink\" title=\"线性空间\"></a>线性空间</h1><blockquote>\n<p>关键词：线性空间, 基, 子空间, 线性空间的同构</p>\n</blockquote>\n<h3 id=\"一、集合与映射\"><a href=\"#一、集合与映射\" class=\"headerlink\" title=\"一、集合与映射\"></a>一、集合与映射</h3><ol>\n<li>集合相等：含有完全相同的元素（外延公理）</li>\n<li>映射的复合满足结合律</li>\n</ol>\n<h3 id=\"二、线性空间的定义与简单性质\"><a href=\"#二、线性空间的定义与简单性质\" class=\"headerlink\" title=\"二、线性空间的定义与简单性质\"></a>二、线性空间的定义与简单性质</h3><ol>\n<li>线性空间(Vector space)：定义了加法与数乘运算的数域。（加法群再加上一个域的数乘运算）其中：</li>\n</ol>\n<ul>\n<li>加法满足：交换，结合，有<strong>0</strong>（向量，其实是单位元），每个元素有相对于<strong>0</strong>的负元</li>\n<li>数乘满足：数字1为单位元，数字因子间可结合</li>\n<li>数乘与加法满足：互相可分配  <a id=\"more\"></a>\n</li>\n</ul>\n<ol start=\"2\">\n<li>简单性质</li>\n</ol>\n<ul>\n<li>加法的<strong>0</strong>唯一</li>\n<li>每个元素加法的负元素唯一</li>\n<li>数字0是数乘的<strong>零元</strong>，向量<strong>0</strong>是数乘在变量意义上的零元</li>\n<li>若 $$ k\\alpha=0 $$ ，则 $$ k=0 $$ 或 $$ \\alpha=0 $$</li>\n</ul>\n<h3 id=\"三、维数-基与坐标\"><a href=\"#三、维数-基与坐标\" class=\"headerlink\" title=\"三、维数, 基与坐标\"></a>三、维数, 基与坐标</h3><ol>\n<li>定义：若线性空间V中有n个线性无关的向量，但没有更多数目的线性无关的向量，则称V为<strong>n维的</strong>。若V中可以找到任意多个线性无关的向量，则称V为<strong>无限维的</strong>。</li>\n<li>定义：在n维线性空间V中，n个线性无关的向量 $$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$称为V的一组<strong>基</strong>。</li>\n<li>定义：若$$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$是V的一组基，$$ \\alpha $$是V中任一向量，则$$ \\alpha $$可被基唯一线性表出：$$ \\alpha=a_1 \\epsilon_1+a_2 \\epsilon_2 + … + a_n \\epsilon_n $$, 其中系数 $$ a_1, a_2, …, a_n $$ 是被 $$ \\alpha $$ 与基唯一确定的，则称 $$ (a_1, a_2, …, a_n) $$ 是 $$ \\alpha $$ 在基$$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$下的<strong>坐标</strong>。</li>\n<li>若V中n个线性无关的向量 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 可表示出V中任意向量，那V是n维的，而 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 是V的一组基。</li>\n</ol>\n<h3 id=\"四、基变换与坐标变换\"><a href=\"#四、基变换与坐标变换\" class=\"headerlink\" title=\"四、基变换与坐标变换\"></a>四、基变换与坐标变换</h3><ol>\n<li>基 $$ {\\epsilon_1}’, {\\epsilon_2}’, …, {\\epsilon_n}’ $$ 是基 $$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$ 的线性组合。记为 $$ ({\\epsilon_1}’, {\\epsilon_2}’, …, {\\epsilon_n}’) = A(\\epsilon_1, \\epsilon_2, …, \\epsilon_n) $$, 称A为由基 $$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$ 到基 $$ {\\epsilon_1}’, {\\epsilon_2}’, …, {\\epsilon_n}’ $$ 的<strong>过渡矩阵</strong>。</li>\n<li><strong>向量的坐标变化公式</strong>： $$ \\alpha’ = A\\alpha $$ 或 $$ \\alpha = A^{-1} \\alpha’ $$</li>\n</ol>\n<h3 id=\"五、线性子空间\"><a href=\"#五、线性子空间\" class=\"headerlink\" title=\"五、线性子空间\"></a>五、线性子空间</h3><ol>\n<li>定义：数域P上线性空间V的一个非空子集合W称为V的一个<strong>（线性）子空间</strong>，如果W对于V的两种运算也构成数域P上的线性空间。</li>\n<li>定理：若线性空间V的非空子集合W对于V的两种运算封闭，那么W是一个子空间。</li>\n<li>任何一个子空间的维数不能超过整个线性空间的维数。</li>\n<li><strong>零子空间</strong>（只含有零向量的子空间）与V本身称作线性空间V的<strong>平凡子空间</strong>，其他线性子空间称作<strong>非平凡子空间</strong>。</li>\n<li>齐次线性方程组的全部解向量组成齐次线性方程组的<strong>解空间</strong>，其维数等于 $$ n-r $$ .</li>\n<li>线性空间V中向量组 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 所有的线性组合称作<strong>由 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 生成的子空间</strong>，记为 $$ L(\\alpha_1, \\alpha_2, …, \\alpha_n) $$ .</li>\n<li>两个向量组生成相同子空间 $$ \\Leftrightarrow $$ 这两个向量组等价。</li>\n<li>$$ L(\\alpha_1, \\alpha_2, …, \\alpha_n) $$ 的维数等于向量组 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 的秩。</li>\n<li>W为数域P上n维线性空间V的一个m维子空间，$$ \\alpha_1, \\alpha_2, …, \\alpha_m $$ 是W的一组基，那么在V中一定能找到n-m个向量$$ \\alpha_{m+1}, \\alpha_2, …, \\alpha_n $$，使$$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 是V的一组基（即扩充向量组）。</li>\n</ol>\n<h3 id=\"六、子空间的交与和\"><a href=\"#六、子空间的交与和\" class=\"headerlink\" title=\"六、子空间的交与和\"></a>六、子空间的交与和</h3><ol>\n<li>定义： $$ V_1 + V_2 = {\\alpha_1 + \\alpha_2 \\vert \\alpha_1 \\in V_1, \\alpha_2 \\in V_2} $$</li>\n<li>定理：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，则他们的交 $$ V_1 \\cap V_2 $$ 与和 $$ V_1 + V_2 $$ 也是 $$ V $$ 的子空间。</li>\n<li><strong>定理（维数公式）</strong>：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，那么维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$ + 维 $$ (V_1 \\cap V_2) $$ 。</li>\n<li>推论：若 $$ n $$ 维线性空间V中两个子空间 $$ V_1,V_2 $$  的维数之和大于n，那么 $$ V_1,V_2 $$ 必含有非零的公共向量。</li>\n</ol>\n<h3 id=\"七、子空间的直和\"><a href=\"#七、子空间的直和\" class=\"headerlink\" title=\"七、子空间的直和\"></a>七、子空间的直和</h3><ol>\n<li>子空间的直和是子空间的和的重要特殊情形。</li>\n<li>设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，且和 $$ V_1+V_2 $$ 中每个向量 $$ \\alpha $$ 的分解式 $$ \\alpha = \\alpha_1+\\alpha_2, \\alpha_1 \\in V_1, \\alpha_2 \\in V_2 $$ 是<strong>唯一</strong>的，则这个和称为<strong>直和</strong>，记为 $$ V_1 \\oplus V_2 $$.</li>\n<li>定理：设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，则<strong>以下概念等价</strong>：</li>\n</ol>\n<ul>\n<li>$$ W = V_1+V_2 $$ 是直和 </li>\n<li>等式 $$ \\alpha_1+\\alpha_2=0, \\alpha_i \\in V_i (i=1,2) $$ 只有在 $$ \\alpha_i $$ 全为零向量时才成立 </li>\n<li>$$ V_1 \\cap V_2 = {0} $$ 成立</li>\n<li>维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$</li>\n</ul>\n<ol start=\"4\">\n<li>定理：设 $$ U $$ 为线性空间 $$ V $$ 的一个子空间，那么一定存在一个子空间 $$ W $$ 使 $$ V = U \\oplus W $$.</li>\n<li>直和的多维推广：(3)中定理在多个子空间情况下的推广。</li>\n</ol>\n<h3 id=\"八、线性空间的同构\"><a href=\"#八、线性空间的同构\" class=\"headerlink\" title=\"八、线性空间的同构\"></a>八、线性空间的同构</h3><ol>\n<li>向量与它的坐标间的对应关系，实质上是$$ V $$到 $$ P^n $$的一个双射。</li>\n<li>定义：若线性空间$$V$$到$$V’$$有一个双射$$\\sigma$$,且满足以下性质：</li>\n</ol>\n<ul>\n<li>\\( \\sigma(\\alpha + \\beta) = \\sigma(\\alpha)+\\sigma(\\beta) \\)</li>\n<li>\\( \\sigma(k\\alpha) = k\\sigma(\\alpha) \\)<br>其中 $$\\alpha,\\beta$$是$$V$$中任意向量，$$ k $$是 $$ P $$中任意数，则称$$V$$与$$V’$$<strong>同构</strong>，而$$\\sigma$$称作<strong>同构映射</strong>。</li>\n</ul>\n<ol start=\"3\">\n<li>$$ P $$ 上任意一个 $$ n $$ 维线性空间都与 $$ P^n $$ 同构。</li>\n<li>$$ V $$中向量组$$ \\alpha_1, \\alpha_2, …, \\alpha_n $$线性相关 $$ \\Leftrightarrow $$ 他们的像 $$ \\sigma(\\alpha_1), \\sigma(\\alpha_2), …, \\sigma(\\alpha_n) $$ 线性相关。</li>\n<li>$$ V $$ 在同构映射 $$\\sigma$$ 下的像集合 $$V’$$ 维数与 $$V$$ 相同。</li>\n<li>同构映射的逆映射与两个同构映射的复合还是同构映射。</li>\n<li><strong>数域$$P$$上两个有限维线性空间同构的充要条件为他们有相同的维数</strong>。</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>王萼芳,石生明. 高等代数(第四版). 高等教育出版社, 2013.</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h1 id=\"线性空间\"><a href=\"#线性空间\" class=\"headerlink\" title=\"线性空间\"></a>线性空间</h1><blockquote>\n<p>关键词：线性空间, 基, 子空间, 线性空间的同构</p>\n</blockquote>\n<h3 id=\"一、集合与映射\"><a href=\"#一、集合与映射\" class=\"headerlink\" title=\"一、集合与映射\"></a>一、集合与映射</h3><ol>\n<li>集合相等：含有完全相同的元素（外延公理）</li>\n<li>映射的复合满足结合律</li>\n</ol>\n<h3 id=\"二、线性空间的定义与简单性质\"><a href=\"#二、线性空间的定义与简单性质\" class=\"headerlink\" title=\"二、线性空间的定义与简单性质\"></a>二、线性空间的定义与简单性质</h3><ol>\n<li>线性空间(Vector space)：定义了加法与数乘运算的数域。（加法群再加上一个域的数乘运算）其中：</li>\n</ol>\n<ul>\n<li>加法满足：交换，结合，有<strong>0</strong>（向量，其实是单位元），每个元素有相对于<strong>0</strong>的负元</li>\n<li>数乘满足：数字1为单位元，数字因子间可结合</li>\n<li>数乘与加法满足：互相可分配</li></ul>","more":"\n\n<ol start=\"2\">\n<li>简单性质</li>\n</ol>\n<ul>\n<li>加法的<strong>0</strong>唯一</li>\n<li>每个元素加法的负元素唯一</li>\n<li>数字0是数乘的<strong>零元</strong>，向量<strong>0</strong>是数乘在变量意义上的零元</li>\n<li>若 $$ k\\alpha=0 $$ ，则 $$ k=0 $$ 或 $$ \\alpha=0 $$</li>\n</ul>\n<h3 id=\"三、维数-基与坐标\"><a href=\"#三、维数-基与坐标\" class=\"headerlink\" title=\"三、维数, 基与坐标\"></a>三、维数, 基与坐标</h3><ol>\n<li>定义：若线性空间V中有n个线性无关的向量，但没有更多数目的线性无关的向量，则称V为<strong>n维的</strong>。若V中可以找到任意多个线性无关的向量，则称V为<strong>无限维的</strong>。</li>\n<li>定义：在n维线性空间V中，n个线性无关的向量 $$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$称为V的一组<strong>基</strong>。</li>\n<li>定义：若$$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$是V的一组基，$$ \\alpha $$是V中任一向量，则$$ \\alpha $$可被基唯一线性表出：$$ \\alpha=a_1 \\epsilon_1+a_2 \\epsilon_2 + … + a_n \\epsilon_n $$, 其中系数 $$ a_1, a_2, …, a_n $$ 是被 $$ \\alpha $$ 与基唯一确定的，则称 $$ (a_1, a_2, …, a_n) $$ 是 $$ \\alpha $$ 在基$$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$下的<strong>坐标</strong>。</li>\n<li>若V中n个线性无关的向量 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 可表示出V中任意向量，那V是n维的，而 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 是V的一组基。</li>\n</ol>\n<h3 id=\"四、基变换与坐标变换\"><a href=\"#四、基变换与坐标变换\" class=\"headerlink\" title=\"四、基变换与坐标变换\"></a>四、基变换与坐标变换</h3><ol>\n<li>基 $$ {\\epsilon_1}’, {\\epsilon_2}’, …, {\\epsilon_n}’ $$ 是基 $$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$ 的线性组合。记为 $$ ({\\epsilon_1}’, {\\epsilon_2}’, …, {\\epsilon_n}’) = A(\\epsilon_1, \\epsilon_2, …, \\epsilon_n) $$, 称A为由基 $$ \\epsilon_1, \\epsilon_2, …, \\epsilon_n $$ 到基 $$ {\\epsilon_1}’, {\\epsilon_2}’, …, {\\epsilon_n}’ $$ 的<strong>过渡矩阵</strong>。</li>\n<li><strong>向量的坐标变化公式</strong>： $$ \\alpha’ = A\\alpha $$ 或 $$ \\alpha = A^{-1} \\alpha’ $$</li>\n</ol>\n<h3 id=\"五、线性子空间\"><a href=\"#五、线性子空间\" class=\"headerlink\" title=\"五、线性子空间\"></a>五、线性子空间</h3><ol>\n<li>定义：数域P上线性空间V的一个非空子集合W称为V的一个<strong>（线性）子空间</strong>，如果W对于V的两种运算也构成数域P上的线性空间。</li>\n<li>定理：若线性空间V的非空子集合W对于V的两种运算封闭，那么W是一个子空间。</li>\n<li>任何一个子空间的维数不能超过整个线性空间的维数。</li>\n<li><strong>零子空间</strong>（只含有零向量的子空间）与V本身称作线性空间V的<strong>平凡子空间</strong>，其他线性子空间称作<strong>非平凡子空间</strong>。</li>\n<li>齐次线性方程组的全部解向量组成齐次线性方程组的<strong>解空间</strong>，其维数等于 $$ n-r $$ .</li>\n<li>线性空间V中向量组 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 所有的线性组合称作<strong>由 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 生成的子空间</strong>，记为 $$ L(\\alpha_1, \\alpha_2, …, \\alpha_n) $$ .</li>\n<li>两个向量组生成相同子空间 $$ \\Leftrightarrow $$ 这两个向量组等价。</li>\n<li>$$ L(\\alpha_1, \\alpha_2, …, \\alpha_n) $$ 的维数等于向量组 $$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 的秩。</li>\n<li>W为数域P上n维线性空间V的一个m维子空间，$$ \\alpha_1, \\alpha_2, …, \\alpha_m $$ 是W的一组基，那么在V中一定能找到n-m个向量$$ \\alpha_{m+1}, \\alpha_2, …, \\alpha_n $$，使$$ \\alpha_1, \\alpha_2, …, \\alpha_n $$ 是V的一组基（即扩充向量组）。</li>\n</ol>\n<h3 id=\"六、子空间的交与和\"><a href=\"#六、子空间的交与和\" class=\"headerlink\" title=\"六、子空间的交与和\"></a>六、子空间的交与和</h3><ol>\n<li>定义： $$ V_1 + V_2 = {\\alpha_1 + \\alpha_2 \\vert \\alpha_1 \\in V_1, \\alpha_2 \\in V_2} $$</li>\n<li>定理：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，则他们的交 $$ V_1 \\cap V_2 $$ 与和 $$ V_1 + V_2 $$ 也是 $$ V $$ 的子空间。</li>\n<li><strong>定理（维数公式）</strong>：若 $$ V_1, V_2 $$ 是线性空间 $$ V $$ 的两个子空间，那么维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$ + 维 $$ (V_1 \\cap V_2) $$ 。</li>\n<li>推论：若 $$ n $$ 维线性空间V中两个子空间 $$ V_1,V_2 $$  的维数之和大于n，那么 $$ V_1,V_2 $$ 必含有非零的公共向量。</li>\n</ol>\n<h3 id=\"七、子空间的直和\"><a href=\"#七、子空间的直和\" class=\"headerlink\" title=\"七、子空间的直和\"></a>七、子空间的直和</h3><ol>\n<li>子空间的直和是子空间的和的重要特殊情形。</li>\n<li>设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，且和 $$ V_1+V_2 $$ 中每个向量 $$ \\alpha $$ 的分解式 $$ \\alpha = \\alpha_1+\\alpha_2, \\alpha_1 \\in V_1, \\alpha_2 \\in V_2 $$ 是<strong>唯一</strong>的，则这个和称为<strong>直和</strong>，记为 $$ V_1 \\oplus V_2 $$.</li>\n<li>定理：设 $$ V_1,V_2 $$ 是线性空间 $$ V $$ 的子空间，则<strong>以下概念等价</strong>：</li>\n</ol>\n<ul>\n<li>$$ W = V_1+V_2 $$ 是直和 </li>\n<li>等式 $$ \\alpha_1+\\alpha_2=0, \\alpha_i \\in V_i (i=1,2) $$ 只有在 $$ \\alpha_i $$ 全为零向量时才成立 </li>\n<li>$$ V_1 \\cap V_2 = {0} $$ 成立</li>\n<li>维 $$ (V_1) $$ + 维 $$ (V_2) = $$ 维 $$ (V_1+V_2) $$</li>\n</ul>\n<ol start=\"4\">\n<li>定理：设 $$ U $$ 为线性空间 $$ V $$ 的一个子空间，那么一定存在一个子空间 $$ W $$ 使 $$ V = U \\oplus W $$.</li>\n<li>直和的多维推广：(3)中定理在多个子空间情况下的推广。</li>\n</ol>\n<h3 id=\"八、线性空间的同构\"><a href=\"#八、线性空间的同构\" class=\"headerlink\" title=\"八、线性空间的同构\"></a>八、线性空间的同构</h3><ol>\n<li>向量与它的坐标间的对应关系，实质上是$$ V $$到 $$ P^n $$的一个双射。</li>\n<li>定义：若线性空间$$V$$到$$V’$$有一个双射$$\\sigma$$,且满足以下性质：</li>\n</ol>\n<ul>\n<li>\\( \\sigma(\\alpha + \\beta) = \\sigma(\\alpha)+\\sigma(\\beta) \\)</li>\n<li>\\( \\sigma(k\\alpha) = k\\sigma(\\alpha) \\)<br>其中 $$\\alpha,\\beta$$是$$V$$中任意向量，$$ k $$是 $$ P $$中任意数，则称$$V$$与$$V’$$<strong>同构</strong>，而$$\\sigma$$称作<strong>同构映射</strong>。</li>\n</ul>\n<ol start=\"3\">\n<li>$$ P $$ 上任意一个 $$ n $$ 维线性空间都与 $$ P^n $$ 同构。</li>\n<li>$$ V $$中向量组$$ \\alpha_1, \\alpha_2, …, \\alpha_n $$线性相关 $$ \\Leftrightarrow $$ 他们的像 $$ \\sigma(\\alpha_1), \\sigma(\\alpha_2), …, \\sigma(\\alpha_n) $$ 线性相关。</li>\n<li>$$ V $$ 在同构映射 $$\\sigma$$ 下的像集合 $$V’$$ 维数与 $$V$$ 相同。</li>\n<li>同构映射的逆映射与两个同构映射的复合还是同构映射。</li>\n<li><strong>数域$$P$$上两个有限维线性空间同构的充要条件为他们有相同的维数</strong>。</li>\n</ol>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ol>\n<li>王萼芳,石生明. 高等代数(第四版). 高等教育出版社, 2013.</li>\n</ol>"},{"title":"Basic Notes on Scrapy","date":"2019-03-08T16:00:00.000Z","_content":"\n## About Scrapy\n\nScrapy is an application framework for crawling web sites and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival.\n\n## Our first Spider\n\nSpiders are classes that you define and that Scrapy uses to scrape information from a website (or a group of websites). They must subclass `scrapy.Spider` and define the initial requests to make, optionally how to follow links in the pages, and how to parse the downloaded page content to extract data.\n\nHere is the code for our first Spider.\n\n<!-- more --> \n\n```python\nimport scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = \"quotes\"\n\n    def start_requests(self):\n        urls = [\n            'http://quotes.toscrape.com/page/1/',\n            'http://quotes.toscrape.com/page/2/',\n        ]\n        for url in urls:\n            yield scrapy.Request(url=url, callback=self.parse)\n\n    def parse(self, response):\n        page = response.url.split(\"/\")[-2]\n        filename = 'quotes-%s.html' % page\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n        self.log('Saved file %s' % filename)\n```\n\nHere are some details about the methods and attributes defined in our first spider.\n\n- `name`: identifies the Spider. It must be unique within a project, that is, you can’t set the same name for different Spiders.\n\n- `start_requests()`: must return an iterable of Requests (you can return a list of requests or write a generator function) which the Spider will begin to crawl from. Subsequent requests will be generated successively from these initial requests.\n\n- `parse()`: a method that will be called to handle the response downloaded for each of the requests made. The response parameter is an instance of `TextResponse` that holds the page content and has further helpful methods to handle it.\n\n  The `parse()`method usually parses the response, extracting the scraped data as dicts and also finding new URLs to follow and creating new requests from them.\n\n## How to run our spider\n\nUse the following command to run our first spider.\n\n```python\nscrapy crawl quotes\n```\n\n## To be continued","source":"_posts/python-06.md","raw":"---\ntitle: Basic Notes on Scrapy\ndate: 2019-03-09\ntags: [python]\n---\n\n## About Scrapy\n\nScrapy is an application framework for crawling web sites and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival.\n\n## Our first Spider\n\nSpiders are classes that you define and that Scrapy uses to scrape information from a website (or a group of websites). They must subclass `scrapy.Spider` and define the initial requests to make, optionally how to follow links in the pages, and how to parse the downloaded page content to extract data.\n\nHere is the code for our first Spider.\n\n<!-- more --> \n\n```python\nimport scrapy\n\nclass QuotesSpider(scrapy.Spider):\n    name = \"quotes\"\n\n    def start_requests(self):\n        urls = [\n            'http://quotes.toscrape.com/page/1/',\n            'http://quotes.toscrape.com/page/2/',\n        ]\n        for url in urls:\n            yield scrapy.Request(url=url, callback=self.parse)\n\n    def parse(self, response):\n        page = response.url.split(\"/\")[-2]\n        filename = 'quotes-%s.html' % page\n        with open(filename, 'wb') as f:\n            f.write(response.body)\n        self.log('Saved file %s' % filename)\n```\n\nHere are some details about the methods and attributes defined in our first spider.\n\n- `name`: identifies the Spider. It must be unique within a project, that is, you can’t set the same name for different Spiders.\n\n- `start_requests()`: must return an iterable of Requests (you can return a list of requests or write a generator function) which the Spider will begin to crawl from. Subsequent requests will be generated successively from these initial requests.\n\n- `parse()`: a method that will be called to handle the response downloaded for each of the requests made. The response parameter is an instance of `TextResponse` that holds the page content and has further helpful methods to handle it.\n\n  The `parse()`method usually parses the response, extracting the scraped data as dicts and also finding new URLs to follow and creating new requests from them.\n\n## How to run our spider\n\nUse the following command to run our first spider.\n\n```python\nscrapy crawl quotes\n```\n\n## To be continued","slug":"python-06","published":1,"updated":"2019-04-30T16:41:13.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjw000c30uvwsf9bflk","content":"<h2 id=\"About-Scrapy\"><a href=\"#About-Scrapy\" class=\"headerlink\" title=\"About Scrapy\"></a>About Scrapy</h2><p>Scrapy is an application framework for crawling web sites and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival.</p>\n<h2 id=\"Our-first-Spider\"><a href=\"#Our-first-Spider\" class=\"headerlink\" title=\"Our first Spider\"></a>Our first Spider</h2><p>Spiders are classes that you define and that Scrapy uses to scrape information from a website (or a group of websites). They must subclass <code>scrapy.Spider</code> and define the initial requests to make, optionally how to follow links in the pages, and how to parse the downloaded page content to extract data.</p>\n<p>Here is the code for our first Spider.</p>\n<a id=\"more\"></a> \n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuotesSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"quotes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        urls = [</span><br><span class=\"line\">            <span class=\"string\">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class=\"line\">            <span class=\"string\">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> urls:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        page = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>]</span><br><span class=\"line\">        filename = <span class=\"string\">'quotes-%s.html'</span> % page</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(response.body)</span><br><span class=\"line\">        self.log(<span class=\"string\">'Saved file %s'</span> % filename)</span><br></pre></td></tr></table></figure>\n<p>Here are some details about the methods and attributes defined in our first spider.</p>\n<ul>\n<li><p><code>name</code>: identifies the Spider. It must be unique within a project, that is, you can’t set the same name for different Spiders.</p>\n</li>\n<li><p><code>start_requests()</code>: must return an iterable of Requests (you can return a list of requests or write a generator function) which the Spider will begin to crawl from. Subsequent requests will be generated successively from these initial requests.</p>\n</li>\n<li><p><code>parse()</code>: a method that will be called to handle the response downloaded for each of the requests made. The response parameter is an instance of <code>TextResponse</code> that holds the page content and has further helpful methods to handle it.</p>\n<p>The <code>parse()</code>method usually parses the response, extracting the scraped data as dicts and also finding new URLs to follow and creating new requests from them.</p>\n</li>\n</ul>\n<h2 id=\"How-to-run-our-spider\"><a href=\"#How-to-run-our-spider\" class=\"headerlink\" title=\"How to run our spider\"></a>How to run our spider</h2><p>Use the following command to run our first spider.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy crawl quotes</span><br></pre></td></tr></table></figure>\n<h2 id=\"To-be-continued\"><a href=\"#To-be-continued\" class=\"headerlink\" title=\"To be continued\"></a>To be continued</h2>","site":{"data":{}},"excerpt":"<h2 id=\"About-Scrapy\"><a href=\"#About-Scrapy\" class=\"headerlink\" title=\"About Scrapy\"></a>About Scrapy</h2><p>Scrapy is an application framework for crawling web sites and extracting structured data which can be used for a wide range of useful applications, like data mining, information processing or historical archival.</p>\n<h2 id=\"Our-first-Spider\"><a href=\"#Our-first-Spider\" class=\"headerlink\" title=\"Our first Spider\"></a>Our first Spider</h2><p>Spiders are classes that you define and that Scrapy uses to scrape information from a website (or a group of websites). They must subclass <code>scrapy.Spider</code> and define the initial requests to make, optionally how to follow links in the pages, and how to parse the downloaded page content to extract data.</p>\n<p>Here is the code for our first Spider.</p>","more":"<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> scrapy</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">QuotesSpider</span><span class=\"params\">(scrapy.Spider)</span>:</span></span><br><span class=\"line\">    name = <span class=\"string\">\"quotes\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">start_requests</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        urls = [</span><br><span class=\"line\">            <span class=\"string\">'http://quotes.toscrape.com/page/1/'</span>,</span><br><span class=\"line\">            <span class=\"string\">'http://quotes.toscrape.com/page/2/'</span>,</span><br><span class=\"line\">        ]</span><br><span class=\"line\">        <span class=\"keyword\">for</span> url <span class=\"keyword\">in</span> urls:</span><br><span class=\"line\">            <span class=\"keyword\">yield</span> scrapy.Request(url=url, callback=self.parse)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">parse</span><span class=\"params\">(self, response)</span>:</span></span><br><span class=\"line\">        page = response.url.split(<span class=\"string\">\"/\"</span>)[<span class=\"number\">-2</span>]</span><br><span class=\"line\">        filename = <span class=\"string\">'quotes-%s.html'</span> % page</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(filename, <span class=\"string\">'wb'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(response.body)</span><br><span class=\"line\">        self.log(<span class=\"string\">'Saved file %s'</span> % filename)</span><br></pre></td></tr></table></figure>\n<p>Here are some details about the methods and attributes defined in our first spider.</p>\n<ul>\n<li><p><code>name</code>: identifies the Spider. It must be unique within a project, that is, you can’t set the same name for different Spiders.</p>\n</li>\n<li><p><code>start_requests()</code>: must return an iterable of Requests (you can return a list of requests or write a generator function) which the Spider will begin to crawl from. Subsequent requests will be generated successively from these initial requests.</p>\n</li>\n<li><p><code>parse()</code>: a method that will be called to handle the response downloaded for each of the requests made. The response parameter is an instance of <code>TextResponse</code> that holds the page content and has further helpful methods to handle it.</p>\n<p>The <code>parse()</code>method usually parses the response, extracting the scraped data as dicts and also finding new URLs to follow and creating new requests from them.</p>\n</li>\n</ul>\n<h2 id=\"How-to-run-our-spider\"><a href=\"#How-to-run-our-spider\" class=\"headerlink\" title=\"How to run our spider\"></a>How to run our spider</h2><p>Use the following command to run our first spider.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scrapy crawl quotes</span><br></pre></td></tr></table></figure>\n<h2 id=\"To-be-continued\"><a href=\"#To-be-continued\" class=\"headerlink\" title=\"To be continued\"></a>To be continued</h2>"},{"title":"Tricks for Python","date":"2019-03-11T16:00:00.000Z","_content":"\nHere are some tricks useful (to Python beginners like me) when writing Python code.\n\n## Details about some built-in functions\n\n1. **abs(x)**\n\n   When the argument `x` is a complex number, this function will return the magnitude of `x`. \n\n   Here is an example: \n\n   - For `x=1+2j` , `abs(x)` will get $$ \\sqrt{2} $$\n\n2. **all(A); any(A)**\n\n   Return `True` if all/any element of the *iterable* A is true.\n\n3. **format()**\n\n   It can be used this way to replace `bin()`\n\n   ```python\n   >>> format(14, 'b')\n   1110\n   ```\n   A typical use of `format` goes like this:\n\n   ```python\n   >>> x = 10\n   >>> y = -5.0\n   >>> \"x={:d},y={:.2f}\".format(x,y))\n   x=10,y=-5.00\n   ```\n\n<!-- more --> \n\n4. **enumerate(*iterable*, *start=0*)**\n\n   It can be easily used to get the index of an item in a For-expression to replace `zip()`. \n\n   Here is an example:\n\n   ```python\n   >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n   >>> list(enumerate(seasons))\n   [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n   >>> list(enumerate(seasons, start=1))\n   [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n   \n   >>>for index, item in list(enumerate(seasons)):\n   ...\t#Do something\n   ```\n\n5. **filter(*function*, *iterable*)**\n\n   Construct an iterator from those elements of *iterable* for which *function* returns true.\n\n   If *function* is `None`, the identity function is assumed, that is, all elements of *iterable* that are false are removed.\n\n   It is equivalent to the generator expression `(item for item initerable if function(item))` if function is not `None` and `(item for item in iterable if item)` if function is `None`.\n\n6. **hash(*object*)**\n\n   Return the hash value of the object (if it has one). They are used to quickly compare dictionary keys during a dictionary lookup.\n\n   Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).\n\n7. **map(*function*, *iterable*, *...*)**\n\n   Return an iterator that applies *function* to every item of *iterable*, yielding the results.\n\n   This is similar to *List Comprehensions*, when a single iterable is given.\n\n8. **max(*iterable*, *[, *key*, *default*])**\n\n   The argument `key=keyfunc` can be especially useful when used to find the *biggest* element according to a given function.\n\n## To be continued","source":"_posts/python-07.md","raw":"---\ntitle: Tricks for Python\ndate: 2019-03-12\ntags: [python]\n---\n\nHere are some tricks useful (to Python beginners like me) when writing Python code.\n\n## Details about some built-in functions\n\n1. **abs(x)**\n\n   When the argument `x` is a complex number, this function will return the magnitude of `x`. \n\n   Here is an example: \n\n   - For `x=1+2j` , `abs(x)` will get $$ \\sqrt{2} $$\n\n2. **all(A); any(A)**\n\n   Return `True` if all/any element of the *iterable* A is true.\n\n3. **format()**\n\n   It can be used this way to replace `bin()`\n\n   ```python\n   >>> format(14, 'b')\n   1110\n   ```\n   A typical use of `format` goes like this:\n\n   ```python\n   >>> x = 10\n   >>> y = -5.0\n   >>> \"x={:d},y={:.2f}\".format(x,y))\n   x=10,y=-5.00\n   ```\n\n<!-- more --> \n\n4. **enumerate(*iterable*, *start=0*)**\n\n   It can be easily used to get the index of an item in a For-expression to replace `zip()`. \n\n   Here is an example:\n\n   ```python\n   >>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']\n   >>> list(enumerate(seasons))\n   [(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]\n   >>> list(enumerate(seasons, start=1))\n   [(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]\n   \n   >>>for index, item in list(enumerate(seasons)):\n   ...\t#Do something\n   ```\n\n5. **filter(*function*, *iterable*)**\n\n   Construct an iterator from those elements of *iterable* for which *function* returns true.\n\n   If *function* is `None`, the identity function is assumed, that is, all elements of *iterable* that are false are removed.\n\n   It is equivalent to the generator expression `(item for item initerable if function(item))` if function is not `None` and `(item for item in iterable if item)` if function is `None`.\n\n6. **hash(*object*)**\n\n   Return the hash value of the object (if it has one). They are used to quickly compare dictionary keys during a dictionary lookup.\n\n   Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).\n\n7. **map(*function*, *iterable*, *...*)**\n\n   Return an iterator that applies *function* to every item of *iterable*, yielding the results.\n\n   This is similar to *List Comprehensions*, when a single iterable is given.\n\n8. **max(*iterable*, *[, *key*, *default*])**\n\n   The argument `key=keyfunc` can be especially useful when used to find the *biggest* element according to a given function.\n\n## To be continued","slug":"python-07","published":1,"updated":"2019-04-30T16:40:57.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbjy000d30uvwbz7g07j","content":"<p>Here are some tricks useful (to Python beginners like me) when writing Python code.</p>\n<h2 id=\"Details-about-some-built-in-functions\"><a href=\"#Details-about-some-built-in-functions\" class=\"headerlink\" title=\"Details about some built-in functions\"></a>Details about some built-in functions</h2><ol>\n<li><p><strong>abs(x)</strong></p>\n<p>When the argument <code>x</code> is a complex number, this function will return the magnitude of <code>x</code>. </p>\n<p>Here is an example: </p>\n<ul>\n<li>For <code>x=1+2j</code> , <code>abs(x)</code> will get $$ \\sqrt{2} $$</li>\n</ul>\n</li>\n<li><p><strong>all(A); any(A)</strong></p>\n<p>Return <code>True</code> if all/any element of the <em>iterable</em> A is true.</p>\n</li>\n<li><p><strong>format()</strong></p>\n<p>It can be used this way to replace <code>bin()</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(<span class=\"number\">14</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\"><span class=\"number\">1110</span></span><br></pre></td></tr></table></figure>\n<p>A typical use of <code>format</code> goes like this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">-5.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"x=&#123;:d&#125;,y=&#123;:.2f&#125;\"</span>.format(x,y))</span><br><span class=\"line\">x=<span class=\"number\">10</span>,y=<span class=\"number\">-5.00</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<a id=\"more\"></a> \n<ol start=\"4\">\n<li><p><strong>enumerate(<em>iterable</em>, <em>start=0</em>)</strong></p>\n<p>It can be easily used to get the index of an item in a For-expression to replace <code>zip()</code>. </p>\n<p>Here is an example:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seasons = [<span class=\"string\">'Spring'</span>, <span class=\"string\">'Summer'</span>, <span class=\"string\">'Fall'</span>, <span class=\"string\">'Winter'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons))</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Winter'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class=\"number\">1</span>))</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">4</span>, <span class=\"string\">'Winter'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> index, item <span class=\"keyword\">in</span> list(enumerate(seasons)):</span><br><span class=\"line\">...\t<span class=\"comment\">#Do something</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>filter(<em>function</em>, <em>iterable</em>)</strong></p>\n<p>Construct an iterator from those elements of <em>iterable</em> for which <em>function</em> returns true.</p>\n<p>If <em>function</em> is <code>None</code>, the identity function is assumed, that is, all elements of <em>iterable</em> that are false are removed.</p>\n<p>It is equivalent to the generator expression <code>(item for item initerable if function(item))</code> if function is not <code>None</code> and <code>(item for item in iterable if item)</code> if function is <code>None</code>.</p>\n</li>\n<li><p><strong>hash(<em>object</em>)</strong></p>\n<p>Return the hash value of the object (if it has one). They are used to quickly compare dictionary keys during a dictionary lookup.</p>\n<p>Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).</p>\n</li>\n<li><p><strong>map(<em>function</em>, <em>iterable</em>, <em>…</em>)</strong></p>\n<p>Return an iterator that applies <em>function</em> to every item of <em>iterable</em>, yielding the results.</p>\n<p>This is similar to <em>List Comprehensions</em>, when a single iterable is given.</p>\n</li>\n<li><p><strong>max(<em>iterable</em>, <em>[, </em>key<em>, </em>default*])</strong></p>\n<p>The argument <code>key=keyfunc</code> can be especially useful when used to find the <em>biggest</em> element according to a given function.</p>\n</li>\n</ol>\n<h2 id=\"To-be-continued\"><a href=\"#To-be-continued\" class=\"headerlink\" title=\"To be continued\"></a>To be continued</h2>","site":{"data":{}},"excerpt":"<p>Here are some tricks useful (to Python beginners like me) when writing Python code.</p>\n<h2 id=\"Details-about-some-built-in-functions\"><a href=\"#Details-about-some-built-in-functions\" class=\"headerlink\" title=\"Details about some built-in functions\"></a>Details about some built-in functions</h2><ol>\n<li><p><strong>abs(x)</strong></p>\n<p>When the argument <code>x</code> is a complex number, this function will return the magnitude of <code>x</code>. </p>\n<p>Here is an example: </p>\n<ul>\n<li>For <code>x=1+2j</code> , <code>abs(x)</code> will get $$ \\sqrt{2} $$</li>\n</ul>\n</li>\n<li><p><strong>all(A); any(A)</strong></p>\n<p>Return <code>True</code> if all/any element of the <em>iterable</em> A is true.</p>\n</li>\n<li><p><strong>format()</strong></p>\n<p>It can be used this way to replace <code>bin()</code></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>format(<span class=\"number\">14</span>, <span class=\"string\">'b'</span>)</span><br><span class=\"line\"><span class=\"number\">1110</span></span><br></pre></td></tr></table></figure>\n<p>A typical use of <code>format</code> goes like this:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = <span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>y = <span class=\"number\">-5.0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"string\">\"x=&#123;:d&#125;,y=&#123;:.2f&#125;\"</span>.format(x,y))</span><br><span class=\"line\">x=<span class=\"number\">10</span>,y=<span class=\"number\">-5.00</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>","more":"<ol start=\"4\">\n<li><p><strong>enumerate(<em>iterable</em>, <em>start=0</em>)</strong></p>\n<p>It can be easily used to get the index of an item in a For-expression to replace <code>zip()</code>. </p>\n<p>Here is an example:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seasons = [<span class=\"string\">'Spring'</span>, <span class=\"string\">'Summer'</span>, <span class=\"string\">'Fall'</span>, <span class=\"string\">'Winter'</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons))</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">1</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Winter'</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>list(enumerate(seasons, start=<span class=\"number\">1</span>))</span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"string\">'Spring'</span>), (<span class=\"number\">2</span>, <span class=\"string\">'Summer'</span>), (<span class=\"number\">3</span>, <span class=\"string\">'Fall'</span>), (<span class=\"number\">4</span>, <span class=\"string\">'Winter'</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"keyword\">for</span> index, item <span class=\"keyword\">in</span> list(enumerate(seasons)):</span><br><span class=\"line\">...\t<span class=\"comment\">#Do something</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>filter(<em>function</em>, <em>iterable</em>)</strong></p>\n<p>Construct an iterator from those elements of <em>iterable</em> for which <em>function</em> returns true.</p>\n<p>If <em>function</em> is <code>None</code>, the identity function is assumed, that is, all elements of <em>iterable</em> that are false are removed.</p>\n<p>It is equivalent to the generator expression <code>(item for item initerable if function(item))</code> if function is not <code>None</code> and <code>(item for item in iterable if item)</code> if function is <code>None</code>.</p>\n</li>\n<li><p><strong>hash(<em>object</em>)</strong></p>\n<p>Return the hash value of the object (if it has one). They are used to quickly compare dictionary keys during a dictionary lookup.</p>\n<p>Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).</p>\n</li>\n<li><p><strong>map(<em>function</em>, <em>iterable</em>, <em>…</em>)</strong></p>\n<p>Return an iterator that applies <em>function</em> to every item of <em>iterable</em>, yielding the results.</p>\n<p>This is similar to <em>List Comprehensions</em>, when a single iterable is given.</p>\n</li>\n<li><p><strong>max(<em>iterable</em>, <em>[, </em>key<em>, </em>default*])</strong></p>\n<p>The argument <code>key=keyfunc</code> can be especially useful when used to find the <em>biggest</em> element according to a given function.</p>\n</li>\n</ol>\n<h2 id=\"To-be-continued\"><a href=\"#To-be-continued\" class=\"headerlink\" title=\"To be continued\"></a>To be continued</h2>"},{"title":"Notes on \"Python Cookbook\"","date":"2019-03-20T16:00:00.000Z","_content":"\n## Data Structure and Algorism\n\n1. Unpacking assignment can be applied to any iterable object.\n\n2. Use `*temp` to unpack values of an uncertain number.\n    Use `_` to declare a variable that you want to discard.\n\n   ```python\n   def drop_first_last(grades):\n       first, *middle, last = grades\t#*middle is a List\n       return avg(middle)\n   ```\n\n3. Use `heapq.nlargest()` and `heapq.nsmallest()` to get the largest/smallest n-elements in a container.\n\n\t<!-- more --> \n\n4. Use  `collections.defaultdict` to construct a mulidict(Dictionary where a key corresponds to multiple values)\n\n5. Use `collections.OrderedDict` to construct a ordered dictionary.\n\n   (It's a chain table and will cost double memory compared with normal dictionary)\n\n6.  If you need to get the maximum value of a dictionary, use `zip` to reverse key & value. `max()` will compare the first element by default.\n\n    (This is more useful since the return value of `max()` will be a tuple containing key & value)\n\n7. The type of `dict.keys()` is `dict_keys`, which supports operations for Sets like AND/OR by default.\n\n8. `slice()` creates a slice object, which can be used in any circumstances when a slice is needed. This will improve the readability of your code.\n  ```python\n  SHARES = slice(20, 23) \n  PRICE = slice(31, 37) \n  cost = int(record[SHARES]) * float(record[PRICE])\n  ```\n\n9. `collections.Counter` and `collections.Counter.most_common(n)` are significantly useful when you want to count something.\n\n## String and Text\n\n1. Use `re.split()` to split a string in complex circumstances.\n\t```python \n    >>> line = 'asdf fjdk; afed, fjek,asdf, foo' \n    >>> import re \n    >>>  re.split(r'[;,\\s]\\s*', line) \n    ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']\n   ```\n\n","source":"_posts/python-08.md","raw":"---\ntitle: Notes on \"Python Cookbook\"\ndate: 2019-03-21\ntags: [python]\n---\n\n## Data Structure and Algorism\n\n1. Unpacking assignment can be applied to any iterable object.\n\n2. Use `*temp` to unpack values of an uncertain number.\n    Use `_` to declare a variable that you want to discard.\n\n   ```python\n   def drop_first_last(grades):\n       first, *middle, last = grades\t#*middle is a List\n       return avg(middle)\n   ```\n\n3. Use `heapq.nlargest()` and `heapq.nsmallest()` to get the largest/smallest n-elements in a container.\n\n\t<!-- more --> \n\n4. Use  `collections.defaultdict` to construct a mulidict(Dictionary where a key corresponds to multiple values)\n\n5. Use `collections.OrderedDict` to construct a ordered dictionary.\n\n   (It's a chain table and will cost double memory compared with normal dictionary)\n\n6.  If you need to get the maximum value of a dictionary, use `zip` to reverse key & value. `max()` will compare the first element by default.\n\n    (This is more useful since the return value of `max()` will be a tuple containing key & value)\n\n7. The type of `dict.keys()` is `dict_keys`, which supports operations for Sets like AND/OR by default.\n\n8. `slice()` creates a slice object, which can be used in any circumstances when a slice is needed. This will improve the readability of your code.\n  ```python\n  SHARES = slice(20, 23) \n  PRICE = slice(31, 37) \n  cost = int(record[SHARES]) * float(record[PRICE])\n  ```\n\n9. `collections.Counter` and `collections.Counter.most_common(n)` are significantly useful when you want to count something.\n\n## String and Text\n\n1. Use `re.split()` to split a string in complex circumstances.\n\t```python \n    >>> line = 'asdf fjdk; afed, fjek,asdf, foo' \n    >>> import re \n    >>>  re.split(r'[;,\\s]\\s*', line) \n    ['asdf', 'fjdk', 'afed', 'fjek', 'asdf', 'foo']\n   ```\n\n","slug":"python-08","published":1,"updated":"2019-04-30T16:40:44.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbkr000r30uv3gj5kouc","content":"<h2 id=\"Data-Structure-and-Algorism\"><a href=\"#Data-Structure-and-Algorism\" class=\"headerlink\" title=\"Data Structure and Algorism\"></a>Data Structure and Algorism</h2><ol>\n<li><p>Unpacking assignment can be applied to any iterable object.</p>\n</li>\n<li><p>Use <code>*temp</code> to unpack values of an uncertain number.<br> Use <code>_</code> to declare a variable that you want to discard.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop_first_last</span><span class=\"params\">(grades)</span>:</span></span><br><span class=\"line\">    first, *middle, last = grades\t<span class=\"comment\">#*middle is a List</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> avg(middle)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use <code>heapq.nlargest()</code> and <code>heapq.nsmallest()</code> to get the largest/smallest n-elements in a container.</p>\n <a id=\"more\"></a> \n</li>\n<li><p>Use  <code>collections.defaultdict</code> to construct a mulidict(Dictionary where a key corresponds to multiple values)</p>\n</li>\n<li><p>Use <code>collections.OrderedDict</code> to construct a ordered dictionary.</p>\n<p>(It’s a chain table and will cost double memory compared with normal dictionary)</p>\n</li>\n<li><p>If you need to get the maximum value of a dictionary, use <code>zip</code> to reverse key &amp; value. <code>max()</code> will compare the first element by default.</p>\n<p>(This is more useful since the return value of <code>max()</code> will be a tuple containing key &amp; value)</p>\n</li>\n<li><p>The type of <code>dict.keys()</code> is <code>dict_keys</code>, which supports operations for Sets like AND/OR by default.</p>\n</li>\n<li><p><code>slice()</code> creates a slice object, which can be used in any circumstances when a slice is needed. This will improve the readability of your code.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHARES = slice(<span class=\"number\">20</span>, <span class=\"number\">23</span>) </span><br><span class=\"line\">PRICE = slice(<span class=\"number\">31</span>, <span class=\"number\">37</span>) </span><br><span class=\"line\">cost = int(record[SHARES]) * float(record[PRICE])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>collections.Counter</code> and <code>collections.Counter.most_common(n)</code> are significantly useful when you want to count something.</p>\n</li>\n</ol>\n<h2 id=\"String-and-Text\"><a href=\"#String-and-Text\" class=\"headerlink\" title=\"String and Text\"></a>String and Text</h2><ol>\n<li>Use <code>re.split()</code> to split a string in complex circumstances. <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>line = <span class=\"string\">'asdf fjdk; afed, fjek,asdf, foo'</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span> re.split(<span class=\"string\">r'[;,\\s]\\s*'</span>, line) </span><br><span class=\"line\">[<span class=\"string\">'asdf'</span>, <span class=\"string\">'fjdk'</span>, <span class=\"string\">'afed'</span>, <span class=\"string\">'fjek'</span>, <span class=\"string\">'asdf'</span>, <span class=\"string\">'foo'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"Data-Structure-and-Algorism\"><a href=\"#Data-Structure-and-Algorism\" class=\"headerlink\" title=\"Data Structure and Algorism\"></a>Data Structure and Algorism</h2><ol>\n<li><p>Unpacking assignment can be applied to any iterable object.</p>\n</li>\n<li><p>Use <code>*temp</code> to unpack values of an uncertain number.<br> Use <code>_</code> to declare a variable that you want to discard.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">drop_first_last</span><span class=\"params\">(grades)</span>:</span></span><br><span class=\"line\">    first, *middle, last = grades\t<span class=\"comment\">#*middle is a List</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> avg(middle)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Use <code>heapq.nlargest()</code> and <code>heapq.nsmallest()</code> to get the largest/smallest n-elements in a container.</p></li></ol>","more":"\n<li><p>Use  <code>collections.defaultdict</code> to construct a mulidict(Dictionary where a key corresponds to multiple values)</p>\n</li>\n<li><p>Use <code>collections.OrderedDict</code> to construct a ordered dictionary.</p>\n<p>(It’s a chain table and will cost double memory compared with normal dictionary)</p>\n</li>\n<li><p>If you need to get the maximum value of a dictionary, use <code>zip</code> to reverse key &amp; value. <code>max()</code> will compare the first element by default.</p>\n<p>(This is more useful since the return value of <code>max()</code> will be a tuple containing key &amp; value)</p>\n</li>\n<li><p>The type of <code>dict.keys()</code> is <code>dict_keys</code>, which supports operations for Sets like AND/OR by default.</p>\n</li>\n<li><p><code>slice()</code> creates a slice object, which can be used in any circumstances when a slice is needed. This will improve the readability of your code.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHARES = slice(<span class=\"number\">20</span>, <span class=\"number\">23</span>) </span><br><span class=\"line\">PRICE = slice(<span class=\"number\">31</span>, <span class=\"number\">37</span>) </span><br><span class=\"line\">cost = int(record[SHARES]) * float(record[PRICE])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>collections.Counter</code> and <code>collections.Counter.most_common(n)</code> are significantly useful when you want to count something.</p>\n</li>\n\n<h2 id=\"String-and-Text\"><a href=\"#String-and-Text\" class=\"headerlink\" title=\"String and Text\"></a>String and Text</h2><ol>\n<li>Use <code>re.split()</code> to split a string in complex circumstances. <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>line = <span class=\"string\">'asdf fjdk; afed, fjek,asdf, foo'</span> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> re </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span> re.split(<span class=\"string\">r'[;,\\s]\\s*'</span>, line) </span><br><span class=\"line\">[<span class=\"string\">'asdf'</span>, <span class=\"string\">'fjdk'</span>, <span class=\"string\">'afed'</span>, <span class=\"string\">'fjek'</span>, <span class=\"string\">'asdf'</span>, <span class=\"string\">'foo'</span>]</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"title":"基于Python的多进程QQ空间爬虫","date":"2019-05-01T03:51:55.000Z","_content":"\n## 前言\n\n### 功能简介\n本教程利用Python实现了一个简单的QQ空间说说抓取脚本。该脚本以每秒150~200条的速度抓取好友的历史说说，并将其格式化后存储至本地。\n\n![04](QQ-Zone-Spider\\04.png)\n![04](QQ-Zone-Spider\\05.png)\n\n<!-- more -->\n\n### 环境需求\n\n1. Python 3.72\n2. Python模块：[Selenium](<https://selenium-python.readthedocs.io/#>) 与 [Requests](<http://cn.python-requests.org/zh_CN/latest/>)\n3. Google Chrome 74.0 与 ChromeDriver 74.0\n\n> 注：具体版本号可酌情选择\n\n## 你将在这里看到\n\n1. 如何用Python实现对QQ空间说说数据的获取\n2. 如何利用Chrome**开发者工具**分析动态网页\n3. 如何利用Selenium完成对数据的请求与获取\n4. 如何在Requests与Selenium间传递参数(如**Cookies**)\n5. 如何完成一个简单的**多进程爬虫**\n\n## 你将不会在这里看到\n\n1. **如何安装**Python、Python模块与ChromeDriver等开发环境\n2. **过于基础**的Python代码写法\n3. Requests，Selenium，re，json等模块的**详细介绍**\n4. 用Selenium实现**自动登陆**（然而以后可能会做）\n5. 关于Python与第三方模块的**进阶用法**\n\n## 关于思路的简单介绍\n\n首先，观察QQ空间说说页面，可以发现说说页面为**动态网页**，无法用下载网页并解析的方式获取说说数据。通过对翻页时发送/接收数据的分析，我们可以找出存放说说**内容**的具体**文件**与其**请求方式**。\n\n其次，我们利用**Selenium**进行初步的模拟获取，成功地自动获取了说说内容页面，并对内容进行解析与格式化存储，速度为每秒20~40条。\n\n接着，为了提高获取的效率，我们利用**Requests**与**Multiprocessing**，用**多进程模式**重构了脚本，使获取的速度提高为每秒150~200条。\n\n最后，我们对脚本的**功能**进行完善，添加预计剩余时间，大文件分割等功能。\n\n## 网页内容分析\n\n> 注：考虑到原项目的开发背景为对南京大学表白墙的数据分析，本文以“南京大学表白墙”为样例对象。\n\n### 找到资源文件\n\n进入[目标的QQ空间说说页面](<https://user.qzone.qq.com/2074934525/311>)，**查看网页源代码**，我们可以发现说说内容并未保存在网页源文件中。因此，我们的获取目标为动态页面的数据内容。\n\n> 在动态页面中，数据内容一般在客户端与网页交互（如进入网页，点击翻页按钮）时发送到客户端，并通过JS脚本等途径动态插入到网页的<div\\>标签中，从而完成对页面内容的更新。\n\n我们打开Chrome浏览器的**开发者工具**，切换到**Network**标签页。此时我们可以获得交互过程中加载的所有资源。为了减少干扰，我们点击Network标签页下的**Clear**按钮，并在说说页面中切换到下一页。\n\n![02](QQ-Zone-Spider\\02.png)\n\n右侧列表中列出了翻页过程中加载的资源。在排除了无关的图片文件后，我们可以发现说说内容保存在名称为`emotion_cgi_msglist_v6`的文件中。该文件即为我们要获得的说说数据。\n\n![03](QQ-Zone-Spider\\03.png)\n\n### 找到请求模式\n\n返回Network标签页，观察该文件的**请求头**与**请求参数**，可以看出：请求头中主要有**Cookies**和**User-Agent**两部分，而请求参数中出现了显眼的**pos**参数。通过翻页测试，我们发现pos参数符合以下规律：\n\n> 第一页：pos = 0\n> 第二页：pos = 20\n> 第三页：pos = 40\n\n因此，我们可以得出以下结论\n\n> pos = 20 * 页码数 - 20\n\n因此，我们接下来就将使用**Selenium**进行模拟登陆，并按照上述规律对文件进行获取。\n\n## 基于Selenium的数据获取\n\n为了便于调试，我们先利用Selenium登陆QQ空间，并且对文件进行请求。然后，我们将请求的数据进行格式化存储。\n\n### 登陆\n\n我们首先创建Selenium的webdriver实例，并用它打开QQ空间登陆界面，进入目标空间。\n\n```python\nimport time\nfrom selenium import webdriver\n\nqq_id = 2074934525 # Change it if necessary.\nlogin_url = 'https://user.qzone.qq.com'\ntarget_url = 'https://user.qzone.qq.com/{}/311'.format(qq_id)\n\ndef ini_driver():\n    driver = webdriver.Chrome()\n    return driver\n\nif __name__ == '__main__':\n    driver = ini_driver()\n    driver.get(login_url)\n    time.sleep(5)\n    driver.get(target_url)\n```\n\n### 请求资源\n\n为了获取加载资源列表，我们需要调整Selenium的**DesiredCapabilities**特性，从而获得目标文件的请求细节。\n\n```python\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n\ndef ini_driver():\n    caps = DesiredCapabilities.CHROME\n    caps['loggingPrefs'] = {'performance': 'ALL'}\n    driver = webdriver.Chrome(desired_capabilities=caps)\n    return driver\n\nlog = str(driver.get_log('performance'))\n```\n\n通过分析请求，我们构造出请求的**匹配模式**，将完整的**请求体**匹配出来，并将完整请求拆分为 *prefix + page_pos + suffix* 的模式。\n\n```python\nimport re\n\nfile_prefix = r\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6\"\n\ndef get_format(data:str):\n    pos = data.find('pos=')\n    prefix = file_prefix + data[:pos+4]\n    suffix = data[pos+5:]\n    return (prefix,suffix)\n\npattern = re.compile(r'\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6(.*?)\"')\n\ndata = re.findall(pattern,log)[0]\nprefix,suffix = get_format(data)\n```\n\n此时，我们即可使用如下方式获得某一页的说说内容。\n\n```python\npage_pos = str(0)\ncontent_url = prefix + page_pos + suffix\ncontent = driver.get(content_url)\n```\n\n### 格式化与存储\n\n上一步提取出的**content**为原始的目标文件。我们需要将其格式化为符合**json**规则的代码，并将其存储在文件中。\n\n我们先利用字符串切片，除去开头结尾的无关字符。剩余内容为符合json规则的字符串，可以使用`json.loads`将其转化为json类型。此外，所有的说说内容都存放在`msglist`字段中。我们将其提取出来。\n\n```python\nimport json\n\ndef get_msg_list(content:str):\n    return json.loads(content[17:-2])['msglist']\n```\n\n接着，由于`msglist`字段中存在着大量的无关数据。我们用`msglist`字段中信息的有效部分构造`new_msg`，将它存放在字典中。\n\n> 因为每条说说的发送时间唯一，我们以说说的timestamp(时间戳)属性作为字典索引。\n\n```python\nmsglist = dict()\n\ndef process_raw_msglist(raw_msglist:dict):\n    if raw_msglist is not None:\n        for msg in raw_msglist:\n            new_msg = dict()\n            new_msg['content'] = msg['content']\n            new_msg['commentlist'] = list()\n            if msg['commentlist'] is not None:\n                for comment in msg['commentlist']:\n                    new_msg['commentlist'].append(\n                        {\n                                'content' : comment['content'],\n                                'time' : comment['create_time'],\n                                'name' : comment['name']\n                        }\n                    )\n            msglist[msg['created_time']] = new_msg\n    return None\n\n```\n\n此时，`msglist`即为我们需要的说说内容数据。我们将其保存在本地文件中。\n\n> 为了能够正常保存中文数据，我们应当用UTF-8编码写入文件，并且在`json.dumps`方法中增加`ensure_ascii=False`参数。\n\n ```python\nwith open(\"{}.json\".format(qq_id),'w+',encoding='utf-8') as f:\n    f.write(json.dumps(msglist,indent=4,ensure_ascii=False))\n ```\n\n通过遍历`page_pos`，我们即可完成对数据的自动获取工作。\n\n## 用Requests实现多进程获取\n\n由于Selenium的特性，我们一次只能获取一页数据。这种单进程模式对数据获取速度产生了较大的限制。此外，基于可视页面的ChromeDriver对系统资源的占用也较多。虽然可以通过**headless**启动或换用**PhantomJS**进行优化，但我们决定采用**Requests+Multiprocessing**的方法实现对数据的多进程获取。\n\n### 构造Header\n\n在分析网页内容时，我们观察了请求`emotion_cgi_msglist_v6`时的Header格式。我们首先构造出header的**User-Agent**部分。\n\n```python\nUser_Agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.108 Safari/537.36'\n\nheaders = {\n    'User-Agent' : User_Agent\n    }\n```\n\n接着，我们对**Cookies**进行传递。我们利用`driver.get_cookies()`方法获得driver携带的所有cookie，并将其处理后保存为`qzone_cookies`字典。\n\n```python\nqzone_cookies = dict()\nfor item in driver.get_cookies():\n    qzone_cookies[item[\"name\"]] = item[\"value\"]\n```\n> 在Cookies保存完后，可用`driver.quit()`退出webdriver，减少资源占用。\n\n### 构造请求方法\n\n为了便于用Multiprocessing进行多进程处理，我们先创建一个`Requests.session`，然后重写`get_msg_list`方法，将上一步中构造的Header与Cookies作为参数传递进去。\n\n```python\nimport requests\n\nsession = requests.session()\n\ndef get_msg_list(url:str,headers,qzone_cookies):\n    return json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[17:-2])['msglist']\n```\n\n### 配置进程池\n\n接下来，我们创建Multiprocessing的**进程池(Pool)**。\n\n```pyth\nprocess_number = 8\npos_pool = multiprocessing.Pool(processes=process_number)\n```\n\n为了便于自动分配进程，我们构造`url_list`为获取地址的列表。\n\n```python\ndef construct_url_list(prefix:str,suffix:str,times:int):\n    url_list = list()\n    for i in range(0,times):\n        url_list.append(prefix+str(i*20)+suffix)\n    return url_list\n\npage_number = 10 # Change it if necessary.\nurl_list = construct_url_list(prefix,suffix,page_number)\n```\n在前两项准备工作结束后，我们就可以对进程池进行任务指派了。\n\n```pythn\nfor url in url_list:\n    pos_pool.apply_async(get_msg_list,args=(url,headers,qzone_cookies),callback=process_raw_msglist)\nprint(\"Start\")\npos_pool.close()\npos_pool.join()\nprint('Done')\n```\n\n进程池会自动协调内部的进程，为每一个进程分配一个任务（此处为获取`url`的文件数据，在格式化后存入`msglist`字典中），并在任务结束后分配新的任务，直到`url_list`被完全遍历。\n\n对于进程数为8的进程池，每秒可以获取约8~10页，即150~200条说说内容。现在，主要的工作已经完成了。\n\n## 功能完善\n\n在完成了主要功能的制作后，我们对程序的功能进行完善。\n\n### 在登陆后自动跳转\n\n我们刚刚使用`sleep(5)`作为登陆延时。但是，跳转到目标空间应该在登陆后自动进行。为此，我们引入selenium的**WebDriverWait**功能，在登陆后（即网页标题变化为 *xxx.qzone.com* 后）自动跳转至目标空间。\n\n```python\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.support.ui import WebDriverWait\n\nif __name__ == '__main__':\n    driver = ini_driver()\n    driver.get(login_url)\n    WebDriverWait(driver,60).until(EC.title_contains(\"qzone\"))\n    driver.get(target_url)\n```\n\n\n\n### 自动获取页面数量\n\n先前的程序中，`url_list`的大小需要手动输入。对于理想的程序，`url_list`的大小应为说说页面的实际数量。通过观察，我们主要到目标说说的数量存放于`emotion_cgi_msglist_v6`文件的`total`字段中。由于一页最多有20条说说，我们可以用说说总数算出页面的数量。\n\n```python\nfrom math import ceil\n\ndef get_total(url:str,headers,qzone_cookies):\n    return json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[17:-2])['total']\n\nglobal page_number\npage_number = 0 # Get all pages unless otherwise specified.\nif page_number == 0:\n    page_number = ceil(get_total(prefix+\"0\"+suffix,headers,qzone_cookies)/20)\n```\n\n### 估计剩余时间\n\n在获取一定数量的页面数据，我们可以大致计算出获取每个页面所需要的时间，并借此算出预估的剩余时间。\n\n```python\nfrom time import time\n\nglobal counter\ncounter = 0\n\ndef process_raw_msglist(raw_msglist:dict):\n\tif raw_msglist is not None:\n        # Some duplicate code are left out.\n        global counter,page_number\n        counter += 1\n        if counter>20:\n            global start_time\n            print(\"{:d} of {:d} finished.(About {:.3f}s left.)\".format(counter,page_number,calc_time(start_time)))\n        else:\n            print(\"{:d} of {:d} finished.\".format(counter,page_number))\n    return None\n\ndef calc_time(start_time):\n    consumed_time = time()-start_time\n    global counter,page_number\n    per_time = consumed_time/counter\n    return (page_number-counter)*per_time\n\nif __name__ == '__main__':\n    # Some duplicate code are left out.\n    print(\"Start\")\n    start_time = time()\n```\n\n### 大文件分割\n\n由于较大的数据集不便于网络传输，我们可以将生成的说说内容文件按一定的容量进行拆分。经过验证，40000条说说的大小约为30~40MB。以下给出拆分脚本的代码，供读者参考。\n\n```python\nimport sys\nimport json\ncount = 0\nsplit_size = 40000 # Change it if necessary\nname = \"NJU_BBQ\" # Change it if necessary\n\ndata_path = sys.path[0] + \"/data/\"\n\nwith open(data_path + \"{}.json\".format(name),'r',encoding='utf-8') as f:\n    json_data = json.loads(f.read())\n\nnew_data = dict()\nfor index in json_data:\n    new_data[index] = json_data[index]\n    if len(new_data)>split_size:\n        with open(data_path + \"{}_part_{:d}.json\".format(name,count),'w+',encoding='utf-8') as f:\n            f.write(json.dumps(new_data,indent=4,ensure_ascii=False))\n        count += 1\n        new_data = dict()\nif count!=0:\n    with open(data_path + \"{}_part_{:d}.json\".format(name,count),'w+',encoding='utf-8') as f:\n        f.write(json.dumps(new_data,indent=4,ensure_ascii=False))\n```\n\n## 后记\n\n本教程的完整项目代码已在Github开源。地址如下：[项目地址](<https://github.com/EricZhu-42/QQ_Zone_Spider>)\n\n","source":"_posts/QQ-Zone-Spider.md","raw":"---\ntitle: 基于Python的多进程QQ空间爬虫\ndate: 2019-05-01 11:51:55\ntags: [python]\n---\n\n## 前言\n\n### 功能简介\n本教程利用Python实现了一个简单的QQ空间说说抓取脚本。该脚本以每秒150~200条的速度抓取好友的历史说说，并将其格式化后存储至本地。\n\n![04](QQ-Zone-Spider\\04.png)\n![04](QQ-Zone-Spider\\05.png)\n\n<!-- more -->\n\n### 环境需求\n\n1. Python 3.72\n2. Python模块：[Selenium](<https://selenium-python.readthedocs.io/#>) 与 [Requests](<http://cn.python-requests.org/zh_CN/latest/>)\n3. Google Chrome 74.0 与 ChromeDriver 74.0\n\n> 注：具体版本号可酌情选择\n\n## 你将在这里看到\n\n1. 如何用Python实现对QQ空间说说数据的获取\n2. 如何利用Chrome**开发者工具**分析动态网页\n3. 如何利用Selenium完成对数据的请求与获取\n4. 如何在Requests与Selenium间传递参数(如**Cookies**)\n5. 如何完成一个简单的**多进程爬虫**\n\n## 你将不会在这里看到\n\n1. **如何安装**Python、Python模块与ChromeDriver等开发环境\n2. **过于基础**的Python代码写法\n3. Requests，Selenium，re，json等模块的**详细介绍**\n4. 用Selenium实现**自动登陆**（然而以后可能会做）\n5. 关于Python与第三方模块的**进阶用法**\n\n## 关于思路的简单介绍\n\n首先，观察QQ空间说说页面，可以发现说说页面为**动态网页**，无法用下载网页并解析的方式获取说说数据。通过对翻页时发送/接收数据的分析，我们可以找出存放说说**内容**的具体**文件**与其**请求方式**。\n\n其次，我们利用**Selenium**进行初步的模拟获取，成功地自动获取了说说内容页面，并对内容进行解析与格式化存储，速度为每秒20~40条。\n\n接着，为了提高获取的效率，我们利用**Requests**与**Multiprocessing**，用**多进程模式**重构了脚本，使获取的速度提高为每秒150~200条。\n\n最后，我们对脚本的**功能**进行完善，添加预计剩余时间，大文件分割等功能。\n\n## 网页内容分析\n\n> 注：考虑到原项目的开发背景为对南京大学表白墙的数据分析，本文以“南京大学表白墙”为样例对象。\n\n### 找到资源文件\n\n进入[目标的QQ空间说说页面](<https://user.qzone.qq.com/2074934525/311>)，**查看网页源代码**，我们可以发现说说内容并未保存在网页源文件中。因此，我们的获取目标为动态页面的数据内容。\n\n> 在动态页面中，数据内容一般在客户端与网页交互（如进入网页，点击翻页按钮）时发送到客户端，并通过JS脚本等途径动态插入到网页的<div\\>标签中，从而完成对页面内容的更新。\n\n我们打开Chrome浏览器的**开发者工具**，切换到**Network**标签页。此时我们可以获得交互过程中加载的所有资源。为了减少干扰，我们点击Network标签页下的**Clear**按钮，并在说说页面中切换到下一页。\n\n![02](QQ-Zone-Spider\\02.png)\n\n右侧列表中列出了翻页过程中加载的资源。在排除了无关的图片文件后，我们可以发现说说内容保存在名称为`emotion_cgi_msglist_v6`的文件中。该文件即为我们要获得的说说数据。\n\n![03](QQ-Zone-Spider\\03.png)\n\n### 找到请求模式\n\n返回Network标签页，观察该文件的**请求头**与**请求参数**，可以看出：请求头中主要有**Cookies**和**User-Agent**两部分，而请求参数中出现了显眼的**pos**参数。通过翻页测试，我们发现pos参数符合以下规律：\n\n> 第一页：pos = 0\n> 第二页：pos = 20\n> 第三页：pos = 40\n\n因此，我们可以得出以下结论\n\n> pos = 20 * 页码数 - 20\n\n因此，我们接下来就将使用**Selenium**进行模拟登陆，并按照上述规律对文件进行获取。\n\n## 基于Selenium的数据获取\n\n为了便于调试，我们先利用Selenium登陆QQ空间，并且对文件进行请求。然后，我们将请求的数据进行格式化存储。\n\n### 登陆\n\n我们首先创建Selenium的webdriver实例，并用它打开QQ空间登陆界面，进入目标空间。\n\n```python\nimport time\nfrom selenium import webdriver\n\nqq_id = 2074934525 # Change it if necessary.\nlogin_url = 'https://user.qzone.qq.com'\ntarget_url = 'https://user.qzone.qq.com/{}/311'.format(qq_id)\n\ndef ini_driver():\n    driver = webdriver.Chrome()\n    return driver\n\nif __name__ == '__main__':\n    driver = ini_driver()\n    driver.get(login_url)\n    time.sleep(5)\n    driver.get(target_url)\n```\n\n### 请求资源\n\n为了获取加载资源列表，我们需要调整Selenium的**DesiredCapabilities**特性，从而获得目标文件的请求细节。\n\n```python\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n\ndef ini_driver():\n    caps = DesiredCapabilities.CHROME\n    caps['loggingPrefs'] = {'performance': 'ALL'}\n    driver = webdriver.Chrome(desired_capabilities=caps)\n    return driver\n\nlog = str(driver.get_log('performance'))\n```\n\n通过分析请求，我们构造出请求的**匹配模式**，将完整的**请求体**匹配出来，并将完整请求拆分为 *prefix + page_pos + suffix* 的模式。\n\n```python\nimport re\n\nfile_prefix = r\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6\"\n\ndef get_format(data:str):\n    pos = data.find('pos=')\n    prefix = file_prefix + data[:pos+4]\n    suffix = data[pos+5:]\n    return (prefix,suffix)\n\npattern = re.compile(r'\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6(.*?)\"')\n\ndata = re.findall(pattern,log)[0]\nprefix,suffix = get_format(data)\n```\n\n此时，我们即可使用如下方式获得某一页的说说内容。\n\n```python\npage_pos = str(0)\ncontent_url = prefix + page_pos + suffix\ncontent = driver.get(content_url)\n```\n\n### 格式化与存储\n\n上一步提取出的**content**为原始的目标文件。我们需要将其格式化为符合**json**规则的代码，并将其存储在文件中。\n\n我们先利用字符串切片，除去开头结尾的无关字符。剩余内容为符合json规则的字符串，可以使用`json.loads`将其转化为json类型。此外，所有的说说内容都存放在`msglist`字段中。我们将其提取出来。\n\n```python\nimport json\n\ndef get_msg_list(content:str):\n    return json.loads(content[17:-2])['msglist']\n```\n\n接着，由于`msglist`字段中存在着大量的无关数据。我们用`msglist`字段中信息的有效部分构造`new_msg`，将它存放在字典中。\n\n> 因为每条说说的发送时间唯一，我们以说说的timestamp(时间戳)属性作为字典索引。\n\n```python\nmsglist = dict()\n\ndef process_raw_msglist(raw_msglist:dict):\n    if raw_msglist is not None:\n        for msg in raw_msglist:\n            new_msg = dict()\n            new_msg['content'] = msg['content']\n            new_msg['commentlist'] = list()\n            if msg['commentlist'] is not None:\n                for comment in msg['commentlist']:\n                    new_msg['commentlist'].append(\n                        {\n                                'content' : comment['content'],\n                                'time' : comment['create_time'],\n                                'name' : comment['name']\n                        }\n                    )\n            msglist[msg['created_time']] = new_msg\n    return None\n\n```\n\n此时，`msglist`即为我们需要的说说内容数据。我们将其保存在本地文件中。\n\n> 为了能够正常保存中文数据，我们应当用UTF-8编码写入文件，并且在`json.dumps`方法中增加`ensure_ascii=False`参数。\n\n ```python\nwith open(\"{}.json\".format(qq_id),'w+',encoding='utf-8') as f:\n    f.write(json.dumps(msglist,indent=4,ensure_ascii=False))\n ```\n\n通过遍历`page_pos`，我们即可完成对数据的自动获取工作。\n\n## 用Requests实现多进程获取\n\n由于Selenium的特性，我们一次只能获取一页数据。这种单进程模式对数据获取速度产生了较大的限制。此外，基于可视页面的ChromeDriver对系统资源的占用也较多。虽然可以通过**headless**启动或换用**PhantomJS**进行优化，但我们决定采用**Requests+Multiprocessing**的方法实现对数据的多进程获取。\n\n### 构造Header\n\n在分析网页内容时，我们观察了请求`emotion_cgi_msglist_v6`时的Header格式。我们首先构造出header的**User-Agent**部分。\n\n```python\nUser_Agent = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.108 Safari/537.36'\n\nheaders = {\n    'User-Agent' : User_Agent\n    }\n```\n\n接着，我们对**Cookies**进行传递。我们利用`driver.get_cookies()`方法获得driver携带的所有cookie，并将其处理后保存为`qzone_cookies`字典。\n\n```python\nqzone_cookies = dict()\nfor item in driver.get_cookies():\n    qzone_cookies[item[\"name\"]] = item[\"value\"]\n```\n> 在Cookies保存完后，可用`driver.quit()`退出webdriver，减少资源占用。\n\n### 构造请求方法\n\n为了便于用Multiprocessing进行多进程处理，我们先创建一个`Requests.session`，然后重写`get_msg_list`方法，将上一步中构造的Header与Cookies作为参数传递进去。\n\n```python\nimport requests\n\nsession = requests.session()\n\ndef get_msg_list(url:str,headers,qzone_cookies):\n    return json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[17:-2])['msglist']\n```\n\n### 配置进程池\n\n接下来，我们创建Multiprocessing的**进程池(Pool)**。\n\n```pyth\nprocess_number = 8\npos_pool = multiprocessing.Pool(processes=process_number)\n```\n\n为了便于自动分配进程，我们构造`url_list`为获取地址的列表。\n\n```python\ndef construct_url_list(prefix:str,suffix:str,times:int):\n    url_list = list()\n    for i in range(0,times):\n        url_list.append(prefix+str(i*20)+suffix)\n    return url_list\n\npage_number = 10 # Change it if necessary.\nurl_list = construct_url_list(prefix,suffix,page_number)\n```\n在前两项准备工作结束后，我们就可以对进程池进行任务指派了。\n\n```pythn\nfor url in url_list:\n    pos_pool.apply_async(get_msg_list,args=(url,headers,qzone_cookies),callback=process_raw_msglist)\nprint(\"Start\")\npos_pool.close()\npos_pool.join()\nprint('Done')\n```\n\n进程池会自动协调内部的进程，为每一个进程分配一个任务（此处为获取`url`的文件数据，在格式化后存入`msglist`字典中），并在任务结束后分配新的任务，直到`url_list`被完全遍历。\n\n对于进程数为8的进程池，每秒可以获取约8~10页，即150~200条说说内容。现在，主要的工作已经完成了。\n\n## 功能完善\n\n在完成了主要功能的制作后，我们对程序的功能进行完善。\n\n### 在登陆后自动跳转\n\n我们刚刚使用`sleep(5)`作为登陆延时。但是，跳转到目标空间应该在登陆后自动进行。为此，我们引入selenium的**WebDriverWait**功能，在登陆后（即网页标题变化为 *xxx.qzone.com* 后）自动跳转至目标空间。\n\n```python\nfrom selenium.webdriver.common.desired_capabilities import DesiredCapabilities\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.webdriver.support.ui import WebDriverWait\n\nif __name__ == '__main__':\n    driver = ini_driver()\n    driver.get(login_url)\n    WebDriverWait(driver,60).until(EC.title_contains(\"qzone\"))\n    driver.get(target_url)\n```\n\n\n\n### 自动获取页面数量\n\n先前的程序中，`url_list`的大小需要手动输入。对于理想的程序，`url_list`的大小应为说说页面的实际数量。通过观察，我们主要到目标说说的数量存放于`emotion_cgi_msglist_v6`文件的`total`字段中。由于一页最多有20条说说，我们可以用说说总数算出页面的数量。\n\n```python\nfrom math import ceil\n\ndef get_total(url:str,headers,qzone_cookies):\n    return json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[17:-2])['total']\n\nglobal page_number\npage_number = 0 # Get all pages unless otherwise specified.\nif page_number == 0:\n    page_number = ceil(get_total(prefix+\"0\"+suffix,headers,qzone_cookies)/20)\n```\n\n### 估计剩余时间\n\n在获取一定数量的页面数据，我们可以大致计算出获取每个页面所需要的时间，并借此算出预估的剩余时间。\n\n```python\nfrom time import time\n\nglobal counter\ncounter = 0\n\ndef process_raw_msglist(raw_msglist:dict):\n\tif raw_msglist is not None:\n        # Some duplicate code are left out.\n        global counter,page_number\n        counter += 1\n        if counter>20:\n            global start_time\n            print(\"{:d} of {:d} finished.(About {:.3f}s left.)\".format(counter,page_number,calc_time(start_time)))\n        else:\n            print(\"{:d} of {:d} finished.\".format(counter,page_number))\n    return None\n\ndef calc_time(start_time):\n    consumed_time = time()-start_time\n    global counter,page_number\n    per_time = consumed_time/counter\n    return (page_number-counter)*per_time\n\nif __name__ == '__main__':\n    # Some duplicate code are left out.\n    print(\"Start\")\n    start_time = time()\n```\n\n### 大文件分割\n\n由于较大的数据集不便于网络传输，我们可以将生成的说说内容文件按一定的容量进行拆分。经过验证，40000条说说的大小约为30~40MB。以下给出拆分脚本的代码，供读者参考。\n\n```python\nimport sys\nimport json\ncount = 0\nsplit_size = 40000 # Change it if necessary\nname = \"NJU_BBQ\" # Change it if necessary\n\ndata_path = sys.path[0] + \"/data/\"\n\nwith open(data_path + \"{}.json\".format(name),'r',encoding='utf-8') as f:\n    json_data = json.loads(f.read())\n\nnew_data = dict()\nfor index in json_data:\n    new_data[index] = json_data[index]\n    if len(new_data)>split_size:\n        with open(data_path + \"{}_part_{:d}.json\".format(name,count),'w+',encoding='utf-8') as f:\n            f.write(json.dumps(new_data,indent=4,ensure_ascii=False))\n        count += 1\n        new_data = dict()\nif count!=0:\n    with open(data_path + \"{}_part_{:d}.json\".format(name,count),'w+',encoding='utf-8') as f:\n        f.write(json.dumps(new_data,indent=4,ensure_ascii=False))\n```\n\n## 后记\n\n本教程的完整项目代码已在Github开源。地址如下：[项目地址](<https://github.com/EricZhu-42/QQ_Zone_Spider>)\n\n","slug":"QQ-Zone-Spider","published":1,"updated":"2019-05-01T07:32:02.631Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbks000s30uv74zkasfd","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"功能简介\"><a href=\"#功能简介\" class=\"headerlink\" title=\"功能简介\"></a>功能简介</h3><p>本教程利用Python实现了一个简单的QQ空间说说抓取脚本。该脚本以每秒150~200条的速度抓取好友的历史说说，并将其格式化后存储至本地。</p>\n<p><img src=\"/2019/05/01/QQ-Zone-Spider/04.png\" alt=\"04\"><br><img src=\"/2019/05/01/QQ-Zone-Spider/05.png\" alt=\"04\"></p>\n<a id=\"more\"></a>\n<h3 id=\"环境需求\"><a href=\"#环境需求\" class=\"headerlink\" title=\"环境需求\"></a>环境需求</h3><ol>\n<li>Python 3.72</li>\n<li>Python模块：<a href=\"https://selenium-python.readthedocs.io/#\" target=\"_blank\" rel=\"noopener\">Selenium</a> 与 <a href=\"http://cn.python-requests.org/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">Requests</a></li>\n<li>Google Chrome 74.0 与 ChromeDriver 74.0</li>\n</ol>\n<blockquote>\n<p>注：具体版本号可酌情选择</p>\n</blockquote>\n<h2 id=\"你将在这里看到\"><a href=\"#你将在这里看到\" class=\"headerlink\" title=\"你将在这里看到\"></a>你将在这里看到</h2><ol>\n<li>如何用Python实现对QQ空间说说数据的获取</li>\n<li>如何利用Chrome<strong>开发者工具</strong>分析动态网页</li>\n<li>如何利用Selenium完成对数据的请求与获取</li>\n<li>如何在Requests与Selenium间传递参数(如<strong>Cookies</strong>)</li>\n<li>如何完成一个简单的<strong>多进程爬虫</strong></li>\n</ol>\n<h2 id=\"你将不会在这里看到\"><a href=\"#你将不会在这里看到\" class=\"headerlink\" title=\"你将不会在这里看到\"></a>你将不会在这里看到</h2><ol>\n<li><strong>如何安装</strong>Python、Python模块与ChromeDriver等开发环境</li>\n<li><strong>过于基础</strong>的Python代码写法</li>\n<li>Requests，Selenium，re，json等模块的<strong>详细介绍</strong></li>\n<li>用Selenium实现<strong>自动登陆</strong>（然而以后可能会做）</li>\n<li>关于Python与第三方模块的<strong>进阶用法</strong></li>\n</ol>\n<h2 id=\"关于思路的简单介绍\"><a href=\"#关于思路的简单介绍\" class=\"headerlink\" title=\"关于思路的简单介绍\"></a>关于思路的简单介绍</h2><p>首先，观察QQ空间说说页面，可以发现说说页面为<strong>动态网页</strong>，无法用下载网页并解析的方式获取说说数据。通过对翻页时发送/接收数据的分析，我们可以找出存放说说<strong>内容</strong>的具体<strong>文件</strong>与其<strong>请求方式</strong>。</p>\n<p>其次，我们利用<strong>Selenium</strong>进行初步的模拟获取，成功地自动获取了说说内容页面，并对内容进行解析与格式化存储，速度为每秒20~40条。</p>\n<p>接着，为了提高获取的效率，我们利用<strong>Requests</strong>与<strong>Multiprocessing</strong>，用<strong>多进程模式</strong>重构了脚本，使获取的速度提高为每秒150~200条。</p>\n<p>最后，我们对脚本的<strong>功能</strong>进行完善，添加预计剩余时间，大文件分割等功能。</p>\n<h2 id=\"网页内容分析\"><a href=\"#网页内容分析\" class=\"headerlink\" title=\"网页内容分析\"></a>网页内容分析</h2><blockquote>\n<p>注：考虑到原项目的开发背景为对南京大学表白墙的数据分析，本文以“南京大学表白墙”为样例对象。</p>\n</blockquote>\n<h3 id=\"找到资源文件\"><a href=\"#找到资源文件\" class=\"headerlink\" title=\"找到资源文件\"></a>找到资源文件</h3><p>进入<a href=\"https://user.qzone.qq.com/2074934525/311\" target=\"_blank\" rel=\"noopener\">目标的QQ空间说说页面</a>，<strong>查看网页源代码</strong>，我们可以发现说说内容并未保存在网页源文件中。因此，我们的获取目标为动态页面的数据内容。</p>\n<blockquote>\n<p>在动态页面中，数据内容一般在客户端与网页交互（如进入网页，点击翻页按钮）时发送到客户端，并通过JS脚本等途径动态插入到网页的&lt;div>标签中，从而完成对页面内容的更新。</p>\n</blockquote>\n<p>我们打开Chrome浏览器的<strong>开发者工具</strong>，切换到<strong>Network</strong>标签页。此时我们可以获得交互过程中加载的所有资源。为了减少干扰，我们点击Network标签页下的<strong>Clear</strong>按钮，并在说说页面中切换到下一页。</p>\n<p><img src=\"/2019/05/01/QQ-Zone-Spider/02.png\" alt=\"02\"></p>\n<p>右侧列表中列出了翻页过程中加载的资源。在排除了无关的图片文件后，我们可以发现说说内容保存在名称为<code>emotion_cgi_msglist_v6</code>的文件中。该文件即为我们要获得的说说数据。</p>\n<p><img src=\"/2019/05/01/QQ-Zone-Spider/03.png\" alt=\"03\"></p>\n<h3 id=\"找到请求模式\"><a href=\"#找到请求模式\" class=\"headerlink\" title=\"找到请求模式\"></a>找到请求模式</h3><p>返回Network标签页，观察该文件的<strong>请求头</strong>与<strong>请求参数</strong>，可以看出：请求头中主要有<strong>Cookies</strong>和<strong>User-Agent</strong>两部分，而请求参数中出现了显眼的<strong>pos</strong>参数。通过翻页测试，我们发现pos参数符合以下规律：</p>\n<blockquote>\n<p>第一页：pos = 0<br>第二页：pos = 20<br>第三页：pos = 40</p>\n</blockquote>\n<p>因此，我们可以得出以下结论</p>\n<blockquote>\n<p>pos = 20 * 页码数 - 20</p>\n</blockquote>\n<p>因此，我们接下来就将使用<strong>Selenium</strong>进行模拟登陆，并按照上述规律对文件进行获取。</p>\n<h2 id=\"基于Selenium的数据获取\"><a href=\"#基于Selenium的数据获取\" class=\"headerlink\" title=\"基于Selenium的数据获取\"></a>基于Selenium的数据获取</h2><p>为了便于调试，我们先利用Selenium登陆QQ空间，并且对文件进行请求。然后，我们将请求的数据进行格式化存储。</p>\n<h3 id=\"登陆\"><a href=\"#登陆\" class=\"headerlink\" title=\"登陆\"></a>登陆</h3><p>我们首先创建Selenium的webdriver实例，并用它打开QQ空间登陆界面，进入目标空间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">qq_id = <span class=\"number\">2074934525</span> <span class=\"comment\"># Change it if necessary.</span></span><br><span class=\"line\">login_url = <span class=\"string\">'https://user.qzone.qq.com'</span></span><br><span class=\"line\">target_url = <span class=\"string\">'https://user.qzone.qq.com/&#123;&#125;/311'</span>.format(qq_id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ini_driver</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    driver = webdriver.Chrome()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    driver = ini_driver()</span><br><span class=\"line\">    driver.get(login_url)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    driver.get(target_url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"请求资源\"><a href=\"#请求资源\" class=\"headerlink\" title=\"请求资源\"></a>请求资源</h3><p>为了获取加载资源列表，我们需要调整Selenium的<strong>DesiredCapabilities</strong>特性，从而获得目标文件的请求细节。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.desired_capabilities <span class=\"keyword\">import</span> DesiredCapabilities</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ini_driver</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    caps = DesiredCapabilities.CHROME</span><br><span class=\"line\">    caps[<span class=\"string\">'loggingPrefs'</span>] = &#123;<span class=\"string\">'performance'</span>: <span class=\"string\">'ALL'</span>&#125;</span><br><span class=\"line\">    driver = webdriver.Chrome(desired_capabilities=caps)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\">log = str(driver.get_log(<span class=\"string\">'performance'</span>))</span><br></pre></td></tr></table></figure>\n<p>通过分析请求，我们构造出请求的<strong>匹配模式</strong>，将完整的<strong>请求体</strong>匹配出来，并将完整请求拆分为 <em>prefix + page_pos + suffix</em> 的模式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">file_prefix = <span class=\"string\">r\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_format</span><span class=\"params\">(data:str)</span>:</span></span><br><span class=\"line\">    pos = data.find(<span class=\"string\">'pos='</span>)</span><br><span class=\"line\">    prefix = file_prefix + data[:pos+<span class=\"number\">4</span>]</span><br><span class=\"line\">    suffix = data[pos+<span class=\"number\">5</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (prefix,suffix)</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6(.*?)\"'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = re.findall(pattern,log)[<span class=\"number\">0</span>]</span><br><span class=\"line\">prefix,suffix = get_format(data)</span><br></pre></td></tr></table></figure>\n<p>此时，我们即可使用如下方式获得某一页的说说内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">page_pos = str(<span class=\"number\">0</span>)</span><br><span class=\"line\">content_url = prefix + page_pos + suffix</span><br><span class=\"line\">content = driver.get(content_url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"格式化与存储\"><a href=\"#格式化与存储\" class=\"headerlink\" title=\"格式化与存储\"></a>格式化与存储</h3><p>上一步提取出的<strong>content</strong>为原始的目标文件。我们需要将其格式化为符合<strong>json</strong>规则的代码，并将其存储在文件中。</p>\n<p>我们先利用字符串切片，除去开头结尾的无关字符。剩余内容为符合json规则的字符串，可以使用<code>json.loads</code>将其转化为json类型。此外，所有的说说内容都存放在<code>msglist</code>字段中。我们将其提取出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_msg_list</span><span class=\"params\">(content:str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(content[<span class=\"number\">17</span>:<span class=\"number\">-2</span>])[<span class=\"string\">'msglist'</span>]</span><br></pre></td></tr></table></figure>\n<p>接着，由于<code>msglist</code>字段中存在着大量的无关数据。我们用<code>msglist</code>字段中信息的有效部分构造<code>new_msg</code>，将它存放在字典中。</p>\n<blockquote>\n<p>因为每条说说的发送时间唯一，我们以说说的timestamp(时间戳)属性作为字典索引。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msglist = dict()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_raw_msglist</span><span class=\"params\">(raw_msglist:dict)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> raw_msglist <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> raw_msglist:</span><br><span class=\"line\">            new_msg = dict()</span><br><span class=\"line\">            new_msg[<span class=\"string\">'content'</span>] = msg[<span class=\"string\">'content'</span>]</span><br><span class=\"line\">            new_msg[<span class=\"string\">'commentlist'</span>] = list()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> msg[<span class=\"string\">'commentlist'</span>] <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> comment <span class=\"keyword\">in</span> msg[<span class=\"string\">'commentlist'</span>]:</span><br><span class=\"line\">                    new_msg[<span class=\"string\">'commentlist'</span>].append(</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"string\">'content'</span> : comment[<span class=\"string\">'content'</span>],</span><br><span class=\"line\">                                <span class=\"string\">'time'</span> : comment[<span class=\"string\">'create_time'</span>],</span><br><span class=\"line\">                                <span class=\"string\">'name'</span> : comment[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    )</span><br><span class=\"line\">            msglist[msg[<span class=\"string\">'created_time'</span>]] = new_msg</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<p>此时，<code>msglist</code>即为我们需要的说说内容数据。我们将其保存在本地文件中。</p>\n<blockquote>\n<p>为了能够正常保存中文数据，我们应当用UTF-8编码写入文件，并且在<code>json.dumps</code>方法中增加<code>ensure_ascii=False</code>参数。</p>\n</blockquote>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"&#123;&#125;.json\"</span>.format(qq_id),<span class=\"string\">'w+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(json.dumps(msglist,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>通过遍历<code>page_pos</code>，我们即可完成对数据的自动获取工作。</p>\n<h2 id=\"用Requests实现多进程获取\"><a href=\"#用Requests实现多进程获取\" class=\"headerlink\" title=\"用Requests实现多进程获取\"></a>用Requests实现多进程获取</h2><p>由于Selenium的特性，我们一次只能获取一页数据。这种单进程模式对数据获取速度产生了较大的限制。此外，基于可视页面的ChromeDriver对系统资源的占用也较多。虽然可以通过<strong>headless</strong>启动或换用<strong>PhantomJS</strong>进行优化，但我们决定采用<strong>Requests+Multiprocessing</strong>的方法实现对数据的多进程获取。</p>\n<h3 id=\"构造Header\"><a href=\"#构造Header\" class=\"headerlink\" title=\"构造Header\"></a>构造Header</h3><p>在分析网页内容时，我们观察了请求<code>emotion_cgi_msglist_v6</code>时的Header格式。我们首先构造出header的<strong>User-Agent</strong>部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User_Agent = <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.108 Safari/537.36'</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span> : User_Agent</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>接着，我们对<strong>Cookies</strong>进行传递。我们利用<code>driver.get_cookies()</code>方法获得driver携带的所有cookie，并将其处理后保存为<code>qzone_cookies</code>字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qzone_cookies = dict()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> driver.get_cookies():</span><br><span class=\"line\">    qzone_cookies[item[<span class=\"string\">\"name\"</span>]] = item[<span class=\"string\">\"value\"</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在Cookies保存完后，可用<code>driver.quit()</code>退出webdriver，减少资源占用。</p>\n</blockquote>\n<h3 id=\"构造请求方法\"><a href=\"#构造请求方法\" class=\"headerlink\" title=\"构造请求方法\"></a>构造请求方法</h3><p>为了便于用Multiprocessing进行多进程处理，我们先创建一个<code>Requests.session</code>，然后重写<code>get_msg_list</code>方法，将上一步中构造的Header与Cookies作为参数传递进去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_msg_list</span><span class=\"params\">(url:str,headers,qzone_cookies)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[<span class=\"number\">17</span>:<span class=\"number\">-2</span>])[<span class=\"string\">'msglist'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置进程池\"><a href=\"#配置进程池\" class=\"headerlink\" title=\"配置进程池\"></a>配置进程池</h3><p>接下来，我们创建Multiprocessing的<strong>进程池(Pool)</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process_number = 8</span><br><span class=\"line\">pos_pool = multiprocessing.Pool(processes=process_number)</span><br></pre></td></tr></table></figure>\n<p>为了便于自动分配进程，我们构造<code>url_list</code>为获取地址的列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">construct_url_list</span><span class=\"params\">(prefix:str,suffix:str,times:int)</span>:</span></span><br><span class=\"line\">    url_list = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,times):</span><br><span class=\"line\">        url_list.append(prefix+str(i*<span class=\"number\">20</span>)+suffix)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_list</span><br><span class=\"line\"></span><br><span class=\"line\">page_number = <span class=\"number\">10</span> <span class=\"comment\"># Change it if necessary.</span></span><br><span class=\"line\">url_list = construct_url_list(prefix,suffix,page_number)</span><br></pre></td></tr></table></figure>\n<p>在前两项准备工作结束后，我们就可以对进程池进行任务指派了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for url in url_list:</span><br><span class=\"line\">    pos_pool.apply_async(get_msg_list,args=(url,headers,qzone_cookies),callback=process_raw_msglist)</span><br><span class=\"line\">print(&quot;Start&quot;)</span><br><span class=\"line\">pos_pool.close()</span><br><span class=\"line\">pos_pool.join()</span><br><span class=\"line\">print(&apos;Done&apos;)</span><br></pre></td></tr></table></figure>\n<p>进程池会自动协调内部的进程，为每一个进程分配一个任务（此处为获取<code>url</code>的文件数据，在格式化后存入<code>msglist</code>字典中），并在任务结束后分配新的任务，直到<code>url_list</code>被完全遍历。</p>\n<p>对于进程数为8的进程池，每秒可以获取约8~10页，即150~200条说说内容。现在，主要的工作已经完成了。</p>\n<h2 id=\"功能完善\"><a href=\"#功能完善\" class=\"headerlink\" title=\"功能完善\"></a>功能完善</h2><p>在完成了主要功能的制作后，我们对程序的功能进行完善。</p>\n<h3 id=\"在登陆后自动跳转\"><a href=\"#在登陆后自动跳转\" class=\"headerlink\" title=\"在登陆后自动跳转\"></a>在登陆后自动跳转</h3><p>我们刚刚使用<code>sleep(5)</code>作为登陆延时。但是，跳转到目标空间应该在登陆后自动进行。为此，我们引入selenium的<strong>WebDriverWait</strong>功能，在登陆后（即网页标题变化为 <em>xxx.qzone.com</em> 后）自动跳转至目标空间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.desired_capabilities <span class=\"keyword\">import</span> DesiredCapabilities</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    driver = ini_driver()</span><br><span class=\"line\">    driver.get(login_url)</span><br><span class=\"line\">    WebDriverWait(driver,<span class=\"number\">60</span>).until(EC.title_contains(<span class=\"string\">\"qzone\"</span>))</span><br><span class=\"line\">    driver.get(target_url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"自动获取页面数量\"><a href=\"#自动获取页面数量\" class=\"headerlink\" title=\"自动获取页面数量\"></a>自动获取页面数量</h3><p>先前的程序中，<code>url_list</code>的大小需要手动输入。对于理想的程序，<code>url_list</code>的大小应为说说页面的实际数量。通过观察，我们主要到目标说说的数量存放于<code>emotion_cgi_msglist_v6</code>文件的<code>total</code>字段中。由于一页最多有20条说说，我们可以用说说总数算出页面的数量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> ceil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_total</span><span class=\"params\">(url:str,headers,qzone_cookies)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[<span class=\"number\">17</span>:<span class=\"number\">-2</span>])[<span class=\"string\">'total'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">global</span> page_number</span><br><span class=\"line\">page_number = <span class=\"number\">0</span> <span class=\"comment\"># Get all pages unless otherwise specified.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> page_number == <span class=\"number\">0</span>:</span><br><span class=\"line\">    page_number = ceil(get_total(prefix+<span class=\"string\">\"0\"</span>+suffix,headers,qzone_cookies)/<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"估计剩余时间\"><a href=\"#估计剩余时间\" class=\"headerlink\" title=\"估计剩余时间\"></a>估计剩余时间</h3><p>在获取一定数量的页面数据，我们可以大致计算出获取每个页面所需要的时间，并借此算出预估的剩余时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">global</span> counter</span><br><span class=\"line\">counter = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_raw_msglist</span><span class=\"params\">(raw_msglist:dict)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raw_msglist <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Some duplicate code are left out.</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> counter,page_number</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> counter&gt;<span class=\"number\">20</span>:</span><br><span class=\"line\">            <span class=\"keyword\">global</span> start_time</span><br><span class=\"line\">            print(<span class=\"string\">\"&#123;:d&#125; of &#123;:d&#125; finished.(About &#123;:.3f&#125;s left.)\"</span>.format(counter,page_number,calc_time(start_time)))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"&#123;:d&#125; of &#123;:d&#125; finished.\"</span>.format(counter,page_number))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_time</span><span class=\"params\">(start_time)</span>:</span></span><br><span class=\"line\">    consumed_time = time()-start_time</span><br><span class=\"line\">    <span class=\"keyword\">global</span> counter,page_number</span><br><span class=\"line\">    per_time = consumed_time/counter</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (page_number-counter)*per_time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Some duplicate code are left out.</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Start\"</span>)</span><br><span class=\"line\">    start_time = time()</span><br></pre></td></tr></table></figure>\n<h3 id=\"大文件分割\"><a href=\"#大文件分割\" class=\"headerlink\" title=\"大文件分割\"></a>大文件分割</h3><p>由于较大的数据集不便于网络传输，我们可以将生成的说说内容文件按一定的容量进行拆分。经过验证，40000条说说的大小约为30~40MB。以下给出拆分脚本的代码，供读者参考。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">split_size = <span class=\"number\">40000</span> <span class=\"comment\"># Change it if necessary</span></span><br><span class=\"line\">name = <span class=\"string\">\"NJU_BBQ\"</span> <span class=\"comment\"># Change it if necessary</span></span><br><span class=\"line\"></span><br><span class=\"line\">data_path = sys.path[<span class=\"number\">0</span>] + <span class=\"string\">\"/data/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(data_path + <span class=\"string\">\"&#123;&#125;.json\"</span>.format(name),<span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json_data = json.loads(f.read())</span><br><span class=\"line\"></span><br><span class=\"line\">new_data = dict()</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> json_data:</span><br><span class=\"line\">    new_data[index] = json_data[index]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(new_data)&gt;split_size:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(data_path + <span class=\"string\">\"&#123;&#125;_part_&#123;:d&#125;.json\"</span>.format(name,count),<span class=\"string\">'w+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(json.dumps(new_data,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"literal\">False</span>))</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        new_data = dict()</span><br><span class=\"line\"><span class=\"keyword\">if</span> count!=<span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(data_path + <span class=\"string\">\"&#123;&#125;_part_&#123;:d&#125;.json\"</span>.format(name,count),<span class=\"string\">'w+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(json.dumps(new_data,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>本教程的完整项目代码已在Github开源。地址如下：<a href=\"https://github.com/EricZhu-42/QQ_Zone_Spider\" target=\"_blank\" rel=\"noopener\">项目地址</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><h3 id=\"功能简介\"><a href=\"#功能简介\" class=\"headerlink\" title=\"功能简介\"></a>功能简介</h3><p>本教程利用Python实现了一个简单的QQ空间说说抓取脚本。该脚本以每秒150~200条的速度抓取好友的历史说说，并将其格式化后存储至本地。</p>\n<p><img src=\"/2019/05/01/QQ-Zone-Spider/04.png\" alt=\"04\"><br><img src=\"/2019/05/01/QQ-Zone-Spider/05.png\" alt=\"04\"></p>","more":"<h3 id=\"环境需求\"><a href=\"#环境需求\" class=\"headerlink\" title=\"环境需求\"></a>环境需求</h3><ol>\n<li>Python 3.72</li>\n<li>Python模块：<a href=\"https://selenium-python.readthedocs.io/#\" target=\"_blank\" rel=\"noopener\">Selenium</a> 与 <a href=\"http://cn.python-requests.org/zh_CN/latest/\" target=\"_blank\" rel=\"noopener\">Requests</a></li>\n<li>Google Chrome 74.0 与 ChromeDriver 74.0</li>\n</ol>\n<blockquote>\n<p>注：具体版本号可酌情选择</p>\n</blockquote>\n<h2 id=\"你将在这里看到\"><a href=\"#你将在这里看到\" class=\"headerlink\" title=\"你将在这里看到\"></a>你将在这里看到</h2><ol>\n<li>如何用Python实现对QQ空间说说数据的获取</li>\n<li>如何利用Chrome<strong>开发者工具</strong>分析动态网页</li>\n<li>如何利用Selenium完成对数据的请求与获取</li>\n<li>如何在Requests与Selenium间传递参数(如<strong>Cookies</strong>)</li>\n<li>如何完成一个简单的<strong>多进程爬虫</strong></li>\n</ol>\n<h2 id=\"你将不会在这里看到\"><a href=\"#你将不会在这里看到\" class=\"headerlink\" title=\"你将不会在这里看到\"></a>你将不会在这里看到</h2><ol>\n<li><strong>如何安装</strong>Python、Python模块与ChromeDriver等开发环境</li>\n<li><strong>过于基础</strong>的Python代码写法</li>\n<li>Requests，Selenium，re，json等模块的<strong>详细介绍</strong></li>\n<li>用Selenium实现<strong>自动登陆</strong>（然而以后可能会做）</li>\n<li>关于Python与第三方模块的<strong>进阶用法</strong></li>\n</ol>\n<h2 id=\"关于思路的简单介绍\"><a href=\"#关于思路的简单介绍\" class=\"headerlink\" title=\"关于思路的简单介绍\"></a>关于思路的简单介绍</h2><p>首先，观察QQ空间说说页面，可以发现说说页面为<strong>动态网页</strong>，无法用下载网页并解析的方式获取说说数据。通过对翻页时发送/接收数据的分析，我们可以找出存放说说<strong>内容</strong>的具体<strong>文件</strong>与其<strong>请求方式</strong>。</p>\n<p>其次，我们利用<strong>Selenium</strong>进行初步的模拟获取，成功地自动获取了说说内容页面，并对内容进行解析与格式化存储，速度为每秒20~40条。</p>\n<p>接着，为了提高获取的效率，我们利用<strong>Requests</strong>与<strong>Multiprocessing</strong>，用<strong>多进程模式</strong>重构了脚本，使获取的速度提高为每秒150~200条。</p>\n<p>最后，我们对脚本的<strong>功能</strong>进行完善，添加预计剩余时间，大文件分割等功能。</p>\n<h2 id=\"网页内容分析\"><a href=\"#网页内容分析\" class=\"headerlink\" title=\"网页内容分析\"></a>网页内容分析</h2><blockquote>\n<p>注：考虑到原项目的开发背景为对南京大学表白墙的数据分析，本文以“南京大学表白墙”为样例对象。</p>\n</blockquote>\n<h3 id=\"找到资源文件\"><a href=\"#找到资源文件\" class=\"headerlink\" title=\"找到资源文件\"></a>找到资源文件</h3><p>进入<a href=\"https://user.qzone.qq.com/2074934525/311\" target=\"_blank\" rel=\"noopener\">目标的QQ空间说说页面</a>，<strong>查看网页源代码</strong>，我们可以发现说说内容并未保存在网页源文件中。因此，我们的获取目标为动态页面的数据内容。</p>\n<blockquote>\n<p>在动态页面中，数据内容一般在客户端与网页交互（如进入网页，点击翻页按钮）时发送到客户端，并通过JS脚本等途径动态插入到网页的&lt;div>标签中，从而完成对页面内容的更新。</p>\n</blockquote>\n<p>我们打开Chrome浏览器的<strong>开发者工具</strong>，切换到<strong>Network</strong>标签页。此时我们可以获得交互过程中加载的所有资源。为了减少干扰，我们点击Network标签页下的<strong>Clear</strong>按钮，并在说说页面中切换到下一页。</p>\n<p><img src=\"/2019/05/01/QQ-Zone-Spider/02.png\" alt=\"02\"></p>\n<p>右侧列表中列出了翻页过程中加载的资源。在排除了无关的图片文件后，我们可以发现说说内容保存在名称为<code>emotion_cgi_msglist_v6</code>的文件中。该文件即为我们要获得的说说数据。</p>\n<p><img src=\"/2019/05/01/QQ-Zone-Spider/03.png\" alt=\"03\"></p>\n<h3 id=\"找到请求模式\"><a href=\"#找到请求模式\" class=\"headerlink\" title=\"找到请求模式\"></a>找到请求模式</h3><p>返回Network标签页，观察该文件的<strong>请求头</strong>与<strong>请求参数</strong>，可以看出：请求头中主要有<strong>Cookies</strong>和<strong>User-Agent</strong>两部分，而请求参数中出现了显眼的<strong>pos</strong>参数。通过翻页测试，我们发现pos参数符合以下规律：</p>\n<blockquote>\n<p>第一页：pos = 0<br>第二页：pos = 20<br>第三页：pos = 40</p>\n</blockquote>\n<p>因此，我们可以得出以下结论</p>\n<blockquote>\n<p>pos = 20 * 页码数 - 20</p>\n</blockquote>\n<p>因此，我们接下来就将使用<strong>Selenium</strong>进行模拟登陆，并按照上述规律对文件进行获取。</p>\n<h2 id=\"基于Selenium的数据获取\"><a href=\"#基于Selenium的数据获取\" class=\"headerlink\" title=\"基于Selenium的数据获取\"></a>基于Selenium的数据获取</h2><p>为了便于调试，我们先利用Selenium登陆QQ空间，并且对文件进行请求。然后，我们将请求的数据进行格式化存储。</p>\n<h3 id=\"登陆\"><a href=\"#登陆\" class=\"headerlink\" title=\"登陆\"></a>登陆</h3><p>我们首先创建Selenium的webdriver实例，并用它打开QQ空间登陆界面，进入目标空间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium <span class=\"keyword\">import</span> webdriver</span><br><span class=\"line\"></span><br><span class=\"line\">qq_id = <span class=\"number\">2074934525</span> <span class=\"comment\"># Change it if necessary.</span></span><br><span class=\"line\">login_url = <span class=\"string\">'https://user.qzone.qq.com'</span></span><br><span class=\"line\">target_url = <span class=\"string\">'https://user.qzone.qq.com/&#123;&#125;/311'</span>.format(qq_id)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ini_driver</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    driver = webdriver.Chrome()</span><br><span class=\"line\">    <span class=\"keyword\">return</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    driver = ini_driver()</span><br><span class=\"line\">    driver.get(login_url)</span><br><span class=\"line\">    time.sleep(<span class=\"number\">5</span>)</span><br><span class=\"line\">    driver.get(target_url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"请求资源\"><a href=\"#请求资源\" class=\"headerlink\" title=\"请求资源\"></a>请求资源</h3><p>为了获取加载资源列表，我们需要调整Selenium的<strong>DesiredCapabilities</strong>特性，从而获得目标文件的请求细节。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.desired_capabilities <span class=\"keyword\">import</span> DesiredCapabilities</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">ini_driver</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    caps = DesiredCapabilities.CHROME</span><br><span class=\"line\">    caps[<span class=\"string\">'loggingPrefs'</span>] = &#123;<span class=\"string\">'performance'</span>: <span class=\"string\">'ALL'</span>&#125;</span><br><span class=\"line\">    driver = webdriver.Chrome(desired_capabilities=caps)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> driver</span><br><span class=\"line\"></span><br><span class=\"line\">log = str(driver.get_log(<span class=\"string\">'performance'</span>))</span><br></pre></td></tr></table></figure>\n<p>通过分析请求，我们构造出请求的<strong>匹配模式</strong>，将完整的<strong>请求体</strong>匹配出来，并将完整请求拆分为 <em>prefix + page_pos + suffix</em> 的模式。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">file_prefix = <span class=\"string\">r\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_format</span><span class=\"params\">(data:str)</span>:</span></span><br><span class=\"line\">    pos = data.find(<span class=\"string\">'pos='</span>)</span><br><span class=\"line\">    prefix = file_prefix + data[:pos+<span class=\"number\">4</span>]</span><br><span class=\"line\">    suffix = data[pos+<span class=\"number\">5</span>:]</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (prefix,suffix)</span><br><span class=\"line\"></span><br><span class=\"line\">pattern = re.compile(<span class=\"string\">r'\"https://user.qzone.qq.com/proxy/domain/taotao.qq.com/cgi-bin/emotion_cgi_msglist_v6(.*?)\"'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">data = re.findall(pattern,log)[<span class=\"number\">0</span>]</span><br><span class=\"line\">prefix,suffix = get_format(data)</span><br></pre></td></tr></table></figure>\n<p>此时，我们即可使用如下方式获得某一页的说说内容。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">page_pos = str(<span class=\"number\">0</span>)</span><br><span class=\"line\">content_url = prefix + page_pos + suffix</span><br><span class=\"line\">content = driver.get(content_url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"格式化与存储\"><a href=\"#格式化与存储\" class=\"headerlink\" title=\"格式化与存储\"></a>格式化与存储</h3><p>上一步提取出的<strong>content</strong>为原始的目标文件。我们需要将其格式化为符合<strong>json</strong>规则的代码，并将其存储在文件中。</p>\n<p>我们先利用字符串切片，除去开头结尾的无关字符。剩余内容为符合json规则的字符串，可以使用<code>json.loads</code>将其转化为json类型。此外，所有的说说内容都存放在<code>msglist</code>字段中。我们将其提取出来。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_msg_list</span><span class=\"params\">(content:str)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(content[<span class=\"number\">17</span>:<span class=\"number\">-2</span>])[<span class=\"string\">'msglist'</span>]</span><br></pre></td></tr></table></figure>\n<p>接着，由于<code>msglist</code>字段中存在着大量的无关数据。我们用<code>msglist</code>字段中信息的有效部分构造<code>new_msg</code>，将它存放在字典中。</p>\n<blockquote>\n<p>因为每条说说的发送时间唯一，我们以说说的timestamp(时间戳)属性作为字典索引。</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">msglist = dict()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_raw_msglist</span><span class=\"params\">(raw_msglist:dict)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> raw_msglist <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"keyword\">for</span> msg <span class=\"keyword\">in</span> raw_msglist:</span><br><span class=\"line\">            new_msg = dict()</span><br><span class=\"line\">            new_msg[<span class=\"string\">'content'</span>] = msg[<span class=\"string\">'content'</span>]</span><br><span class=\"line\">            new_msg[<span class=\"string\">'commentlist'</span>] = list()</span><br><span class=\"line\">            <span class=\"keyword\">if</span> msg[<span class=\"string\">'commentlist'</span>] <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">                <span class=\"keyword\">for</span> comment <span class=\"keyword\">in</span> msg[<span class=\"string\">'commentlist'</span>]:</span><br><span class=\"line\">                    new_msg[<span class=\"string\">'commentlist'</span>].append(</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                                <span class=\"string\">'content'</span> : comment[<span class=\"string\">'content'</span>],</span><br><span class=\"line\">                                <span class=\"string\">'time'</span> : comment[<span class=\"string\">'create_time'</span>],</span><br><span class=\"line\">                                <span class=\"string\">'name'</span> : comment[<span class=\"string\">'name'</span>]</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    )</span><br><span class=\"line\">            msglist[msg[<span class=\"string\">'created_time'</span>]] = new_msg</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<p>此时，<code>msglist</code>即为我们需要的说说内容数据。我们将其保存在本地文件中。</p>\n<blockquote>\n<p>为了能够正常保存中文数据，我们应当用UTF-8编码写入文件，并且在<code>json.dumps</code>方法中增加<code>ensure_ascii=False</code>参数。</p>\n</blockquote>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">with</span> open(<span class=\"string\">\"&#123;&#125;.json\"</span>.format(qq_id),<span class=\"string\">'w+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(json.dumps(msglist,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<p>通过遍历<code>page_pos</code>，我们即可完成对数据的自动获取工作。</p>\n<h2 id=\"用Requests实现多进程获取\"><a href=\"#用Requests实现多进程获取\" class=\"headerlink\" title=\"用Requests实现多进程获取\"></a>用Requests实现多进程获取</h2><p>由于Selenium的特性，我们一次只能获取一页数据。这种单进程模式对数据获取速度产生了较大的限制。此外，基于可视页面的ChromeDriver对系统资源的占用也较多。虽然可以通过<strong>headless</strong>启动或换用<strong>PhantomJS</strong>进行优化，但我们决定采用<strong>Requests+Multiprocessing</strong>的方法实现对数据的多进程获取。</p>\n<h3 id=\"构造Header\"><a href=\"#构造Header\" class=\"headerlink\" title=\"构造Header\"></a>构造Header</h3><p>在分析网页内容时，我们观察了请求<code>emotion_cgi_msglist_v6</code>时的Header格式。我们首先构造出header的<strong>User-Agent</strong>部分。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User_Agent = <span class=\"string\">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.108 Safari/537.36'</span></span><br><span class=\"line\"></span><br><span class=\"line\">headers = &#123;</span><br><span class=\"line\">    <span class=\"string\">'User-Agent'</span> : User_Agent</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>接着，我们对<strong>Cookies</strong>进行传递。我们利用<code>driver.get_cookies()</code>方法获得driver携带的所有cookie，并将其处理后保存为<code>qzone_cookies</code>字典。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qzone_cookies = dict()</span><br><span class=\"line\"><span class=\"keyword\">for</span> item <span class=\"keyword\">in</span> driver.get_cookies():</span><br><span class=\"line\">    qzone_cookies[item[<span class=\"string\">\"name\"</span>]] = item[<span class=\"string\">\"value\"</span>]</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在Cookies保存完后，可用<code>driver.quit()</code>退出webdriver，减少资源占用。</p>\n</blockquote>\n<h3 id=\"构造请求方法\"><a href=\"#构造请求方法\" class=\"headerlink\" title=\"构造请求方法\"></a>构造请求方法</h3><p>为了便于用Multiprocessing进行多进程处理，我们先创建一个<code>Requests.session</code>，然后重写<code>get_msg_list</code>方法，将上一步中构造的Header与Cookies作为参数传递进去。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> requests</span><br><span class=\"line\"></span><br><span class=\"line\">session = requests.session()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_msg_list</span><span class=\"params\">(url:str,headers,qzone_cookies)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[<span class=\"number\">17</span>:<span class=\"number\">-2</span>])[<span class=\"string\">'msglist'</span>]</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置进程池\"><a href=\"#配置进程池\" class=\"headerlink\" title=\"配置进程池\"></a>配置进程池</h3><p>接下来，我们创建Multiprocessing的<strong>进程池(Pool)</strong>。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process_number = 8</span><br><span class=\"line\">pos_pool = multiprocessing.Pool(processes=process_number)</span><br></pre></td></tr></table></figure>\n<p>为了便于自动分配进程，我们构造<code>url_list</code>为获取地址的列表。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">construct_url_list</span><span class=\"params\">(prefix:str,suffix:str,times:int)</span>:</span></span><br><span class=\"line\">    url_list = list()</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> range(<span class=\"number\">0</span>,times):</span><br><span class=\"line\">        url_list.append(prefix+str(i*<span class=\"number\">20</span>)+suffix)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> url_list</span><br><span class=\"line\"></span><br><span class=\"line\">page_number = <span class=\"number\">10</span> <span class=\"comment\"># Change it if necessary.</span></span><br><span class=\"line\">url_list = construct_url_list(prefix,suffix,page_number)</span><br></pre></td></tr></table></figure>\n<p>在前两项准备工作结束后，我们就可以对进程池进行任务指派了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for url in url_list:</span><br><span class=\"line\">    pos_pool.apply_async(get_msg_list,args=(url,headers,qzone_cookies),callback=process_raw_msglist)</span><br><span class=\"line\">print(&quot;Start&quot;)</span><br><span class=\"line\">pos_pool.close()</span><br><span class=\"line\">pos_pool.join()</span><br><span class=\"line\">print(&apos;Done&apos;)</span><br></pre></td></tr></table></figure>\n<p>进程池会自动协调内部的进程，为每一个进程分配一个任务（此处为获取<code>url</code>的文件数据，在格式化后存入<code>msglist</code>字典中），并在任务结束后分配新的任务，直到<code>url_list</code>被完全遍历。</p>\n<p>对于进程数为8的进程池，每秒可以获取约8~10页，即150~200条说说内容。现在，主要的工作已经完成了。</p>\n<h2 id=\"功能完善\"><a href=\"#功能完善\" class=\"headerlink\" title=\"功能完善\"></a>功能完善</h2><p>在完成了主要功能的制作后，我们对程序的功能进行完善。</p>\n<h3 id=\"在登陆后自动跳转\"><a href=\"#在登陆后自动跳转\" class=\"headerlink\" title=\"在登陆后自动跳转\"></a>在登陆后自动跳转</h3><p>我们刚刚使用<code>sleep(5)</code>作为登陆延时。但是，跳转到目标空间应该在登陆后自动进行。为此，我们引入selenium的<strong>WebDriverWait</strong>功能，在登陆后（即网页标题变化为 <em>xxx.qzone.com</em> 后）自动跳转至目标空间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.common.desired_capabilities <span class=\"keyword\">import</span> DesiredCapabilities</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support <span class=\"keyword\">import</span> expected_conditions <span class=\"keyword\">as</span> EC</span><br><span class=\"line\"><span class=\"keyword\">from</span> selenium.webdriver.support.ui <span class=\"keyword\">import</span> WebDriverWait</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    driver = ini_driver()</span><br><span class=\"line\">    driver.get(login_url)</span><br><span class=\"line\">    WebDriverWait(driver,<span class=\"number\">60</span>).until(EC.title_contains(<span class=\"string\">\"qzone\"</span>))</span><br><span class=\"line\">    driver.get(target_url)</span><br></pre></td></tr></table></figure>\n<h3 id=\"自动获取页面数量\"><a href=\"#自动获取页面数量\" class=\"headerlink\" title=\"自动获取页面数量\"></a>自动获取页面数量</h3><p>先前的程序中，<code>url_list</code>的大小需要手动输入。对于理想的程序，<code>url_list</code>的大小应为说说页面的实际数量。通过观察，我们主要到目标说说的数量存放于<code>emotion_cgi_msglist_v6</code>文件的<code>total</code>字段中。由于一页最多有20条说说，我们可以用说说总数算出页面的数量。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> math <span class=\"keyword\">import</span> ceil</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get_total</span><span class=\"params\">(url:str,headers,qzone_cookies)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> json.loads(session.get(url,headers=headers,cookies=qzone_cookies).text[<span class=\"number\">17</span>:<span class=\"number\">-2</span>])[<span class=\"string\">'total'</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">global</span> page_number</span><br><span class=\"line\">page_number = <span class=\"number\">0</span> <span class=\"comment\"># Get all pages unless otherwise specified.</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> page_number == <span class=\"number\">0</span>:</span><br><span class=\"line\">    page_number = ceil(get_total(prefix+<span class=\"string\">\"0\"</span>+suffix,headers,qzone_cookies)/<span class=\"number\">20</span>)</span><br></pre></td></tr></table></figure>\n<h3 id=\"估计剩余时间\"><a href=\"#估计剩余时间\" class=\"headerlink\" title=\"估计剩余时间\"></a>估计剩余时间</h3><p>在获取一定数量的页面数据，我们可以大致计算出获取每个页面所需要的时间，并借此算出预估的剩余时间。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> time <span class=\"keyword\">import</span> time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">global</span> counter</span><br><span class=\"line\">counter = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">process_raw_msglist</span><span class=\"params\">(raw_msglist:dict)</span>:</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> raw_msglist <span class=\"keyword\">is</span> <span class=\"keyword\">not</span> <span class=\"literal\">None</span>:</span><br><span class=\"line\">        <span class=\"comment\"># Some duplicate code are left out.</span></span><br><span class=\"line\">        <span class=\"keyword\">global</span> counter,page_number</span><br><span class=\"line\">        counter += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> counter&gt;<span class=\"number\">20</span>:</span><br><span class=\"line\">            <span class=\"keyword\">global</span> start_time</span><br><span class=\"line\">            print(<span class=\"string\">\"&#123;:d&#125; of &#123;:d&#125; finished.(About &#123;:.3f&#125;s left.)\"</span>.format(counter,page_number,calc_time(start_time)))</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            print(<span class=\"string\">\"&#123;:d&#125; of &#123;:d&#125; finished.\"</span>.format(counter,page_number))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">None</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">calc_time</span><span class=\"params\">(start_time)</span>:</span></span><br><span class=\"line\">    consumed_time = time()-start_time</span><br><span class=\"line\">    <span class=\"keyword\">global</span> counter,page_number</span><br><span class=\"line\">    per_time = consumed_time/counter</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (page_number-counter)*per_time</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</span><br><span class=\"line\">    <span class=\"comment\"># Some duplicate code are left out.</span></span><br><span class=\"line\">    print(<span class=\"string\">\"Start\"</span>)</span><br><span class=\"line\">    start_time = time()</span><br></pre></td></tr></table></figure>\n<h3 id=\"大文件分割\"><a href=\"#大文件分割\" class=\"headerlink\" title=\"大文件分割\"></a>大文件分割</h3><p>由于较大的数据集不便于网络传输，我们可以将生成的说说内容文件按一定的容量进行拆分。经过验证，40000条说说的大小约为30~40MB。以下给出拆分脚本的代码，供读者参考。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> json</span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\">split_size = <span class=\"number\">40000</span> <span class=\"comment\"># Change it if necessary</span></span><br><span class=\"line\">name = <span class=\"string\">\"NJU_BBQ\"</span> <span class=\"comment\"># Change it if necessary</span></span><br><span class=\"line\"></span><br><span class=\"line\">data_path = sys.path[<span class=\"number\">0</span>] + <span class=\"string\">\"/data/\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> open(data_path + <span class=\"string\">\"&#123;&#125;.json\"</span>.format(name),<span class=\"string\">'r'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    json_data = json.loads(f.read())</span><br><span class=\"line\"></span><br><span class=\"line\">new_data = dict()</span><br><span class=\"line\"><span class=\"keyword\">for</span> index <span class=\"keyword\">in</span> json_data:</span><br><span class=\"line\">    new_data[index] = json_data[index]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> len(new_data)&gt;split_size:</span><br><span class=\"line\">        <span class=\"keyword\">with</span> open(data_path + <span class=\"string\">\"&#123;&#125;_part_&#123;:d&#125;.json\"</span>.format(name,count),<span class=\"string\">'w+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">            f.write(json.dumps(new_data,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"literal\">False</span>))</span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\">        new_data = dict()</span><br><span class=\"line\"><span class=\"keyword\">if</span> count!=<span class=\"number\">0</span>:</span><br><span class=\"line\">    <span class=\"keyword\">with</span> open(data_path + <span class=\"string\">\"&#123;&#125;_part_&#123;:d&#125;.json\"</span>.format(name,count),<span class=\"string\">'w+'</span>,encoding=<span class=\"string\">'utf-8'</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">        f.write(json.dumps(new_data,indent=<span class=\"number\">4</span>,ensure_ascii=<span class=\"literal\">False</span>))</span><br></pre></td></tr></table></figure>\n<h2 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h2><p>本教程的完整项目代码已在Github开源。地址如下：<a href=\"https://github.com/EricZhu-42/QQ_Zone_Spider\" target=\"_blank\" rel=\"noopener\">项目地址</a></p>"},{"title":"Notes on \"Style Guide for Python Code\"","date":"2019-02-25T16:00:00.000Z","_content":"**This article is an abstract of *Style Guide for Python Code* by python-dev.**\n\nTo see the full document, click [HERE](https://www.python.org/dev/peps/pep-0008/)\n\n## Basic Principles\n\n> Code is read much more often than it is written. **Readability counts.**\n\nThe guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.\n\nConsistency with this style guide is important. Consistency within a project is more important. **Consistency within one module or function is the most important.**\n\nIn particular: do not break backwards compatibility just to comply with this article!\n\n## Code Lay-out\n\n1. **Indentation**  \n\n   Use 4 spaces per indentation level.  \n\n   <!-- more -->\n\n   Example:  \n\n    ```python\n    # Aligned with opening delimiter.\n    foo = long_function_name(var_one, var_two,\n                             var_three, var_four)\n   \n    # Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.\n    def long_function_name(\n            var_one, var_two, var_three,\n            var_four):\n        print(var_one)\n   \n    # Hanging indents should add a level.\n    foo = long_function_name(\n        var_one, var_two,\n        var_three, var_four)\n    ```\n\n2. **Tabs or Spaces?**  \n\n   **Spaces are the preferred indentation method.**\n\n   Tabs should be used solely to remain consistent with code that is already indented with tabs.\n\n3. **Maximum Line Length**\n\n   Limit all lines to a maximum of **79 characters**.\n\n   For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to **72 characters**.\n\n   The preferred way of wrapping long lines is by using Python's implied **line continuation inside parentheses, brackets and braces**. \n\n   **Backslashes** may still be appropriate at times. For example, long, multiple `with`-statements cannot use implicit continuation, so backslashes are acceptable.\n\n4. **Should a Line Break Before or After a Binary Operator?**  \n\n   Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations.\n\n   ```python\n   # Easy to match operators with operands\n   income = (gross_wages\n             + taxable_interest\n             + (dividends - qualified_dividends)\n             - ira_deduction\n             - student_loan_interest)\n   ```\n\n5. **Blank Lines**    \n\n     Surround **top-level function and class definitions** with **two** blank lines.\n\n     **Method definitions inside a class** are surrounded by **a single** blank line.\n\n     Use blank lines in functions, sparingly, to **indicate logical sections**.\n\n6. **Source File Encoding**\n\n   Code in the core Python distribution should always use **UTF-8** (or ASCII in Python 2).  \n\n7. **Imports**  \n\n   Imports should usually be on separate lines:  \n\n    ```python\n    import os\n    import sys\n    ```\n\n   It's okay to say this though:\n\n    ```python\n    from subprocess import Popen, PIPE\n    ```\n    Imports should be grouped in **the following order**:\n\n   1. Standard library imports.\n   2. Related third party imports.\n   3. Local application/library specific imports.\n\n    You should **put a blank line between each group of imports**.\n\n    Absolute imports are recommended, as they are usually more readable and tend to be better behaved.\n\n    ```python\n    from mypkg.sibling import example\n    ```\n\n    Wildcard imports (from \\<module> import *) should be **avoided**.\n\n8. **Module Level Dunder Names**  \n   Module level \"dunders\" (i.e. names with two leading and two trailing underscores) such as \\_\\_all\\_\\_, \\_\\_author\\_\\_, \\_\\_version\\_\\_, etc. should be placed after the module docstring but before any import statements except from \\_\\_future\\_\\_ imports. Python mandates that future-imports must appear in the module before any other code except docstrings:\n\n   ```python\n   \"\"\"This is the example module.\n   \n   This module does stuff.\n   \"\"\"\n   \n   from __future__ import barry_as_FLUFL\n   \n   __all__ = ['a', 'b', 'c']\n   __version__ = '0.1'\n   __author__ = 'Cardinal Biggles'\n   \n   import os\n   import sys\n   ```\n\n## String Quotes\n\n   Single-quoted strings and double-quoted strings are all acceptable.\n\n   **For triple-quoted strings, always use double quote characters.**\n\n## Whitespace in Expressions and Statements\n\n​\tAvoid extraneous whitespace in the following situations:\n\n- Immediately inside parentheses, brackets or braces.\n\n   ```python\n   Yes: spam(ham[1], {eggs: 2})\n   No:  spam( ham[ 1 ], { eggs: 2 } )\n   ```\n\n- Between a trailing comma and a following close parenthesis.\n\n   ```python\n   Yes: foo = (0,)\n   No:  bar = (0, )\n   ```\n\n- Immediately before a comma, semicolon, or colon:\n\n  ```python\n  Yes: if x == 4: print x, y; x, y = y, x\n  No:  if x == 4 : print x , y ; x , y = y , x\n  ```\n- However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. **Exception: when a slice parameter is omitted, the space is omitted.**\n\n  ```python\n  # Yes:\n  ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n  ham[lower:upper], ham[lower:upper:], ham[lower::step]\n  ham[lower+offset : upper+offset]\n  ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n  ham[lower + offset : upper + offset]\n  \n  # No:\n  ham[lower + offset:upper + offset]\n  ham[1: 9], ham[1 :9], ham[1:9 :3]\n  ham[lower : : upper]\n  ham[ : upper]\n  ```\n\n- Immediately before the open parenthesis that starts the argument list of a function call:\n\n  ```python\n  Yes: spam(1)\n  No:  spam (1)\n  ```\n\n- Immediately before the open parenthesis that starts an indexing or slicing:\n\n  ```python\n  Yes: dct['key'] = lst[index]\n  No:  dct ['key'] = lst [index]\n  ```\n\n- More than one space around an assignment (or other) operator to align it with another.\n\n  ```python\n  # Yes:\n  x = 1\n  y = 2\n  long_variable = 3\n  \n  # No:\n  x             = 1\n  y             = 2\n  long_variable = 3\n  ```\n\n- Avoid trailing whitespace anywhere. Because it's usually invisible, it can be confusing.\n\n- Always surround **these** binary operators with a single space on either side: \n  - assignment (=), augmented assignment (+=, -=, etc.)   \n  - comparisons (==, <, >, !=, <>, <=, >=, in, not in, is, is not)   \t\n  - Booleans (and, or, not)\n\n- If operators with different priorities are used, **consider adding whitespace around the operators with the lowest priority(ies).**   \n\tHowever, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator.\n\n\t```python\n\t#Yes:\n\ti = i + 1\n\tsubmitted += 1\n\tx = x*2 - 1\n\thypot2 = x*x + y*y\n\tc = (a+b) * (a-b)\n\t```\n\n- **Compound statements (multiple statements on the same line) are generally discouraged.**\n- While sometimes it's okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.\n\n## When to Use Trailing Commas\n\n**When a list of values, arguments or imported items is expected to be extended over time, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line.**\n\n```python\nFILES = [\n    'setup.cfg',\n    'tox.ini',\n    ]\ninitialize(FILES,\n       error=True,\n       )\n```\n\n## Comments\n\nComments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!\n\nComments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (**never alter the case of identifiers!**).\n\n1. **Block Comments**\n\n   **Each line of a block comment starts with a `#` and a single space** (unless it is indented text inside the comment).\n\n2. **Inline Comments**\n\n   **Use inline comments sparingly.**\n\n   Inline comments are unnecessary and in fact distracting if they state the obvious.\n\n3. **Documentation Strings**\n\n   Write docstrings for **all** public modules, functions, classes, and methods. \n\n   Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. **This comment should appear after the `def` line.**\n\n   Note that most importantly, the `\"\"\"` that ends a multiline docstring should be on a line by itself:\n\n    ```python\n    \"\"\"Return a foobang\n   \n    Optional plotz says to frobnicate the bizbaz first.\n    \"\"\"\n    ```\n\n   For one liner docstrings, please keep the closing `\"\"\"` on the same line.\n\n## Naming Conventions\n\n1. **Overriding Principle**\n\n   Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation.\n\n2. **Descriptive: Naming Styles**\n\n   The following special forms using leading or trailing underscores are recognized.\n\n   - `_single_leading_underscore`: **weak \"internal use\" indicator**.  \n     E.g. `from M import *` does not import objects whose name starts with an underscore.\n\n   - `single_trailing_underscore_`: used by convention to **avoid conflicts with Python keyword**.\n   - `__double_leading_underscore`: when naming **a class attribute (not intended for subclass to use)**, invokes name mangling (inside class FooBar, `__boo` becomes`_FooBar__boo`) \n   - `__double_leading_and_trailing_underscore__`: \"magic\" objects or attributes that live in user-controlled namespaces. E.g. `__init__`, `__import__` or `__file__`. **Never invent such names**; only use them as documented.\n\n3. **Prescriptive: Naming Conventions**\n\n   1. **Names to Avoid**\n\n      Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names.\n\n   2. **ASCII Compatibility**\n\n      Identifiers used in the standard library must be ASCII compatible\n\n   3. **Package and Module Names**\n\n      **Python packages should have short, all-lowercase names, although the use of underscores is discouraged.**\n\n      When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. `_socket`).\n\n   4. **Class Names**\n\n      **Class names should normally use the CapWords convention.**\n\n   5. **Exception Names**\n\n      Because exceptions should be classes, the class naming convention applies here.  \n      However, **you should use the suffix \"Error\" on your exception names** (if the exception actually is an error).\n\n   6. **Global Variable Names**\n\n      The conventions are about the same as those for functions.\n\n      Modules that are designed for use via `from M import *` should **use the `__all__` mechanism** to prevent exporting globals.\n\n   7. **Function and Variable Names**\n\n      **Function names should be lowercase, with words separated by underscores as necessary to improve readability.**\n\n      Variable names follow the same convention as function names.\n\n   8. **Function and Method Arguments**\n\n      **Always** use `self` for the first argument to instance methods.\n\n      **Always** use `cls` for the first argument to class methods.\n\n      If a function argument's name clashes with a reserved keyword, it is generally better to **append a single trailing underscore** rather than use an abbreviation or spelling corruption. Thus `class_` is better than `clss`. (Perhaps better is to avoid such clashes by using a synonym.)\n\n   9. **Method Names and Instance Variables**\n\n      Use the function naming rules: **lowercase with words separated by underscores** as necessary to improve readability.\n\n      Use one leading underscore only for non-public methods and instance variables.\n\n   10. **Constants**\n\n       Constants are usually defined on a module level and written in **all capital letters with underscores separating words**. Examples include `MAX_OVERFLOW` and `TOTAL`.\n\n   11. **Designing for Inheritance**\n\n       Always decide whether a class's methods and instance variables  should be public or non-public. **If in doubt, choose non-public**; it's easier to make it public later than to make a public attribute non-public.\n\n        - **Public attributes should have no leading underscores.**\n        - If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.\n        - If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with **double leading underscores and no trailing underscores**.\n\n4. **Public and Internal Interfaces**\n\n   **Documented interfaces are considered public**, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. **All undocumented interfaces should be assumed to be internal**.\n\n   To better support introspection, **modules should explicitly declare the names in their public API using the `__all__` attribute.** Setting `__all__` to an empty list indicates that the module has no public API.\n\n   Even with `__all__` set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still **be prefixed with a single leading underscore**.\n\n## Programming Recommendations\n\n- Code should be written in a way that does not disadvantage other implementations of Python.\n\n- **Comparisons to singletons like None should always be done with `is` or `is not`, never the equality operators.**\n\n  Also, beware of writing `if x` when you really mean `if x is not None` (i.e. an empty list will be considered as False but not None).\n\n- Use `is not` operator rather than `not ... is`. \n\n- Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.\n\n   ```python\n   #Yes:\n   def f(x): return 2*x\n   \n   #No:\n   f = lambda x: 2*x\n   ```\n\n- **Derive exceptions from `Exception` rather than `BaseException`.** Direct inheritance from `BaseException` is reserved for exceptions where catching them is almost always the wrong thing to do.\n\n- **When catching exceptions, mention specific exceptions whenever possible** instead of using a bare `except`.\n\n- For all try/except clauses, limit the `try` clause to the **absolute minimum amount of code** necessary.\n\n- Be consistent in return statements.If any return statement returns an expression, any return statements where **no value is returned should explicitly state this as `return None**`, and an explicit return statement should be present at the end of the function (if reachable).\n\n- Use string methods instead of the string module.\n\n- Use `''.startswith()` and `''.endswith()` instead of string slicing to check for prefixes or suffixes.\n\n- Object type comparisons should always use **isinstance() instead of comparing types** directly.\n\n- For sequences, (strings, lists, tuples), use the fact that empty sequences are false.\n\n- **Don't compare boolean values to True or False** using `==`.\n\n  ```python\n  Yes:   if greeting:\n  No:    if greeting == True:\n  Worse: if greeting is True:\n  ```","source":"_posts/Style-Guide-for-Python-Code.md","raw":"---\ntitle: Notes on \"Style Guide for Python Code\"\ndate: 2019-02-26\ntags: [python]\n---\n**This article is an abstract of *Style Guide for Python Code* by python-dev.**\n\nTo see the full document, click [HERE](https://www.python.org/dev/peps/pep-0008/)\n\n## Basic Principles\n\n> Code is read much more often than it is written. **Readability counts.**\n\nThe guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.\n\nConsistency with this style guide is important. Consistency within a project is more important. **Consistency within one module or function is the most important.**\n\nIn particular: do not break backwards compatibility just to comply with this article!\n\n## Code Lay-out\n\n1. **Indentation**  \n\n   Use 4 spaces per indentation level.  \n\n   <!-- more -->\n\n   Example:  \n\n    ```python\n    # Aligned with opening delimiter.\n    foo = long_function_name(var_one, var_two,\n                             var_three, var_four)\n   \n    # Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.\n    def long_function_name(\n            var_one, var_two, var_three,\n            var_four):\n        print(var_one)\n   \n    # Hanging indents should add a level.\n    foo = long_function_name(\n        var_one, var_two,\n        var_three, var_four)\n    ```\n\n2. **Tabs or Spaces?**  \n\n   **Spaces are the preferred indentation method.**\n\n   Tabs should be used solely to remain consistent with code that is already indented with tabs.\n\n3. **Maximum Line Length**\n\n   Limit all lines to a maximum of **79 characters**.\n\n   For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to **72 characters**.\n\n   The preferred way of wrapping long lines is by using Python's implied **line continuation inside parentheses, brackets and braces**. \n\n   **Backslashes** may still be appropriate at times. For example, long, multiple `with`-statements cannot use implicit continuation, so backslashes are acceptable.\n\n4. **Should a Line Break Before or After a Binary Operator?**  \n\n   Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations.\n\n   ```python\n   # Easy to match operators with operands\n   income = (gross_wages\n             + taxable_interest\n             + (dividends - qualified_dividends)\n             - ira_deduction\n             - student_loan_interest)\n   ```\n\n5. **Blank Lines**    \n\n     Surround **top-level function and class definitions** with **two** blank lines.\n\n     **Method definitions inside a class** are surrounded by **a single** blank line.\n\n     Use blank lines in functions, sparingly, to **indicate logical sections**.\n\n6. **Source File Encoding**\n\n   Code in the core Python distribution should always use **UTF-8** (or ASCII in Python 2).  \n\n7. **Imports**  \n\n   Imports should usually be on separate lines:  \n\n    ```python\n    import os\n    import sys\n    ```\n\n   It's okay to say this though:\n\n    ```python\n    from subprocess import Popen, PIPE\n    ```\n    Imports should be grouped in **the following order**:\n\n   1. Standard library imports.\n   2. Related third party imports.\n   3. Local application/library specific imports.\n\n    You should **put a blank line between each group of imports**.\n\n    Absolute imports are recommended, as they are usually more readable and tend to be better behaved.\n\n    ```python\n    from mypkg.sibling import example\n    ```\n\n    Wildcard imports (from \\<module> import *) should be **avoided**.\n\n8. **Module Level Dunder Names**  \n   Module level \"dunders\" (i.e. names with two leading and two trailing underscores) such as \\_\\_all\\_\\_, \\_\\_author\\_\\_, \\_\\_version\\_\\_, etc. should be placed after the module docstring but before any import statements except from \\_\\_future\\_\\_ imports. Python mandates that future-imports must appear in the module before any other code except docstrings:\n\n   ```python\n   \"\"\"This is the example module.\n   \n   This module does stuff.\n   \"\"\"\n   \n   from __future__ import barry_as_FLUFL\n   \n   __all__ = ['a', 'b', 'c']\n   __version__ = '0.1'\n   __author__ = 'Cardinal Biggles'\n   \n   import os\n   import sys\n   ```\n\n## String Quotes\n\n   Single-quoted strings and double-quoted strings are all acceptable.\n\n   **For triple-quoted strings, always use double quote characters.**\n\n## Whitespace in Expressions and Statements\n\n​\tAvoid extraneous whitespace in the following situations:\n\n- Immediately inside parentheses, brackets or braces.\n\n   ```python\n   Yes: spam(ham[1], {eggs: 2})\n   No:  spam( ham[ 1 ], { eggs: 2 } )\n   ```\n\n- Between a trailing comma and a following close parenthesis.\n\n   ```python\n   Yes: foo = (0,)\n   No:  bar = (0, )\n   ```\n\n- Immediately before a comma, semicolon, or colon:\n\n  ```python\n  Yes: if x == 4: print x, y; x, y = y, x\n  No:  if x == 4 : print x , y ; x , y = y , x\n  ```\n- However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. **Exception: when a slice parameter is omitted, the space is omitted.**\n\n  ```python\n  # Yes:\n  ham[1:9], ham[1:9:3], ham[:9:3], ham[1::3], ham[1:9:]\n  ham[lower:upper], ham[lower:upper:], ham[lower::step]\n  ham[lower+offset : upper+offset]\n  ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]\n  ham[lower + offset : upper + offset]\n  \n  # No:\n  ham[lower + offset:upper + offset]\n  ham[1: 9], ham[1 :9], ham[1:9 :3]\n  ham[lower : : upper]\n  ham[ : upper]\n  ```\n\n- Immediately before the open parenthesis that starts the argument list of a function call:\n\n  ```python\n  Yes: spam(1)\n  No:  spam (1)\n  ```\n\n- Immediately before the open parenthesis that starts an indexing or slicing:\n\n  ```python\n  Yes: dct['key'] = lst[index]\n  No:  dct ['key'] = lst [index]\n  ```\n\n- More than one space around an assignment (or other) operator to align it with another.\n\n  ```python\n  # Yes:\n  x = 1\n  y = 2\n  long_variable = 3\n  \n  # No:\n  x             = 1\n  y             = 2\n  long_variable = 3\n  ```\n\n- Avoid trailing whitespace anywhere. Because it's usually invisible, it can be confusing.\n\n- Always surround **these** binary operators with a single space on either side: \n  - assignment (=), augmented assignment (+=, -=, etc.)   \n  - comparisons (==, <, >, !=, <>, <=, >=, in, not in, is, is not)   \t\n  - Booleans (and, or, not)\n\n- If operators with different priorities are used, **consider adding whitespace around the operators with the lowest priority(ies).**   \n\tHowever, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator.\n\n\t```python\n\t#Yes:\n\ti = i + 1\n\tsubmitted += 1\n\tx = x*2 - 1\n\thypot2 = x*x + y*y\n\tc = (a+b) * (a-b)\n\t```\n\n- **Compound statements (multiple statements on the same line) are generally discouraged.**\n- While sometimes it's okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.\n\n## When to Use Trailing Commas\n\n**When a list of values, arguments or imported items is expected to be extended over time, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line.**\n\n```python\nFILES = [\n    'setup.cfg',\n    'tox.ini',\n    ]\ninitialize(FILES,\n       error=True,\n       )\n```\n\n## Comments\n\nComments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!\n\nComments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (**never alter the case of identifiers!**).\n\n1. **Block Comments**\n\n   **Each line of a block comment starts with a `#` and a single space** (unless it is indented text inside the comment).\n\n2. **Inline Comments**\n\n   **Use inline comments sparingly.**\n\n   Inline comments are unnecessary and in fact distracting if they state the obvious.\n\n3. **Documentation Strings**\n\n   Write docstrings for **all** public modules, functions, classes, and methods. \n\n   Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. **This comment should appear after the `def` line.**\n\n   Note that most importantly, the `\"\"\"` that ends a multiline docstring should be on a line by itself:\n\n    ```python\n    \"\"\"Return a foobang\n   \n    Optional plotz says to frobnicate the bizbaz first.\n    \"\"\"\n    ```\n\n   For one liner docstrings, please keep the closing `\"\"\"` on the same line.\n\n## Naming Conventions\n\n1. **Overriding Principle**\n\n   Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation.\n\n2. **Descriptive: Naming Styles**\n\n   The following special forms using leading or trailing underscores are recognized.\n\n   - `_single_leading_underscore`: **weak \"internal use\" indicator**.  \n     E.g. `from M import *` does not import objects whose name starts with an underscore.\n\n   - `single_trailing_underscore_`: used by convention to **avoid conflicts with Python keyword**.\n   - `__double_leading_underscore`: when naming **a class attribute (not intended for subclass to use)**, invokes name mangling (inside class FooBar, `__boo` becomes`_FooBar__boo`) \n   - `__double_leading_and_trailing_underscore__`: \"magic\" objects or attributes that live in user-controlled namespaces. E.g. `__init__`, `__import__` or `__file__`. **Never invent such names**; only use them as documented.\n\n3. **Prescriptive: Naming Conventions**\n\n   1. **Names to Avoid**\n\n      Never use the characters 'l' (lowercase letter el), 'O' (uppercase letter oh), or 'I' (uppercase letter eye) as single character variable names.\n\n   2. **ASCII Compatibility**\n\n      Identifiers used in the standard library must be ASCII compatible\n\n   3. **Package and Module Names**\n\n      **Python packages should have short, all-lowercase names, although the use of underscores is discouraged.**\n\n      When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. `_socket`).\n\n   4. **Class Names**\n\n      **Class names should normally use the CapWords convention.**\n\n   5. **Exception Names**\n\n      Because exceptions should be classes, the class naming convention applies here.  \n      However, **you should use the suffix \"Error\" on your exception names** (if the exception actually is an error).\n\n   6. **Global Variable Names**\n\n      The conventions are about the same as those for functions.\n\n      Modules that are designed for use via `from M import *` should **use the `__all__` mechanism** to prevent exporting globals.\n\n   7. **Function and Variable Names**\n\n      **Function names should be lowercase, with words separated by underscores as necessary to improve readability.**\n\n      Variable names follow the same convention as function names.\n\n   8. **Function and Method Arguments**\n\n      **Always** use `self` for the first argument to instance methods.\n\n      **Always** use `cls` for the first argument to class methods.\n\n      If a function argument's name clashes with a reserved keyword, it is generally better to **append a single trailing underscore** rather than use an abbreviation or spelling corruption. Thus `class_` is better than `clss`. (Perhaps better is to avoid such clashes by using a synonym.)\n\n   9. **Method Names and Instance Variables**\n\n      Use the function naming rules: **lowercase with words separated by underscores** as necessary to improve readability.\n\n      Use one leading underscore only for non-public methods and instance variables.\n\n   10. **Constants**\n\n       Constants are usually defined on a module level and written in **all capital letters with underscores separating words**. Examples include `MAX_OVERFLOW` and `TOTAL`.\n\n   11. **Designing for Inheritance**\n\n       Always decide whether a class's methods and instance variables  should be public or non-public. **If in doubt, choose non-public**; it's easier to make it public later than to make a public attribute non-public.\n\n        - **Public attributes should have no leading underscores.**\n        - If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.\n        - If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with **double leading underscores and no trailing underscores**.\n\n4. **Public and Internal Interfaces**\n\n   **Documented interfaces are considered public**, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. **All undocumented interfaces should be assumed to be internal**.\n\n   To better support introspection, **modules should explicitly declare the names in their public API using the `__all__` attribute.** Setting `__all__` to an empty list indicates that the module has no public API.\n\n   Even with `__all__` set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still **be prefixed with a single leading underscore**.\n\n## Programming Recommendations\n\n- Code should be written in a way that does not disadvantage other implementations of Python.\n\n- **Comparisons to singletons like None should always be done with `is` or `is not`, never the equality operators.**\n\n  Also, beware of writing `if x` when you really mean `if x is not None` (i.e. an empty list will be considered as False but not None).\n\n- Use `is not` operator rather than `not ... is`. \n\n- Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.\n\n   ```python\n   #Yes:\n   def f(x): return 2*x\n   \n   #No:\n   f = lambda x: 2*x\n   ```\n\n- **Derive exceptions from `Exception` rather than `BaseException`.** Direct inheritance from `BaseException` is reserved for exceptions where catching them is almost always the wrong thing to do.\n\n- **When catching exceptions, mention specific exceptions whenever possible** instead of using a bare `except`.\n\n- For all try/except clauses, limit the `try` clause to the **absolute minimum amount of code** necessary.\n\n- Be consistent in return statements.If any return statement returns an expression, any return statements where **no value is returned should explicitly state this as `return None**`, and an explicit return statement should be present at the end of the function (if reachable).\n\n- Use string methods instead of the string module.\n\n- Use `''.startswith()` and `''.endswith()` instead of string slicing to check for prefixes or suffixes.\n\n- Object type comparisons should always use **isinstance() instead of comparing types** directly.\n\n- For sequences, (strings, lists, tuples), use the fact that empty sequences are false.\n\n- **Don't compare boolean values to True or False** using `==`.\n\n  ```python\n  Yes:   if greeting:\n  No:    if greeting == True:\n  Worse: if greeting is True:\n  ```","slug":"Style-Guide-for-Python-Code","published":1,"updated":"2019-04-30T16:42:02.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbkt000u30uvxk6lgx24","content":"<p><strong>This article is an abstract of <em>Style Guide for Python Code</em> by python-dev.</strong></p>\n<p>To see the full document, click <a href=\"https://www.python.org/dev/peps/pep-0008/\" target=\"_blank\" rel=\"noopener\">HERE</a></p>\n<h2 id=\"Basic-Principles\"><a href=\"#Basic-Principles\" class=\"headerlink\" title=\"Basic Principles\"></a>Basic Principles</h2><blockquote>\n<p>Code is read much more often than it is written. <strong>Readability counts.</strong></p>\n</blockquote>\n<p>The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.</p>\n<p>Consistency with this style guide is important. Consistency within a project is more important. <strong>Consistency within one module or function is the most important.</strong></p>\n<p>In particular: do not break backwards compatibility just to comply with this article!</p>\n<h2 id=\"Code-Lay-out\"><a href=\"#Code-Lay-out\" class=\"headerlink\" title=\"Code Lay-out\"></a>Code Lay-out</h2><ol>\n<li><p><strong>Indentation</strong>  </p>\n<p>Use 4 spaces per indentation level.  </p>\n<a id=\"more\"></a>\n<p>Example:  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Aligned with opening delimiter.</span></span><br><span class=\"line\">foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">                         var_three, var_four)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_function_name</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_one, var_two, var_three,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_four)</span>:</span></span><br><span class=\"line\">    print(var_one)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># Hanging indents should add a level.</span></span><br><span class=\"line\">foo = long_function_name(</span><br><span class=\"line\">    var_one, var_two,</span><br><span class=\"line\">    var_three, var_four)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Tabs or Spaces?</strong>  </p>\n<p><strong>Spaces are the preferred indentation method.</strong></p>\n<p>Tabs should be used solely to remain consistent with code that is already indented with tabs.</p>\n</li>\n<li><p><strong>Maximum Line Length</strong></p>\n<p>Limit all lines to a maximum of <strong>79 characters</strong>.</p>\n<p>For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to <strong>72 characters</strong>.</p>\n<p>The preferred way of wrapping long lines is by using Python’s implied <strong>line continuation inside parentheses, brackets and braces</strong>. </p>\n<p><strong>Backslashes</strong> may still be appropriate at times. For example, long, multiple <code>with</code>-statements cannot use implicit continuation, so backslashes are acceptable.</p>\n</li>\n<li><p><strong>Should a Line Break Before or After a Binary Operator?</strong>  </p>\n<p>Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Easy to match operators with operands</span></span><br><span class=\"line\">income = (gross_wages</span><br><span class=\"line\">          + taxable_interest</span><br><span class=\"line\">          + (dividends - qualified_dividends)</span><br><span class=\"line\">          - ira_deduction</span><br><span class=\"line\">          - student_loan_interest)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Blank Lines</strong>    </p>\n<p>  Surround <strong>top-level function and class definitions</strong> with <strong>two</strong> blank lines.</p>\n<p>  <strong>Method definitions inside a class</strong> are surrounded by <strong>a single</strong> blank line.</p>\n<p>  Use blank lines in functions, sparingly, to <strong>indicate logical sections</strong>.</p>\n</li>\n<li><p><strong>Source File Encoding</strong></p>\n<p>Code in the core Python distribution should always use <strong>UTF-8</strong> (or ASCII in Python 2).  </p>\n</li>\n<li><p><strong>Imports</strong>  </p>\n<p>Imports should usually be on separate lines:  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br></pre></td></tr></table></figure>\n<p>It’s okay to say this though:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure>\n<p> Imports should be grouped in <strong>the following order</strong>:</p>\n<ol>\n<li>Standard library imports.</li>\n<li>Related third party imports.</li>\n<li><p>Local application/library specific imports.</p>\n<p>You should <strong>put a blank line between each group of imports</strong>.</p>\n<p>Absolute imports are recommended, as they are usually more readable and tend to be better behaved.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mypkg.sibling <span class=\"keyword\">import</span> example</span><br></pre></td></tr></table></figure>\n<p>Wildcard imports (from \\<module> import *) should be <strong>avoided</strong>.</module></p>\n</li>\n</ol>\n</li>\n<li><p><strong>Module Level Dunder Names</strong><br>Module level “dunders” (i.e. names with two leading and two trailing underscores) such as __all__, __author__, __version__, etc. should be placed after the module docstring but before any import statements except from __future__ imports. Python mandates that future-imports must appear in the module before any other code except docstrings:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"This is the example module.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This module does stuff.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> barry_as_FLUFL</span><br><span class=\"line\"></span><br><span class=\"line\">__all__ = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">__version__ = <span class=\"string\">'0.1'</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'Cardinal Biggles'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"String-Quotes\"><a href=\"#String-Quotes\" class=\"headerlink\" title=\"String Quotes\"></a>String Quotes</h2><p>   Single-quoted strings and double-quoted strings are all acceptable.</p>\n<p>   <strong>For triple-quoted strings, always use double quote characters.</strong></p>\n<h2 id=\"Whitespace-in-Expressions-and-Statements\"><a href=\"#Whitespace-in-Expressions-and-Statements\" class=\"headerlink\" title=\"Whitespace in Expressions and Statements\"></a>Whitespace in Expressions and Statements</h2><p>​    Avoid extraneous whitespace in the following situations:</p>\n<ul>\n<li><p>Immediately inside parentheses, brackets or braces.</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(ham[<span class=\"number\">1</span>], &#123;eggs: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">No:  spam( ham[ <span class=\"number\">1</span> ], &#123; eggs: <span class=\"number\">2</span> &#125; )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Between a trailing comma and a following close parenthesis.</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: foo = (<span class=\"number\">0</span>,)</span><br><span class=\"line\">No:  bar = (<span class=\"number\">0</span>, )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Immediately before a comma, semicolon, or colon:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">if</span> x == <span class=\"number\">4</span>: <span class=\"keyword\">print</span> x, y; x, y = y, x</span><br><span class=\"line\">No:  <span class=\"keyword\">if</span> x == <span class=\"number\">4</span> : <span class=\"keyword\">print</span> x , y ; x , y = y , x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. <strong>Exception: when a slice parameter is omitted, the space is omitted.</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Yes:</span></span><br><span class=\"line\">ham[<span class=\"number\">1</span>:<span class=\"number\">9</span>], ham[<span class=\"number\">1</span>:<span class=\"number\">9</span>:<span class=\"number\">3</span>], ham[:<span class=\"number\">9</span>:<span class=\"number\">3</span>], ham[<span class=\"number\">1</span>::<span class=\"number\">3</span>], ham[<span class=\"number\">1</span>:<span class=\"number\">9</span>:]</span><br><span class=\"line\">ham[lower:upper], ham[lower:upper:], ham[lower::step]</span><br><span class=\"line\">ham[lower+offset : upper+offset]</span><br><span class=\"line\">ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]</span><br><span class=\"line\">ham[lower + offset : upper + offset]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># No:</span></span><br><span class=\"line\">ham[lower + offset:upper + offset]</span><br><span class=\"line\">ham[<span class=\"number\">1</span>: <span class=\"number\">9</span>], ham[<span class=\"number\">1</span> :<span class=\"number\">9</span>], ham[<span class=\"number\">1</span>:<span class=\"number\">9</span> :<span class=\"number\">3</span>]</span><br><span class=\"line\">ham[lower : : upper]</span><br><span class=\"line\">ham[ : upper]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Immediately before the open parenthesis that starts the argument list of a function call:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(<span class=\"number\">1</span>)</span><br><span class=\"line\">No:  spam (<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Immediately before the open parenthesis that starts an indexing or slicing:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: dct[<span class=\"string\">'key'</span>] = lst[index]</span><br><span class=\"line\">No:  dct [<span class=\"string\">'key'</span>] = lst [index]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>More than one space around an assignment (or other) operator to align it with another.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Yes:</span></span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\">y = <span class=\"number\">2</span></span><br><span class=\"line\">long_variable = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># No:</span></span><br><span class=\"line\">x             = <span class=\"number\">1</span></span><br><span class=\"line\">y             = <span class=\"number\">2</span></span><br><span class=\"line\">long_variable = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid trailing whitespace anywhere. Because it’s usually invisible, it can be confusing.</p>\n</li>\n<li><p>Always surround <strong>these</strong> binary operators with a single space on either side: </p>\n<ul>\n<li>assignment (=), augmented assignment (+=, -=, etc.)   </li>\n<li>comparisons (==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not)       </li>\n<li>Booleans (and, or, not)</li>\n</ul>\n</li>\n<li><p>If operators with different priorities are used, <strong>consider adding whitespace around the operators with the lowest priority(ies).</strong><br>  However, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Yes:</span></span><br><span class=\"line\">i = i + <span class=\"number\">1</span></span><br><span class=\"line\">submitted += <span class=\"number\">1</span></span><br><span class=\"line\">x = x*<span class=\"number\">2</span> - <span class=\"number\">1</span></span><br><span class=\"line\">hypot2 = x*x + y*y</span><br><span class=\"line\">c = (a+b) * (a-b)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Compound statements (multiple statements on the same line) are generally discouraged.</strong></p>\n</li>\n<li>While sometimes it’s okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.</li>\n</ul>\n<h2 id=\"When-to-Use-Trailing-Commas\"><a href=\"#When-to-Use-Trailing-Commas\" class=\"headerlink\" title=\"When to Use Trailing Commas\"></a>When to Use Trailing Commas</h2><p><strong>When a list of values, arguments or imported items is expected to be extended over time, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line.</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILES = [</span><br><span class=\"line\">    <span class=\"string\">'setup.cfg'</span>,</span><br><span class=\"line\">    <span class=\"string\">'tox.ini'</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">initialize(FILES,</span><br><span class=\"line\">       error=<span class=\"literal\">True</span>,</span><br><span class=\"line\">       )</span><br></pre></td></tr></table></figure>\n<h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><p>Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!</p>\n<p>Comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (<strong>never alter the case of identifiers!</strong>).</p>\n<ol>\n<li><p><strong>Block Comments</strong></p>\n<p><strong>Each line of a block comment starts with a <code>#</code> and a single space</strong> (unless it is indented text inside the comment).</p>\n</li>\n<li><p><strong>Inline Comments</strong></p>\n<p><strong>Use inline comments sparingly.</strong></p>\n<p>Inline comments are unnecessary and in fact distracting if they state the obvious.</p>\n</li>\n<li><p><strong>Documentation Strings</strong></p>\n<p>Write docstrings for <strong>all</strong> public modules, functions, classes, and methods. </p>\n<p>Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. <strong>This comment should appear after the <code>def</code> line.</strong></p>\n<p>Note that most importantly, the <code>&quot;&quot;&quot;</code> that ends a multiline docstring should be on a line by itself:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"Return a foobang</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">Optional plotz says to frobnicate the bizbaz first.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<p>For one liner docstrings, please keep the closing <code>&quot;&quot;&quot;</code> on the same line.</p>\n</li>\n</ol>\n<h2 id=\"Naming-Conventions\"><a href=\"#Naming-Conventions\" class=\"headerlink\" title=\"Naming Conventions\"></a>Naming Conventions</h2><ol>\n<li><p><strong>Overriding Principle</strong></p>\n<p>Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation.</p>\n</li>\n<li><p><strong>Descriptive: Naming Styles</strong></p>\n<p>The following special forms using leading or trailing underscores are recognized.</p>\n<ul>\n<li><p><code>_single_leading_underscore</code>: <strong>weak “internal use” indicator</strong>.<br>E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>\n</li>\n<li><p><code>single_trailing_underscore_</code>: used by convention to <strong>avoid conflicts with Python keyword</strong>.</p>\n</li>\n<li><code>__double_leading_underscore</code>: when naming <strong>a class attribute (not intended for subclass to use)</strong>, invokes name mangling (inside class FooBar, <code>__boo</code> becomes<code>_FooBar__boo</code>) </li>\n<li><code>__double_leading_and_trailing_underscore__</code>: “magic” objects or attributes that live in user-controlled namespaces. E.g. <code>__init__</code>, <code>__import__</code> or <code>__file__</code>. <strong>Never invent such names</strong>; only use them as documented.</li>\n</ul>\n</li>\n<li><p><strong>Prescriptive: Naming Conventions</strong></p>\n<ol>\n<li><p><strong>Names to Avoid</strong></p>\n<p>Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names.</p>\n</li>\n<li><p><strong>ASCII Compatibility</strong></p>\n<p>Identifiers used in the standard library must be ASCII compatible</p>\n</li>\n<li><p><strong>Package and Module Names</strong></p>\n<p><strong>Python packages should have short, all-lowercase names, although the use of underscores is discouraged.</strong></p>\n<p>When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. <code>_socket</code>).</p>\n</li>\n<li><p><strong>Class Names</strong></p>\n<p><strong>Class names should normally use the CapWords convention.</strong></p>\n</li>\n<li><p><strong>Exception Names</strong></p>\n<p>Because exceptions should be classes, the class naming convention applies here.<br>However, <strong>you should use the suffix “Error” on your exception names</strong> (if the exception actually is an error).</p>\n</li>\n<li><p><strong>Global Variable Names</strong></p>\n<p>The conventions are about the same as those for functions.</p>\n<p>Modules that are designed for use via <code>from M import *</code> should <strong>use the <code>__all__</code> mechanism</strong> to prevent exporting globals.</p>\n</li>\n<li><p><strong>Function and Variable Names</strong></p>\n<p><strong>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</strong></p>\n<p>Variable names follow the same convention as function names.</p>\n</li>\n<li><p><strong>Function and Method Arguments</strong></p>\n<p><strong>Always</strong> use <code>self</code> for the first argument to instance methods.</p>\n<p><strong>Always</strong> use <code>cls</code> for the first argument to class methods.</p>\n<p>If a function argument’s name clashes with a reserved keyword, it is generally better to <strong>append a single trailing underscore</strong> rather than use an abbreviation or spelling corruption. Thus <code>class_</code> is better than <code>clss</code>. (Perhaps better is to avoid such clashes by using a synonym.)</p>\n</li>\n<li><p><strong>Method Names and Instance Variables</strong></p>\n<p>Use the function naming rules: <strong>lowercase with words separated by underscores</strong> as necessary to improve readability.</p>\n<p>Use one leading underscore only for non-public methods and instance variables.</p>\n</li>\n<li><p><strong>Constants</strong></p>\n<p>Constants are usually defined on a module level and written in <strong>all capital letters with underscores separating words</strong>. Examples include <code>MAX_OVERFLOW</code> and <code>TOTAL</code>.</p>\n</li>\n<li><p><strong>Designing for Inheritance</strong></p>\n<p>Always decide whether a class’s methods and instance variables  should be public or non-public. <strong>If in doubt, choose non-public</strong>; it’s easier to make it public later than to make a public attribute non-public.</p>\n<ul>\n<li><strong>Public attributes should have no leading underscores.</strong></li>\n<li>If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.</li>\n<li>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with <strong>double leading underscores and no trailing underscores</strong>.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><strong>Public and Internal Interfaces</strong></p>\n<p><strong>Documented interfaces are considered public</strong>, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. <strong>All undocumented interfaces should be assumed to be internal</strong>.</p>\n<p>To better support introspection, <strong>modules should explicitly declare the names in their public API using the <code>__all__</code> attribute.</strong> Setting <code>__all__</code> to an empty list indicates that the module has no public API.</p>\n<p>Even with <code>__all__</code> set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still <strong>be prefixed with a single leading underscore</strong>.</p>\n</li>\n</ol>\n<h2 id=\"Programming-Recommendations\"><a href=\"#Programming-Recommendations\" class=\"headerlink\" title=\"Programming Recommendations\"></a>Programming Recommendations</h2><ul>\n<li><p>Code should be written in a way that does not disadvantage other implementations of Python.</p>\n</li>\n<li><p><strong>Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators.</strong></p>\n<p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> (i.e. an empty list will be considered as False but not None).</p>\n</li>\n<li><p>Use <code>is not</code> operator rather than <code>not ... is</code>. </p>\n</li>\n<li><p>Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Yes:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span> <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#No:</span></span><br><span class=\"line\">f = <span class=\"keyword\">lambda</span> x: <span class=\"number\">2</span>*x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Derive exceptions from <code>Exception</code> rather than <code>BaseException</code>.</strong> Direct inheritance from <code>BaseException</code> is reserved for exceptions where catching them is almost always the wrong thing to do.</p>\n</li>\n<li><p><strong>When catching exceptions, mention specific exceptions whenever possible</strong> instead of using a bare <code>except</code>.</p>\n</li>\n<li><p>For all try/except clauses, limit the <code>try</code> clause to the <strong>absolute minimum amount of code</strong> necessary.</p>\n</li>\n<li><p>Be consistent in return statements.If any return statement returns an expression, any return statements where <strong>no value is returned should explicitly state this as `return None</strong>`, and an explicit return statement should be present at the end of the function (if reachable).</p>\n</li>\n<li><p>Use string methods instead of the string module.</p>\n</li>\n<li><p>Use <code>&#39;&#39;.startswith()</code> and <code>&#39;&#39;.endswith()</code> instead of string slicing to check for prefixes or suffixes.</p>\n</li>\n<li><p>Object type comparisons should always use <strong>isinstance() instead of comparing types</strong> directly.</p>\n</li>\n<li><p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</p>\n</li>\n<li><p><strong>Don’t compare boolean values to True or False</strong> using <code>==</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:   <span class=\"keyword\">if</span> greeting:</span><br><span class=\"line\">No:    <span class=\"keyword\">if</span> greeting == <span class=\"literal\">True</span>:</span><br><span class=\"line\">Worse: <span class=\"keyword\">if</span> greeting <span class=\"keyword\">is</span> <span class=\"literal\">True</span>:</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><strong>This article is an abstract of <em>Style Guide for Python Code</em> by python-dev.</strong></p>\n<p>To see the full document, click <a href=\"https://www.python.org/dev/peps/pep-0008/\" target=\"_blank\" rel=\"noopener\">HERE</a></p>\n<h2 id=\"Basic-Principles\"><a href=\"#Basic-Principles\" class=\"headerlink\" title=\"Basic Principles\"></a>Basic Principles</h2><blockquote>\n<p>Code is read much more often than it is written. <strong>Readability counts.</strong></p>\n</blockquote>\n<p>The guidelines provided here are intended to improve the readability of code and make it consistent across the wide spectrum of Python code.</p>\n<p>Consistency with this style guide is important. Consistency within a project is more important. <strong>Consistency within one module or function is the most important.</strong></p>\n<p>In particular: do not break backwards compatibility just to comply with this article!</p>\n<h2 id=\"Code-Lay-out\"><a href=\"#Code-Lay-out\" class=\"headerlink\" title=\"Code Lay-out\"></a>Code Lay-out</h2><ol>\n<li><p><strong>Indentation</strong>  </p>\n<p>Use 4 spaces per indentation level.  </p></li></ol>","more":"<p>Example:  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Aligned with opening delimiter.</span></span><br><span class=\"line\">foo = long_function_name(var_one, var_two,</span><br><span class=\"line\">                         var_three, var_four)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># Add 4 spaces (an extra level of indentation) to distinguish arguments from the rest.</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">long_function_name</span><span class=\"params\">(</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_one, var_two, var_three,</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        var_four)</span>:</span></span><br><span class=\"line\">    print(var_one)</span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"comment\"># Hanging indents should add a level.</span></span><br><span class=\"line\">foo = long_function_name(</span><br><span class=\"line\">    var_one, var_two,</span><br><span class=\"line\">    var_three, var_four)</span><br></pre></td></tr></table></figure>\n\n<li><p><strong>Tabs or Spaces?</strong>  </p>\n<p><strong>Spaces are the preferred indentation method.</strong></p>\n<p>Tabs should be used solely to remain consistent with code that is already indented with tabs.</p>\n</li>\n<li><p><strong>Maximum Line Length</strong></p>\n<p>Limit all lines to a maximum of <strong>79 characters</strong>.</p>\n<p>For flowing long blocks of text with fewer structural restrictions (docstrings or comments), the line length should be limited to <strong>72 characters</strong>.</p>\n<p>The preferred way of wrapping long lines is by using Python’s implied <strong>line continuation inside parentheses, brackets and braces</strong>. </p>\n<p><strong>Backslashes</strong> may still be appropriate at times. For example, long, multiple <code>with</code>-statements cannot use implicit continuation, so backslashes are acceptable.</p>\n</li>\n<li><p><strong>Should a Line Break Before or After a Binary Operator?</strong>  </p>\n<p>Although formulas within a paragraph always break after binary operations and relations, displayed formulas always break before binary operations.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Easy to match operators with operands</span></span><br><span class=\"line\">income = (gross_wages</span><br><span class=\"line\">          + taxable_interest</span><br><span class=\"line\">          + (dividends - qualified_dividends)</span><br><span class=\"line\">          - ira_deduction</span><br><span class=\"line\">          - student_loan_interest)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Blank Lines</strong>    </p>\n<p>  Surround <strong>top-level function and class definitions</strong> with <strong>two</strong> blank lines.</p>\n<p>  <strong>Method definitions inside a class</strong> are surrounded by <strong>a single</strong> blank line.</p>\n<p>  Use blank lines in functions, sparingly, to <strong>indicate logical sections</strong>.</p>\n</li>\n<li><p><strong>Source File Encoding</strong></p>\n<p>Code in the core Python distribution should always use <strong>UTF-8</strong> (or ASCII in Python 2).  </p>\n</li>\n<li><p><strong>Imports</strong>  </p>\n<p>Imports should usually be on separate lines:  </p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br></pre></td></tr></table></figure>\n<p>It’s okay to say this though:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> subprocess <span class=\"keyword\">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure>\n<p> Imports should be grouped in <strong>the following order</strong>:</p>\n<ol>\n<li>Standard library imports.</li>\n<li>Related third party imports.</li>\n<li><p>Local application/library specific imports.</p>\n<p>You should <strong>put a blank line between each group of imports</strong>.</p>\n<p>Absolute imports are recommended, as they are usually more readable and tend to be better behaved.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mypkg.sibling <span class=\"keyword\">import</span> example</span><br></pre></td></tr></table></figure>\n<p>Wildcard imports (from \\<module> import *) should be <strong>avoided</strong>.</module></p>\n</li>\n</ol>\n</li>\n<li><p><strong>Module Level Dunder Names</strong><br>Module level “dunders” (i.e. names with two leading and two trailing underscores) such as __all__, __author__, __version__, etc. should be placed after the module docstring but before any import statements except from __future__ imports. Python mandates that future-imports must appear in the module before any other code except docstrings:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"This is the example module.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">This module does stuff.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> __future__ <span class=\"keyword\">import</span> barry_as_FLUFL</span><br><span class=\"line\"></span><br><span class=\"line\">__all__ = [<span class=\"string\">'a'</span>, <span class=\"string\">'b'</span>, <span class=\"string\">'c'</span>]</span><br><span class=\"line\">__version__ = <span class=\"string\">'0.1'</span></span><br><span class=\"line\">__author__ = <span class=\"string\">'Cardinal Biggles'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br></pre></td></tr></table></figure>\n</li>\n\n<h2 id=\"String-Quotes\"><a href=\"#String-Quotes\" class=\"headerlink\" title=\"String Quotes\"></a>String Quotes</h2><p>   Single-quoted strings and double-quoted strings are all acceptable.</p>\n<p>   <strong>For triple-quoted strings, always use double quote characters.</strong></p>\n<h2 id=\"Whitespace-in-Expressions-and-Statements\"><a href=\"#Whitespace-in-Expressions-and-Statements\" class=\"headerlink\" title=\"Whitespace in Expressions and Statements\"></a>Whitespace in Expressions and Statements</h2><p>​    Avoid extraneous whitespace in the following situations:</p>\n<ul>\n<li><p>Immediately inside parentheses, brackets or braces.</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(ham[<span class=\"number\">1</span>], &#123;eggs: <span class=\"number\">2</span>&#125;)</span><br><span class=\"line\">No:  spam( ham[ <span class=\"number\">1</span> ], &#123; eggs: <span class=\"number\">2</span> &#125; )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Between a trailing comma and a following close parenthesis.</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: foo = (<span class=\"number\">0</span>,)</span><br><span class=\"line\">No:  bar = (<span class=\"number\">0</span>, )</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Immediately before a comma, semicolon, or colon:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: <span class=\"keyword\">if</span> x == <span class=\"number\">4</span>: <span class=\"keyword\">print</span> x, y; x, y = y, x</span><br><span class=\"line\">No:  <span class=\"keyword\">if</span> x == <span class=\"number\">4</span> : <span class=\"keyword\">print</span> x , y ; x , y = y , x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>However, in a slice the colon acts like a binary operator, and should have equal amounts on either side (treating it as the operator with the lowest priority). In an extended slice, both colons must have the same amount of spacing applied. <strong>Exception: when a slice parameter is omitted, the space is omitted.</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Yes:</span></span><br><span class=\"line\">ham[<span class=\"number\">1</span>:<span class=\"number\">9</span>], ham[<span class=\"number\">1</span>:<span class=\"number\">9</span>:<span class=\"number\">3</span>], ham[:<span class=\"number\">9</span>:<span class=\"number\">3</span>], ham[<span class=\"number\">1</span>::<span class=\"number\">3</span>], ham[<span class=\"number\">1</span>:<span class=\"number\">9</span>:]</span><br><span class=\"line\">ham[lower:upper], ham[lower:upper:], ham[lower::step]</span><br><span class=\"line\">ham[lower+offset : upper+offset]</span><br><span class=\"line\">ham[: upper_fn(x) : step_fn(x)], ham[:: step_fn(x)]</span><br><span class=\"line\">ham[lower + offset : upper + offset]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># No:</span></span><br><span class=\"line\">ham[lower + offset:upper + offset]</span><br><span class=\"line\">ham[<span class=\"number\">1</span>: <span class=\"number\">9</span>], ham[<span class=\"number\">1</span> :<span class=\"number\">9</span>], ham[<span class=\"number\">1</span>:<span class=\"number\">9</span> :<span class=\"number\">3</span>]</span><br><span class=\"line\">ham[lower : : upper]</span><br><span class=\"line\">ham[ : upper]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Immediately before the open parenthesis that starts the argument list of a function call:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: spam(<span class=\"number\">1</span>)</span><br><span class=\"line\">No:  spam (<span class=\"number\">1</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Immediately before the open parenthesis that starts an indexing or slicing:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes: dct[<span class=\"string\">'key'</span>] = lst[index]</span><br><span class=\"line\">No:  dct [<span class=\"string\">'key'</span>] = lst [index]</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>More than one space around an assignment (or other) operator to align it with another.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Yes:</span></span><br><span class=\"line\">x = <span class=\"number\">1</span></span><br><span class=\"line\">y = <span class=\"number\">2</span></span><br><span class=\"line\">long_variable = <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># No:</span></span><br><span class=\"line\">x             = <span class=\"number\">1</span></span><br><span class=\"line\">y             = <span class=\"number\">2</span></span><br><span class=\"line\">long_variable = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Avoid trailing whitespace anywhere. Because it’s usually invisible, it can be confusing.</p>\n</li>\n<li><p>Always surround <strong>these</strong> binary operators with a single space on either side: </p>\n<ul>\n<li>assignment (=), augmented assignment (+=, -=, etc.)   </li>\n<li>comparisons (==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not)       </li>\n<li>Booleans (and, or, not)</li>\n</ul>\n</li>\n<li><p>If operators with different priorities are used, <strong>consider adding whitespace around the operators with the lowest priority(ies).</strong><br>  However, never use more than one space, and always have the same amount of whitespace on both sides of a binary operator.</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Yes:</span></span><br><span class=\"line\">i = i + <span class=\"number\">1</span></span><br><span class=\"line\">submitted += <span class=\"number\">1</span></span><br><span class=\"line\">x = x*<span class=\"number\">2</span> - <span class=\"number\">1</span></span><br><span class=\"line\">hypot2 = x*x + y*y</span><br><span class=\"line\">c = (a+b) * (a-b)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Compound statements (multiple statements on the same line) are generally discouraged.</strong></p>\n</li>\n<li>While sometimes it’s okay to put an if/for/while with a small body on the same line, never do this for multi-clause statements.</li>\n</ul>\n<h2 id=\"When-to-Use-Trailing-Commas\"><a href=\"#When-to-Use-Trailing-Commas\" class=\"headerlink\" title=\"When to Use Trailing Commas\"></a>When to Use Trailing Commas</h2><p><strong>When a list of values, arguments or imported items is expected to be extended over time, always adding a trailing comma, and add the close parenthesis/bracket/brace on the next line.</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILES = [</span><br><span class=\"line\">    <span class=\"string\">'setup.cfg'</span>,</span><br><span class=\"line\">    <span class=\"string\">'tox.ini'</span>,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">initialize(FILES,</span><br><span class=\"line\">       error=<span class=\"literal\">True</span>,</span><br><span class=\"line\">       )</span><br></pre></td></tr></table></figure>\n<h2 id=\"Comments\"><a href=\"#Comments\" class=\"headerlink\" title=\"Comments\"></a>Comments</h2><p>Comments that contradict the code are worse than no comments. Always make a priority of keeping the comments up-to-date when the code changes!</p>\n<p>Comments should be complete sentences. The first word should be capitalized, unless it is an identifier that begins with a lower case letter (<strong>never alter the case of identifiers!</strong>).</p>\n<ol>\n<li><p><strong>Block Comments</strong></p>\n<p><strong>Each line of a block comment starts with a <code>#</code> and a single space</strong> (unless it is indented text inside the comment).</p>\n</li>\n<li><p><strong>Inline Comments</strong></p>\n<p><strong>Use inline comments sparingly.</strong></p>\n<p>Inline comments are unnecessary and in fact distracting if they state the obvious.</p>\n</li>\n<li><p><strong>Documentation Strings</strong></p>\n<p>Write docstrings for <strong>all</strong> public modules, functions, classes, and methods. </p>\n<p>Docstrings are not necessary for non-public methods, but you should have a comment that describes what the method does. <strong>This comment should appear after the <code>def</code> line.</strong></p>\n<p>Note that most importantly, the <code>&quot;&quot;&quot;</code> that ends a multiline docstring should be on a line by itself:</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"\"\"Return a foobang</span></span><br><span class=\"line\"><span class=\"string\">   </span></span><br><span class=\"line\"><span class=\"string\">Optional plotz says to frobnicate the bizbaz first.</span></span><br><span class=\"line\"><span class=\"string\">\"\"\"</span></span><br></pre></td></tr></table></figure>\n<p>For one liner docstrings, please keep the closing <code>&quot;&quot;&quot;</code> on the same line.</p>\n</li>\n</ol>\n<h2 id=\"Naming-Conventions\"><a href=\"#Naming-Conventions\" class=\"headerlink\" title=\"Naming Conventions\"></a>Naming Conventions</h2><ol>\n<li><p><strong>Overriding Principle</strong></p>\n<p>Names that are visible to the user as public parts of the API should follow conventions that reflect usage rather than implementation.</p>\n</li>\n<li><p><strong>Descriptive: Naming Styles</strong></p>\n<p>The following special forms using leading or trailing underscores are recognized.</p>\n<ul>\n<li><p><code>_single_leading_underscore</code>: <strong>weak “internal use” indicator</strong>.<br>E.g. <code>from M import *</code> does not import objects whose name starts with an underscore.</p>\n</li>\n<li><p><code>single_trailing_underscore_</code>: used by convention to <strong>avoid conflicts with Python keyword</strong>.</p>\n</li>\n<li><code>__double_leading_underscore</code>: when naming <strong>a class attribute (not intended for subclass to use)</strong>, invokes name mangling (inside class FooBar, <code>__boo</code> becomes<code>_FooBar__boo</code>) </li>\n<li><code>__double_leading_and_trailing_underscore__</code>: “magic” objects or attributes that live in user-controlled namespaces. E.g. <code>__init__</code>, <code>__import__</code> or <code>__file__</code>. <strong>Never invent such names</strong>; only use them as documented.</li>\n</ul>\n</li>\n<li><p><strong>Prescriptive: Naming Conventions</strong></p>\n<ol>\n<li><p><strong>Names to Avoid</strong></p>\n<p>Never use the characters ‘l’ (lowercase letter el), ‘O’ (uppercase letter oh), or ‘I’ (uppercase letter eye) as single character variable names.</p>\n</li>\n<li><p><strong>ASCII Compatibility</strong></p>\n<p>Identifiers used in the standard library must be ASCII compatible</p>\n</li>\n<li><p><strong>Package and Module Names</strong></p>\n<p><strong>Python packages should have short, all-lowercase names, although the use of underscores is discouraged.</strong></p>\n<p>When an extension module written in C or C++ has an accompanying Python module that provides a higher level (e.g. more object oriented) interface, the C/C++ module has a leading underscore (e.g. <code>_socket</code>).</p>\n</li>\n<li><p><strong>Class Names</strong></p>\n<p><strong>Class names should normally use the CapWords convention.</strong></p>\n</li>\n<li><p><strong>Exception Names</strong></p>\n<p>Because exceptions should be classes, the class naming convention applies here.<br>However, <strong>you should use the suffix “Error” on your exception names</strong> (if the exception actually is an error).</p>\n</li>\n<li><p><strong>Global Variable Names</strong></p>\n<p>The conventions are about the same as those for functions.</p>\n<p>Modules that are designed for use via <code>from M import *</code> should <strong>use the <code>__all__</code> mechanism</strong> to prevent exporting globals.</p>\n</li>\n<li><p><strong>Function and Variable Names</strong></p>\n<p><strong>Function names should be lowercase, with words separated by underscores as necessary to improve readability.</strong></p>\n<p>Variable names follow the same convention as function names.</p>\n</li>\n<li><p><strong>Function and Method Arguments</strong></p>\n<p><strong>Always</strong> use <code>self</code> for the first argument to instance methods.</p>\n<p><strong>Always</strong> use <code>cls</code> for the first argument to class methods.</p>\n<p>If a function argument’s name clashes with a reserved keyword, it is generally better to <strong>append a single trailing underscore</strong> rather than use an abbreviation or spelling corruption. Thus <code>class_</code> is better than <code>clss</code>. (Perhaps better is to avoid such clashes by using a synonym.)</p>\n</li>\n<li><p><strong>Method Names and Instance Variables</strong></p>\n<p>Use the function naming rules: <strong>lowercase with words separated by underscores</strong> as necessary to improve readability.</p>\n<p>Use one leading underscore only for non-public methods and instance variables.</p>\n</li>\n<li><p><strong>Constants</strong></p>\n<p>Constants are usually defined on a module level and written in <strong>all capital letters with underscores separating words</strong>. Examples include <code>MAX_OVERFLOW</code> and <code>TOTAL</code>.</p>\n</li>\n<li><p><strong>Designing for Inheritance</strong></p>\n<p>Always decide whether a class’s methods and instance variables  should be public or non-public. <strong>If in doubt, choose non-public</strong>; it’s easier to make it public later than to make a public attribute non-public.</p>\n<ul>\n<li><strong>Public attributes should have no leading underscores.</strong></li>\n<li>If your public attribute name collides with a reserved keyword, append a single trailing underscore to your attribute name.</li>\n<li>If your class is intended to be subclassed, and you have attributes that you do not want subclasses to use, consider naming them with <strong>double leading underscores and no trailing underscores</strong>.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p><strong>Public and Internal Interfaces</strong></p>\n<p><strong>Documented interfaces are considered public</strong>, unless the documentation explicitly declares them to be provisional or internal interfaces exempt from the usual backwards compatibility guarantees. <strong>All undocumented interfaces should be assumed to be internal</strong>.</p>\n<p>To better support introspection, <strong>modules should explicitly declare the names in their public API using the <code>__all__</code> attribute.</strong> Setting <code>__all__</code> to an empty list indicates that the module has no public API.</p>\n<p>Even with <code>__all__</code> set appropriately, internal interfaces (packages, modules, classes, functions, attributes or other names) should still <strong>be prefixed with a single leading underscore</strong>.</p>\n</li>\n</ol>\n<h2 id=\"Programming-Recommendations\"><a href=\"#Programming-Recommendations\" class=\"headerlink\" title=\"Programming Recommendations\"></a>Programming Recommendations</h2><ul>\n<li><p>Code should be written in a way that does not disadvantage other implementations of Python.</p>\n</li>\n<li><p><strong>Comparisons to singletons like None should always be done with <code>is</code> or <code>is not</code>, never the equality operators.</strong></p>\n<p>Also, beware of writing <code>if x</code> when you really mean <code>if x is not None</code> (i.e. an empty list will be considered as False but not None).</p>\n</li>\n<li><p>Use <code>is not</code> operator rather than <code>not ... is</code>. </p>\n</li>\n<li><p>Always use a def statement instead of an assignment statement that binds a lambda expression directly to an identifier.</p>\n <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#Yes:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span><span class=\"params\">(x)</span>:</span> <span class=\"keyword\">return</span> <span class=\"number\">2</span>*x</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#No:</span></span><br><span class=\"line\">f = <span class=\"keyword\">lambda</span> x: <span class=\"number\">2</span>*x</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>Derive exceptions from <code>Exception</code> rather than <code>BaseException</code>.</strong> Direct inheritance from <code>BaseException</code> is reserved for exceptions where catching them is almost always the wrong thing to do.</p>\n</li>\n<li><p><strong>When catching exceptions, mention specific exceptions whenever possible</strong> instead of using a bare <code>except</code>.</p>\n</li>\n<li><p>For all try/except clauses, limit the <code>try</code> clause to the <strong>absolute minimum amount of code</strong> necessary.</p>\n</li>\n<li><p>Be consistent in return statements.If any return statement returns an expression, any return statements where <strong>no value is returned should explicitly state this as `return None</strong>`, and an explicit return statement should be present at the end of the function (if reachable).</p>\n</li>\n<li><p>Use string methods instead of the string module.</p>\n</li>\n<li><p>Use <code>&#39;&#39;.startswith()</code> and <code>&#39;&#39;.endswith()</code> instead of string slicing to check for prefixes or suffixes.</p>\n</li>\n<li><p>Object type comparisons should always use <strong>isinstance() instead of comparing types</strong> directly.</p>\n</li>\n<li><p>For sequences, (strings, lists, tuples), use the fact that empty sequences are false.</p>\n</li>\n<li><p><strong>Don’t compare boolean values to True or False</strong> using <code>==</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Yes:   <span class=\"keyword\">if</span> greeting:</span><br><span class=\"line\">No:    <span class=\"keyword\">if</span> greeting == <span class=\"literal\">True</span>:</span><br><span class=\"line\">Worse: <span class=\"keyword\">if</span> greeting <span class=\"keyword\">is</span> <span class=\"literal\">True</span>:</span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"乌合之众","date":"2019-02-17T16:00:00.000Z","_content":"# 《乌合之众--大众心理研究》\n## 群体心理\n### 群体的一般特征\n* **群体在智力上总是低于孤立的个人**，在感情方面则可好可坏\n* 决定群体特点的原因\n    * 群体使个人的责任感消失\n    * 群体中的感情与行动具有传染性，足以使人为了群体而牺牲个人利益\n    * 群体具有类似于催眠的强大暗示力量\n* 组成群体个人的特点\n    * 有意识人格消失，无意识人格得势\n    * 思想与感情因暗示而转向集体方向\n    * 立即把暗示的观念转化为行动的倾向\n    * 概要: 结果\n        * 个人受本能支配\n        * 甘心被言辞和形象所打动\n        * 做出作为个人完全不可能同意的决定  \n\n<!-- more --> \n\n### 群体的感情和道德观\n* 群体的冲动、易变和急躁\n    * 群体是刺激因素的奴隶——冲动\n    * 群体不会深思熟虑，可以先后被矛盾情感激发——易变\n    * 群体中的个体感到人数赋予他的力量，产生狂热的激情，并立刻屈从于这种诱惑——急躁\n* 群体的易受暗示和轻信\n    * 群体随时听命于一切暗示，失去一切批判能力\n    * 群体用形象而不是逻辑来思维，不对主观与客观加以区分，把幻觉与真实混为一谈\n    * 集体观察极有可能出错，大多数时候表达的是个人幻觉，群体证词极不可靠\n* 群体情绪的夸张与单纯\n    * 群体常常夸大自己的感情，因此只会被极端感情所打动\n    * 个人难以预测群体的决定\n    * 群体仅仅能够把感情提升到极低或极高的境界\n* 群体的偏执、专横和保守\n    * **群体对意见或想法会全盘接受或一概拒绝——偏执**\n    * 群体对何为真理何为谬误不容怀疑——专横\n    * 群体反抗软弱，对强权低声下气，容易屈从等级制，本能地变成奴才——保守\n* 群体的道德\n    * 人们在群体中表现出破坏性的、欺压弱者的本能\n    * 对群体给予恰当的影响，它就会为自己所信奉的理想慷慨赴死\n\n### 群体的观念、推理与想象力\n* 群体的观念\n    * 相互矛盾的观念可以在群体的不同阶段共存\n    * 高深的观念必须经过改造才能为群体接受\n    * 观念在扎根后产生强大的社会影响，无论它是否蕴含真理\n* 群体的理性\n    * 群体几乎不受理性的影响，没有推理能力\n    * **群体推理的特点：混淆表面相似的事物，把具体的事物普遍化**\n* 群体的想象力\n    * 群体有强大、活跃、敏感的想象力\n    * 群体只会被形象所打动\n    * 群体的想象力是政客的权力基础\n    * **影响民众想象力的是事实发生与引起注意的方式，而不是事实本身**\n\n### 群体信仰所采取的宗教形式\n* 信念采取宗教的本质形式从而变得强大\n* 宗教或政治信条被接受是因为它激发了群体的想象力，使他们在崇拜服从中找到了自己的幸福，随时准备为之牺牲\n* 群体永远需要一个上帝\n* 历史上的大事件都是宗教感情的结果\n\n## 群体的意见与信念\n### 群体的意见和信念中的间接因素\n* 间接因素：使群体接受某些排他信念的准备性因素\n* 种族\n    * 种族是最为强大的间接因素\n    * 文明中的一切要素，在种族间传递时都会发生变化\n    * 环境、社会事件等社会暗示性因素在长期无法与种族因素相对立\n* 传统\n    * 传统代表过去的观念、欲望和感情\n    * 传统是种族综合作用的产物\n    * 传统是文明的基础，破坏传统是进步的基础\n    * 群体倾向于维护传统，尤其是有产群体\n* 时间\n    * 时间使社会由无序走向有序\n* 政治和社会制度\n    * 制度和政府都是种族的产物，是时代的制造物\n    * 一个民族并没有真正改变其各种制度的能力\n    * 制度无法深刻影响群体禀性\n* 教育\n    * 教育应当重视生活实践\n \n### 群体意见的直接因素\n* 直接因素：实际说服群体接受观念的因素\n* 形象、词语和套话\n    * 某些词语和套话可以激活群体心中的形象，产生强大的力量，说理与论证无法战胜他们\n    * 最不明确的词语有时产生的力量最大\n    * 词语唤起的形象独立于他们的含义，词语的意义随着时代会发生巨大变迁\n    * 空话使得使用者免去思考的义务\n    * 给旧事物更换名称有防止不利联想的政治效用\n    * “民主”一词在不同国家亦有不同的理解方式\n* 幻觉\n    * 群众必须拥有自己的幻想，因此会本能地迎合提供幻想的人\n    * 宗教，政治观念等强大的原因是具有幻想\n    * **群众更喜欢幻觉而不是不合口味的真理**\n* 经验\n    * 只有经验才能让真理在群众心中得到认可\n    * 经验需要反复出现来产生效果\n    * 为使群众获得经验而说服他们常常需要付出代价\n* 理性\n    * 群体只受无意识感情的影响，从来不受理性的指引\n    * 尽管存在理性，文明的动力仍然是各种感情\n\n### 群体领袖及其说服的手法\n* 群体的领袖\n    * 一切群体动物有服从首领的本能需要\n    * 领袖常常被观念所迷惑，具有强烈的信仰与坚定的信念\n    * 信仰的建立永远取决于人群中领袖的作用\n    * 群众领袖握有非常专制的权威\n* 领袖的动员手段：断言、重复和传染\n    * 一个断言越是简单明了，证据和证明看上去越贫乏，它的威力就越大\n    * 得到断言的事物通过不断重复而扎根\n    * 当断言得到有效重复，不再存在异议，形成的流行意见会开始传染的过程\n    * **人有模仿的天性，支配大众的是榜样而不是论证**\n    * 民众的意见不久会扩散到上层，成为普遍意见\n* 名望\n    * 被普及的观念在环境中获得的力量成为名望\n    * 现实中的名望是某个人，某本著作或某个观念对我们头脑的支配力\n    * 名望阻止我们看到事物的本来面目，使我们失去批判能力\n    * **人们倾向于附和而不是证实对有名望事物的判断**\n    * 名望是说服群众的一个基本因素\n    * 缺少成功的名望会在短时间内消失，群众将会倾向于报复他们\n\n### 群体的信念和意见的变化范围\n* 牢固的信念\n    * 某些牢固的信念不易改变，构成了文明的真正基础\n    * 通常只有暴力革命才能根除牢固的信念\n    * 当信念价值开始受到质疑时，他就开始衰亡\n    * 普遍信念的荒谬性不会阻碍它们的传播\n* 群体意见的多变\n    * 与民族的普遍信念和情感相悖的意见没有持久力\n    * 近百年来观念和信仰发生了显著的多样化\n    * 新闻业的发展将对立意见带给群众，使得普遍意见难以建立\n    * 不存在引导意见的力量与普遍信仰的毁灭使得对一切秩序都存在极端分歧的信念，这导致群众对一切不触及自身直接利益的事情漠不关心\n\n## 不同群体的分类及其特点\n### 群体的分类\n* 异质性群体\n    * 异质性群体由各种特点、各种职业、各种智力水平的个人组成\n    * 种族的气质决定了群体的性格\n    * 有名称的群体（如议会）发挥了无名称群体（如街头群体）所缺乏的责任感\n* 同质性群体\n    * 同质性团体靠共同的信仰、职业或利益与生活习惯所联系\n    * 同质性群体包括派别、身份团体与阶级\n\n### 犯罪群体\n* 犯罪群体中的个体在参与犯罪时坚信他们的行为是履行责任，在心理上不能严格称之为犯罪\n* 群体行为是无意识的\n* 在犯罪群体中也能表现出严格的道德观念\n\n### 刑事案件的陪审团\n* 陪审团的判决往往独立于组成它的人员成分\n* 陪审团对自己有可能成为受害者的罪行毫不留情，对感情原因违法的案件则优柔寡断\n* 陪审团在判决时深受双方名望的影响\n* 律师的主要用心在于打动陪审团的感情，尤其是那些左右着普遍观点的灵魂人物\n* 陪审团能够有效缓解法律的严酷性\n\n### 选民团体\n* 被选举人的名望与财富是当选的必要因素\n* 竞选演说常常用到领袖的动员手段\n* 书面纲领不可过于绝对，但口头纲领则可以随意承诺\n* 由于低下的群体智力，限制选举权不会改变选举的结果\n\n### 议会\n* 意见的简单化是议会最重要的特征之一\n* 处于主导地位的依然是团体的领袖\n\n## 总结：群体不善推理，却急于采取行动\n\n链接：[思维导图PDF下载](/files/notes/The_Crowd.pdf)\n\n\n\n\n","source":"_posts/The-Crowd.md","raw":"---\ntitle: 乌合之众\ndate: 2019-02-18\ntags: [Reading Notes]\n---\n# 《乌合之众--大众心理研究》\n## 群体心理\n### 群体的一般特征\n* **群体在智力上总是低于孤立的个人**，在感情方面则可好可坏\n* 决定群体特点的原因\n    * 群体使个人的责任感消失\n    * 群体中的感情与行动具有传染性，足以使人为了群体而牺牲个人利益\n    * 群体具有类似于催眠的强大暗示力量\n* 组成群体个人的特点\n    * 有意识人格消失，无意识人格得势\n    * 思想与感情因暗示而转向集体方向\n    * 立即把暗示的观念转化为行动的倾向\n    * 概要: 结果\n        * 个人受本能支配\n        * 甘心被言辞和形象所打动\n        * 做出作为个人完全不可能同意的决定  \n\n<!-- more --> \n\n### 群体的感情和道德观\n* 群体的冲动、易变和急躁\n    * 群体是刺激因素的奴隶——冲动\n    * 群体不会深思熟虑，可以先后被矛盾情感激发——易变\n    * 群体中的个体感到人数赋予他的力量，产生狂热的激情，并立刻屈从于这种诱惑——急躁\n* 群体的易受暗示和轻信\n    * 群体随时听命于一切暗示，失去一切批判能力\n    * 群体用形象而不是逻辑来思维，不对主观与客观加以区分，把幻觉与真实混为一谈\n    * 集体观察极有可能出错，大多数时候表达的是个人幻觉，群体证词极不可靠\n* 群体情绪的夸张与单纯\n    * 群体常常夸大自己的感情，因此只会被极端感情所打动\n    * 个人难以预测群体的决定\n    * 群体仅仅能够把感情提升到极低或极高的境界\n* 群体的偏执、专横和保守\n    * **群体对意见或想法会全盘接受或一概拒绝——偏执**\n    * 群体对何为真理何为谬误不容怀疑——专横\n    * 群体反抗软弱，对强权低声下气，容易屈从等级制，本能地变成奴才——保守\n* 群体的道德\n    * 人们在群体中表现出破坏性的、欺压弱者的本能\n    * 对群体给予恰当的影响，它就会为自己所信奉的理想慷慨赴死\n\n### 群体的观念、推理与想象力\n* 群体的观念\n    * 相互矛盾的观念可以在群体的不同阶段共存\n    * 高深的观念必须经过改造才能为群体接受\n    * 观念在扎根后产生强大的社会影响，无论它是否蕴含真理\n* 群体的理性\n    * 群体几乎不受理性的影响，没有推理能力\n    * **群体推理的特点：混淆表面相似的事物，把具体的事物普遍化**\n* 群体的想象力\n    * 群体有强大、活跃、敏感的想象力\n    * 群体只会被形象所打动\n    * 群体的想象力是政客的权力基础\n    * **影响民众想象力的是事实发生与引起注意的方式，而不是事实本身**\n\n### 群体信仰所采取的宗教形式\n* 信念采取宗教的本质形式从而变得强大\n* 宗教或政治信条被接受是因为它激发了群体的想象力，使他们在崇拜服从中找到了自己的幸福，随时准备为之牺牲\n* 群体永远需要一个上帝\n* 历史上的大事件都是宗教感情的结果\n\n## 群体的意见与信念\n### 群体的意见和信念中的间接因素\n* 间接因素：使群体接受某些排他信念的准备性因素\n* 种族\n    * 种族是最为强大的间接因素\n    * 文明中的一切要素，在种族间传递时都会发生变化\n    * 环境、社会事件等社会暗示性因素在长期无法与种族因素相对立\n* 传统\n    * 传统代表过去的观念、欲望和感情\n    * 传统是种族综合作用的产物\n    * 传统是文明的基础，破坏传统是进步的基础\n    * 群体倾向于维护传统，尤其是有产群体\n* 时间\n    * 时间使社会由无序走向有序\n* 政治和社会制度\n    * 制度和政府都是种族的产物，是时代的制造物\n    * 一个民族并没有真正改变其各种制度的能力\n    * 制度无法深刻影响群体禀性\n* 教育\n    * 教育应当重视生活实践\n \n### 群体意见的直接因素\n* 直接因素：实际说服群体接受观念的因素\n* 形象、词语和套话\n    * 某些词语和套话可以激活群体心中的形象，产生强大的力量，说理与论证无法战胜他们\n    * 最不明确的词语有时产生的力量最大\n    * 词语唤起的形象独立于他们的含义，词语的意义随着时代会发生巨大变迁\n    * 空话使得使用者免去思考的义务\n    * 给旧事物更换名称有防止不利联想的政治效用\n    * “民主”一词在不同国家亦有不同的理解方式\n* 幻觉\n    * 群众必须拥有自己的幻想，因此会本能地迎合提供幻想的人\n    * 宗教，政治观念等强大的原因是具有幻想\n    * **群众更喜欢幻觉而不是不合口味的真理**\n* 经验\n    * 只有经验才能让真理在群众心中得到认可\n    * 经验需要反复出现来产生效果\n    * 为使群众获得经验而说服他们常常需要付出代价\n* 理性\n    * 群体只受无意识感情的影响，从来不受理性的指引\n    * 尽管存在理性，文明的动力仍然是各种感情\n\n### 群体领袖及其说服的手法\n* 群体的领袖\n    * 一切群体动物有服从首领的本能需要\n    * 领袖常常被观念所迷惑，具有强烈的信仰与坚定的信念\n    * 信仰的建立永远取决于人群中领袖的作用\n    * 群众领袖握有非常专制的权威\n* 领袖的动员手段：断言、重复和传染\n    * 一个断言越是简单明了，证据和证明看上去越贫乏，它的威力就越大\n    * 得到断言的事物通过不断重复而扎根\n    * 当断言得到有效重复，不再存在异议，形成的流行意见会开始传染的过程\n    * **人有模仿的天性，支配大众的是榜样而不是论证**\n    * 民众的意见不久会扩散到上层，成为普遍意见\n* 名望\n    * 被普及的观念在环境中获得的力量成为名望\n    * 现实中的名望是某个人，某本著作或某个观念对我们头脑的支配力\n    * 名望阻止我们看到事物的本来面目，使我们失去批判能力\n    * **人们倾向于附和而不是证实对有名望事物的判断**\n    * 名望是说服群众的一个基本因素\n    * 缺少成功的名望会在短时间内消失，群众将会倾向于报复他们\n\n### 群体的信念和意见的变化范围\n* 牢固的信念\n    * 某些牢固的信念不易改变，构成了文明的真正基础\n    * 通常只有暴力革命才能根除牢固的信念\n    * 当信念价值开始受到质疑时，他就开始衰亡\n    * 普遍信念的荒谬性不会阻碍它们的传播\n* 群体意见的多变\n    * 与民族的普遍信念和情感相悖的意见没有持久力\n    * 近百年来观念和信仰发生了显著的多样化\n    * 新闻业的发展将对立意见带给群众，使得普遍意见难以建立\n    * 不存在引导意见的力量与普遍信仰的毁灭使得对一切秩序都存在极端分歧的信念，这导致群众对一切不触及自身直接利益的事情漠不关心\n\n## 不同群体的分类及其特点\n### 群体的分类\n* 异质性群体\n    * 异质性群体由各种特点、各种职业、各种智力水平的个人组成\n    * 种族的气质决定了群体的性格\n    * 有名称的群体（如议会）发挥了无名称群体（如街头群体）所缺乏的责任感\n* 同质性群体\n    * 同质性团体靠共同的信仰、职业或利益与生活习惯所联系\n    * 同质性群体包括派别、身份团体与阶级\n\n### 犯罪群体\n* 犯罪群体中的个体在参与犯罪时坚信他们的行为是履行责任，在心理上不能严格称之为犯罪\n* 群体行为是无意识的\n* 在犯罪群体中也能表现出严格的道德观念\n\n### 刑事案件的陪审团\n* 陪审团的判决往往独立于组成它的人员成分\n* 陪审团对自己有可能成为受害者的罪行毫不留情，对感情原因违法的案件则优柔寡断\n* 陪审团在判决时深受双方名望的影响\n* 律师的主要用心在于打动陪审团的感情，尤其是那些左右着普遍观点的灵魂人物\n* 陪审团能够有效缓解法律的严酷性\n\n### 选民团体\n* 被选举人的名望与财富是当选的必要因素\n* 竞选演说常常用到领袖的动员手段\n* 书面纲领不可过于绝对，但口头纲领则可以随意承诺\n* 由于低下的群体智力，限制选举权不会改变选举的结果\n\n### 议会\n* 意见的简单化是议会最重要的特征之一\n* 处于主导地位的依然是团体的领袖\n\n## 总结：群体不善推理，却急于采取行动\n\n链接：[思维导图PDF下载](/files/notes/The_Crowd.pdf)\n\n\n\n\n","slug":"The-Crowd","published":1,"updated":"2019-04-30T16:42:56.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbkv000w30uvxbo5jp0i","content":"<h1 id=\"《乌合之众–大众心理研究》\"><a href=\"#《乌合之众–大众心理研究》\" class=\"headerlink\" title=\"《乌合之众–大众心理研究》\"></a>《乌合之众–大众心理研究》</h1><h2 id=\"群体心理\"><a href=\"#群体心理\" class=\"headerlink\" title=\"群体心理\"></a>群体心理</h2><h3 id=\"群体的一般特征\"><a href=\"#群体的一般特征\" class=\"headerlink\" title=\"群体的一般特征\"></a>群体的一般特征</h3><ul>\n<li><strong>群体在智力上总是低于孤立的个人</strong>，在感情方面则可好可坏</li>\n<li>决定群体特点的原因<ul>\n<li>群体使个人的责任感消失</li>\n<li>群体中的感情与行动具有传染性，足以使人为了群体而牺牲个人利益</li>\n<li>群体具有类似于催眠的强大暗示力量</li>\n</ul>\n</li>\n<li>组成群体个人的特点<ul>\n<li>有意识人格消失，无意识人格得势</li>\n<li>思想与感情因暗示而转向集体方向</li>\n<li>立即把暗示的观念转化为行动的倾向</li>\n<li>概要: 结果<ul>\n<li>个人受本能支配</li>\n<li>甘心被言辞和形象所打动</li>\n<li>做出作为个人完全不可能同意的决定  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a> \n<h3 id=\"群体的感情和道德观\"><a href=\"#群体的感情和道德观\" class=\"headerlink\" title=\"群体的感情和道德观\"></a>群体的感情和道德观</h3><ul>\n<li>群体的冲动、易变和急躁<ul>\n<li>群体是刺激因素的奴隶——冲动</li>\n<li>群体不会深思熟虑，可以先后被矛盾情感激发——易变</li>\n<li>群体中的个体感到人数赋予他的力量，产生狂热的激情，并立刻屈从于这种诱惑——急躁</li>\n</ul>\n</li>\n<li>群体的易受暗示和轻信<ul>\n<li>群体随时听命于一切暗示，失去一切批判能力</li>\n<li>群体用形象而不是逻辑来思维，不对主观与客观加以区分，把幻觉与真实混为一谈</li>\n<li>集体观察极有可能出错，大多数时候表达的是个人幻觉，群体证词极不可靠</li>\n</ul>\n</li>\n<li>群体情绪的夸张与单纯<ul>\n<li>群体常常夸大自己的感情，因此只会被极端感情所打动</li>\n<li>个人难以预测群体的决定</li>\n<li>群体仅仅能够把感情提升到极低或极高的境界</li>\n</ul>\n</li>\n<li>群体的偏执、专横和保守<ul>\n<li><strong>群体对意见或想法会全盘接受或一概拒绝——偏执</strong></li>\n<li>群体对何为真理何为谬误不容怀疑——专横</li>\n<li>群体反抗软弱，对强权低声下气，容易屈从等级制，本能地变成奴才——保守</li>\n</ul>\n</li>\n<li>群体的道德<ul>\n<li>人们在群体中表现出破坏性的、欺压弱者的本能</li>\n<li>对群体给予恰当的影响，它就会为自己所信奉的理想慷慨赴死</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体的观念、推理与想象力\"><a href=\"#群体的观念、推理与想象力\" class=\"headerlink\" title=\"群体的观念、推理与想象力\"></a>群体的观念、推理与想象力</h3><ul>\n<li>群体的观念<ul>\n<li>相互矛盾的观念可以在群体的不同阶段共存</li>\n<li>高深的观念必须经过改造才能为群体接受</li>\n<li>观念在扎根后产生强大的社会影响，无论它是否蕴含真理</li>\n</ul>\n</li>\n<li>群体的理性<ul>\n<li>群体几乎不受理性的影响，没有推理能力</li>\n<li><strong>群体推理的特点：混淆表面相似的事物，把具体的事物普遍化</strong></li>\n</ul>\n</li>\n<li>群体的想象力<ul>\n<li>群体有强大、活跃、敏感的想象力</li>\n<li>群体只会被形象所打动</li>\n<li>群体的想象力是政客的权力基础</li>\n<li><strong>影响民众想象力的是事实发生与引起注意的方式，而不是事实本身</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体信仰所采取的宗教形式\"><a href=\"#群体信仰所采取的宗教形式\" class=\"headerlink\" title=\"群体信仰所采取的宗教形式\"></a>群体信仰所采取的宗教形式</h3><ul>\n<li>信念采取宗教的本质形式从而变得强大</li>\n<li>宗教或政治信条被接受是因为它激发了群体的想象力，使他们在崇拜服从中找到了自己的幸福，随时准备为之牺牲</li>\n<li>群体永远需要一个上帝</li>\n<li>历史上的大事件都是宗教感情的结果</li>\n</ul>\n<h2 id=\"群体的意见与信念\"><a href=\"#群体的意见与信念\" class=\"headerlink\" title=\"群体的意见与信念\"></a>群体的意见与信念</h2><h3 id=\"群体的意见和信念中的间接因素\"><a href=\"#群体的意见和信念中的间接因素\" class=\"headerlink\" title=\"群体的意见和信念中的间接因素\"></a>群体的意见和信念中的间接因素</h3><ul>\n<li>间接因素：使群体接受某些排他信念的准备性因素</li>\n<li>种族<ul>\n<li>种族是最为强大的间接因素</li>\n<li>文明中的一切要素，在种族间传递时都会发生变化</li>\n<li>环境、社会事件等社会暗示性因素在长期无法与种族因素相对立</li>\n</ul>\n</li>\n<li>传统<ul>\n<li>传统代表过去的观念、欲望和感情</li>\n<li>传统是种族综合作用的产物</li>\n<li>传统是文明的基础，破坏传统是进步的基础</li>\n<li>群体倾向于维护传统，尤其是有产群体</li>\n</ul>\n</li>\n<li>时间<ul>\n<li>时间使社会由无序走向有序</li>\n</ul>\n</li>\n<li>政治和社会制度<ul>\n<li>制度和政府都是种族的产物，是时代的制造物</li>\n<li>一个民族并没有真正改变其各种制度的能力</li>\n<li>制度无法深刻影响群体禀性</li>\n</ul>\n</li>\n<li>教育<ul>\n<li>教育应当重视生活实践</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体意见的直接因素\"><a href=\"#群体意见的直接因素\" class=\"headerlink\" title=\"群体意见的直接因素\"></a>群体意见的直接因素</h3><ul>\n<li>直接因素：实际说服群体接受观念的因素</li>\n<li>形象、词语和套话<ul>\n<li>某些词语和套话可以激活群体心中的形象，产生强大的力量，说理与论证无法战胜他们</li>\n<li>最不明确的词语有时产生的力量最大</li>\n<li>词语唤起的形象独立于他们的含义，词语的意义随着时代会发生巨大变迁</li>\n<li>空话使得使用者免去思考的义务</li>\n<li>给旧事物更换名称有防止不利联想的政治效用</li>\n<li>“民主”一词在不同国家亦有不同的理解方式</li>\n</ul>\n</li>\n<li>幻觉<ul>\n<li>群众必须拥有自己的幻想，因此会本能地迎合提供幻想的人</li>\n<li>宗教，政治观念等强大的原因是具有幻想</li>\n<li><strong>群众更喜欢幻觉而不是不合口味的真理</strong></li>\n</ul>\n</li>\n<li>经验<ul>\n<li>只有经验才能让真理在群众心中得到认可</li>\n<li>经验需要反复出现来产生效果</li>\n<li>为使群众获得经验而说服他们常常需要付出代价</li>\n</ul>\n</li>\n<li>理性<ul>\n<li>群体只受无意识感情的影响，从来不受理性的指引</li>\n<li>尽管存在理性，文明的动力仍然是各种感情</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体领袖及其说服的手法\"><a href=\"#群体领袖及其说服的手法\" class=\"headerlink\" title=\"群体领袖及其说服的手法\"></a>群体领袖及其说服的手法</h3><ul>\n<li>群体的领袖<ul>\n<li>一切群体动物有服从首领的本能需要</li>\n<li>领袖常常被观念所迷惑，具有强烈的信仰与坚定的信念</li>\n<li>信仰的建立永远取决于人群中领袖的作用</li>\n<li>群众领袖握有非常专制的权威</li>\n</ul>\n</li>\n<li>领袖的动员手段：断言、重复和传染<ul>\n<li>一个断言越是简单明了，证据和证明看上去越贫乏，它的威力就越大</li>\n<li>得到断言的事物通过不断重复而扎根</li>\n<li>当断言得到有效重复，不再存在异议，形成的流行意见会开始传染的过程</li>\n<li><strong>人有模仿的天性，支配大众的是榜样而不是论证</strong></li>\n<li>民众的意见不久会扩散到上层，成为普遍意见</li>\n</ul>\n</li>\n<li>名望<ul>\n<li>被普及的观念在环境中获得的力量成为名望</li>\n<li>现实中的名望是某个人，某本著作或某个观念对我们头脑的支配力</li>\n<li>名望阻止我们看到事物的本来面目，使我们失去批判能力</li>\n<li><strong>人们倾向于附和而不是证实对有名望事物的判断</strong></li>\n<li>名望是说服群众的一个基本因素</li>\n<li>缺少成功的名望会在短时间内消失，群众将会倾向于报复他们</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体的信念和意见的变化范围\"><a href=\"#群体的信念和意见的变化范围\" class=\"headerlink\" title=\"群体的信念和意见的变化范围\"></a>群体的信念和意见的变化范围</h3><ul>\n<li>牢固的信念<ul>\n<li>某些牢固的信念不易改变，构成了文明的真正基础</li>\n<li>通常只有暴力革命才能根除牢固的信念</li>\n<li>当信念价值开始受到质疑时，他就开始衰亡</li>\n<li>普遍信念的荒谬性不会阻碍它们的传播</li>\n</ul>\n</li>\n<li>群体意见的多变<ul>\n<li>与民族的普遍信念和情感相悖的意见没有持久力</li>\n<li>近百年来观念和信仰发生了显著的多样化</li>\n<li>新闻业的发展将对立意见带给群众，使得普遍意见难以建立</li>\n<li>不存在引导意见的力量与普遍信仰的毁灭使得对一切秩序都存在极端分歧的信念，这导致群众对一切不触及自身直接利益的事情漠不关心</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"不同群体的分类及其特点\"><a href=\"#不同群体的分类及其特点\" class=\"headerlink\" title=\"不同群体的分类及其特点\"></a>不同群体的分类及其特点</h2><h3 id=\"群体的分类\"><a href=\"#群体的分类\" class=\"headerlink\" title=\"群体的分类\"></a>群体的分类</h3><ul>\n<li>异质性群体<ul>\n<li>异质性群体由各种特点、各种职业、各种智力水平的个人组成</li>\n<li>种族的气质决定了群体的性格</li>\n<li>有名称的群体（如议会）发挥了无名称群体（如街头群体）所缺乏的责任感</li>\n</ul>\n</li>\n<li>同质性群体<ul>\n<li>同质性团体靠共同的信仰、职业或利益与生活习惯所联系</li>\n<li>同质性群体包括派别、身份团体与阶级</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"犯罪群体\"><a href=\"#犯罪群体\" class=\"headerlink\" title=\"犯罪群体\"></a>犯罪群体</h3><ul>\n<li>犯罪群体中的个体在参与犯罪时坚信他们的行为是履行责任，在心理上不能严格称之为犯罪</li>\n<li>群体行为是无意识的</li>\n<li>在犯罪群体中也能表现出严格的道德观念</li>\n</ul>\n<h3 id=\"刑事案件的陪审团\"><a href=\"#刑事案件的陪审团\" class=\"headerlink\" title=\"刑事案件的陪审团\"></a>刑事案件的陪审团</h3><ul>\n<li>陪审团的判决往往独立于组成它的人员成分</li>\n<li>陪审团对自己有可能成为受害者的罪行毫不留情，对感情原因违法的案件则优柔寡断</li>\n<li>陪审团在判决时深受双方名望的影响</li>\n<li>律师的主要用心在于打动陪审团的感情，尤其是那些左右着普遍观点的灵魂人物</li>\n<li>陪审团能够有效缓解法律的严酷性</li>\n</ul>\n<h3 id=\"选民团体\"><a href=\"#选民团体\" class=\"headerlink\" title=\"选民团体\"></a>选民团体</h3><ul>\n<li>被选举人的名望与财富是当选的必要因素</li>\n<li>竞选演说常常用到领袖的动员手段</li>\n<li>书面纲领不可过于绝对，但口头纲领则可以随意承诺</li>\n<li>由于低下的群体智力，限制选举权不会改变选举的结果</li>\n</ul>\n<h3 id=\"议会\"><a href=\"#议会\" class=\"headerlink\" title=\"议会\"></a>议会</h3><ul>\n<li>意见的简单化是议会最重要的特征之一</li>\n<li>处于主导地位的依然是团体的领袖</li>\n</ul>\n<h2 id=\"总结：群体不善推理，却急于采取行动\"><a href=\"#总结：群体不善推理，却急于采取行动\" class=\"headerlink\" title=\"总结：群体不善推理，却急于采取行动\"></a>总结：群体不善推理，却急于采取行动</h2><p>链接：<a href=\"/files/notes/The_Crowd.pdf\">思维导图PDF下载</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"《乌合之众–大众心理研究》\"><a href=\"#《乌合之众–大众心理研究》\" class=\"headerlink\" title=\"《乌合之众–大众心理研究》\"></a>《乌合之众–大众心理研究》</h1><h2 id=\"群体心理\"><a href=\"#群体心理\" class=\"headerlink\" title=\"群体心理\"></a>群体心理</h2><h3 id=\"群体的一般特征\"><a href=\"#群体的一般特征\" class=\"headerlink\" title=\"群体的一般特征\"></a>群体的一般特征</h3><ul>\n<li><strong>群体在智力上总是低于孤立的个人</strong>，在感情方面则可好可坏</li>\n<li>决定群体特点的原因<ul>\n<li>群体使个人的责任感消失</li>\n<li>群体中的感情与行动具有传染性，足以使人为了群体而牺牲个人利益</li>\n<li>群体具有类似于催眠的强大暗示力量</li>\n</ul>\n</li>\n<li>组成群体个人的特点<ul>\n<li>有意识人格消失，无意识人格得势</li>\n<li>思想与感情因暗示而转向集体方向</li>\n<li>立即把暗示的观念转化为行动的倾向</li>\n<li>概要: 结果<ul>\n<li>个人受本能支配</li>\n<li>甘心被言辞和形象所打动</li>\n<li>做出作为个人完全不可能同意的决定  </li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","more":"<h3 id=\"群体的感情和道德观\"><a href=\"#群体的感情和道德观\" class=\"headerlink\" title=\"群体的感情和道德观\"></a>群体的感情和道德观</h3><ul>\n<li>群体的冲动、易变和急躁<ul>\n<li>群体是刺激因素的奴隶——冲动</li>\n<li>群体不会深思熟虑，可以先后被矛盾情感激发——易变</li>\n<li>群体中的个体感到人数赋予他的力量，产生狂热的激情，并立刻屈从于这种诱惑——急躁</li>\n</ul>\n</li>\n<li>群体的易受暗示和轻信<ul>\n<li>群体随时听命于一切暗示，失去一切批判能力</li>\n<li>群体用形象而不是逻辑来思维，不对主观与客观加以区分，把幻觉与真实混为一谈</li>\n<li>集体观察极有可能出错，大多数时候表达的是个人幻觉，群体证词极不可靠</li>\n</ul>\n</li>\n<li>群体情绪的夸张与单纯<ul>\n<li>群体常常夸大自己的感情，因此只会被极端感情所打动</li>\n<li>个人难以预测群体的决定</li>\n<li>群体仅仅能够把感情提升到极低或极高的境界</li>\n</ul>\n</li>\n<li>群体的偏执、专横和保守<ul>\n<li><strong>群体对意见或想法会全盘接受或一概拒绝——偏执</strong></li>\n<li>群体对何为真理何为谬误不容怀疑——专横</li>\n<li>群体反抗软弱，对强权低声下气，容易屈从等级制，本能地变成奴才——保守</li>\n</ul>\n</li>\n<li>群体的道德<ul>\n<li>人们在群体中表现出破坏性的、欺压弱者的本能</li>\n<li>对群体给予恰当的影响，它就会为自己所信奉的理想慷慨赴死</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体的观念、推理与想象力\"><a href=\"#群体的观念、推理与想象力\" class=\"headerlink\" title=\"群体的观念、推理与想象力\"></a>群体的观念、推理与想象力</h3><ul>\n<li>群体的观念<ul>\n<li>相互矛盾的观念可以在群体的不同阶段共存</li>\n<li>高深的观念必须经过改造才能为群体接受</li>\n<li>观念在扎根后产生强大的社会影响，无论它是否蕴含真理</li>\n</ul>\n</li>\n<li>群体的理性<ul>\n<li>群体几乎不受理性的影响，没有推理能力</li>\n<li><strong>群体推理的特点：混淆表面相似的事物，把具体的事物普遍化</strong></li>\n</ul>\n</li>\n<li>群体的想象力<ul>\n<li>群体有强大、活跃、敏感的想象力</li>\n<li>群体只会被形象所打动</li>\n<li>群体的想象力是政客的权力基础</li>\n<li><strong>影响民众想象力的是事实发生与引起注意的方式，而不是事实本身</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体信仰所采取的宗教形式\"><a href=\"#群体信仰所采取的宗教形式\" class=\"headerlink\" title=\"群体信仰所采取的宗教形式\"></a>群体信仰所采取的宗教形式</h3><ul>\n<li>信念采取宗教的本质形式从而变得强大</li>\n<li>宗教或政治信条被接受是因为它激发了群体的想象力，使他们在崇拜服从中找到了自己的幸福，随时准备为之牺牲</li>\n<li>群体永远需要一个上帝</li>\n<li>历史上的大事件都是宗教感情的结果</li>\n</ul>\n<h2 id=\"群体的意见与信念\"><a href=\"#群体的意见与信念\" class=\"headerlink\" title=\"群体的意见与信念\"></a>群体的意见与信念</h2><h3 id=\"群体的意见和信念中的间接因素\"><a href=\"#群体的意见和信念中的间接因素\" class=\"headerlink\" title=\"群体的意见和信念中的间接因素\"></a>群体的意见和信念中的间接因素</h3><ul>\n<li>间接因素：使群体接受某些排他信念的准备性因素</li>\n<li>种族<ul>\n<li>种族是最为强大的间接因素</li>\n<li>文明中的一切要素，在种族间传递时都会发生变化</li>\n<li>环境、社会事件等社会暗示性因素在长期无法与种族因素相对立</li>\n</ul>\n</li>\n<li>传统<ul>\n<li>传统代表过去的观念、欲望和感情</li>\n<li>传统是种族综合作用的产物</li>\n<li>传统是文明的基础，破坏传统是进步的基础</li>\n<li>群体倾向于维护传统，尤其是有产群体</li>\n</ul>\n</li>\n<li>时间<ul>\n<li>时间使社会由无序走向有序</li>\n</ul>\n</li>\n<li>政治和社会制度<ul>\n<li>制度和政府都是种族的产物，是时代的制造物</li>\n<li>一个民族并没有真正改变其各种制度的能力</li>\n<li>制度无法深刻影响群体禀性</li>\n</ul>\n</li>\n<li>教育<ul>\n<li>教育应当重视生活实践</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体意见的直接因素\"><a href=\"#群体意见的直接因素\" class=\"headerlink\" title=\"群体意见的直接因素\"></a>群体意见的直接因素</h3><ul>\n<li>直接因素：实际说服群体接受观念的因素</li>\n<li>形象、词语和套话<ul>\n<li>某些词语和套话可以激活群体心中的形象，产生强大的力量，说理与论证无法战胜他们</li>\n<li>最不明确的词语有时产生的力量最大</li>\n<li>词语唤起的形象独立于他们的含义，词语的意义随着时代会发生巨大变迁</li>\n<li>空话使得使用者免去思考的义务</li>\n<li>给旧事物更换名称有防止不利联想的政治效用</li>\n<li>“民主”一词在不同国家亦有不同的理解方式</li>\n</ul>\n</li>\n<li>幻觉<ul>\n<li>群众必须拥有自己的幻想，因此会本能地迎合提供幻想的人</li>\n<li>宗教，政治观念等强大的原因是具有幻想</li>\n<li><strong>群众更喜欢幻觉而不是不合口味的真理</strong></li>\n</ul>\n</li>\n<li>经验<ul>\n<li>只有经验才能让真理在群众心中得到认可</li>\n<li>经验需要反复出现来产生效果</li>\n<li>为使群众获得经验而说服他们常常需要付出代价</li>\n</ul>\n</li>\n<li>理性<ul>\n<li>群体只受无意识感情的影响，从来不受理性的指引</li>\n<li>尽管存在理性，文明的动力仍然是各种感情</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体领袖及其说服的手法\"><a href=\"#群体领袖及其说服的手法\" class=\"headerlink\" title=\"群体领袖及其说服的手法\"></a>群体领袖及其说服的手法</h3><ul>\n<li>群体的领袖<ul>\n<li>一切群体动物有服从首领的本能需要</li>\n<li>领袖常常被观念所迷惑，具有强烈的信仰与坚定的信念</li>\n<li>信仰的建立永远取决于人群中领袖的作用</li>\n<li>群众领袖握有非常专制的权威</li>\n</ul>\n</li>\n<li>领袖的动员手段：断言、重复和传染<ul>\n<li>一个断言越是简单明了，证据和证明看上去越贫乏，它的威力就越大</li>\n<li>得到断言的事物通过不断重复而扎根</li>\n<li>当断言得到有效重复，不再存在异议，形成的流行意见会开始传染的过程</li>\n<li><strong>人有模仿的天性，支配大众的是榜样而不是论证</strong></li>\n<li>民众的意见不久会扩散到上层，成为普遍意见</li>\n</ul>\n</li>\n<li>名望<ul>\n<li>被普及的观念在环境中获得的力量成为名望</li>\n<li>现实中的名望是某个人，某本著作或某个观念对我们头脑的支配力</li>\n<li>名望阻止我们看到事物的本来面目，使我们失去批判能力</li>\n<li><strong>人们倾向于附和而不是证实对有名望事物的判断</strong></li>\n<li>名望是说服群众的一个基本因素</li>\n<li>缺少成功的名望会在短时间内消失，群众将会倾向于报复他们</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"群体的信念和意见的变化范围\"><a href=\"#群体的信念和意见的变化范围\" class=\"headerlink\" title=\"群体的信念和意见的变化范围\"></a>群体的信念和意见的变化范围</h3><ul>\n<li>牢固的信念<ul>\n<li>某些牢固的信念不易改变，构成了文明的真正基础</li>\n<li>通常只有暴力革命才能根除牢固的信念</li>\n<li>当信念价值开始受到质疑时，他就开始衰亡</li>\n<li>普遍信念的荒谬性不会阻碍它们的传播</li>\n</ul>\n</li>\n<li>群体意见的多变<ul>\n<li>与民族的普遍信念和情感相悖的意见没有持久力</li>\n<li>近百年来观念和信仰发生了显著的多样化</li>\n<li>新闻业的发展将对立意见带给群众，使得普遍意见难以建立</li>\n<li>不存在引导意见的力量与普遍信仰的毁灭使得对一切秩序都存在极端分歧的信念，这导致群众对一切不触及自身直接利益的事情漠不关心</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"不同群体的分类及其特点\"><a href=\"#不同群体的分类及其特点\" class=\"headerlink\" title=\"不同群体的分类及其特点\"></a>不同群体的分类及其特点</h2><h3 id=\"群体的分类\"><a href=\"#群体的分类\" class=\"headerlink\" title=\"群体的分类\"></a>群体的分类</h3><ul>\n<li>异质性群体<ul>\n<li>异质性群体由各种特点、各种职业、各种智力水平的个人组成</li>\n<li>种族的气质决定了群体的性格</li>\n<li>有名称的群体（如议会）发挥了无名称群体（如街头群体）所缺乏的责任感</li>\n</ul>\n</li>\n<li>同质性群体<ul>\n<li>同质性团体靠共同的信仰、职业或利益与生活习惯所联系</li>\n<li>同质性群体包括派别、身份团体与阶级</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"犯罪群体\"><a href=\"#犯罪群体\" class=\"headerlink\" title=\"犯罪群体\"></a>犯罪群体</h3><ul>\n<li>犯罪群体中的个体在参与犯罪时坚信他们的行为是履行责任，在心理上不能严格称之为犯罪</li>\n<li>群体行为是无意识的</li>\n<li>在犯罪群体中也能表现出严格的道德观念</li>\n</ul>\n<h3 id=\"刑事案件的陪审团\"><a href=\"#刑事案件的陪审团\" class=\"headerlink\" title=\"刑事案件的陪审团\"></a>刑事案件的陪审团</h3><ul>\n<li>陪审团的判决往往独立于组成它的人员成分</li>\n<li>陪审团对自己有可能成为受害者的罪行毫不留情，对感情原因违法的案件则优柔寡断</li>\n<li>陪审团在判决时深受双方名望的影响</li>\n<li>律师的主要用心在于打动陪审团的感情，尤其是那些左右着普遍观点的灵魂人物</li>\n<li>陪审团能够有效缓解法律的严酷性</li>\n</ul>\n<h3 id=\"选民团体\"><a href=\"#选民团体\" class=\"headerlink\" title=\"选民团体\"></a>选民团体</h3><ul>\n<li>被选举人的名望与财富是当选的必要因素</li>\n<li>竞选演说常常用到领袖的动员手段</li>\n<li>书面纲领不可过于绝对，但口头纲领则可以随意承诺</li>\n<li>由于低下的群体智力，限制选举权不会改变选举的结果</li>\n</ul>\n<h3 id=\"议会\"><a href=\"#议会\" class=\"headerlink\" title=\"议会\"></a>议会</h3><ul>\n<li>意见的简单化是议会最重要的特征之一</li>\n<li>处于主导地位的依然是团体的领袖</li>\n</ul>\n<h2 id=\"总结：群体不善推理，却急于采取行动\"><a href=\"#总结：群体不善推理，却急于采取行动\" class=\"headerlink\" title=\"总结：群体不善推理，却急于采取行动\"></a>总结：群体不善推理，却急于采取行动</h2><p>链接：<a href=\"/files/notes/The_Crowd.pdf\">思维导图PDF下载</a></p>"},{"title":"The Pragmatic Programmer Quick Reference Guide","date":"2019-02-21T16:00:00.000Z","_content":"# The Pragmatic Programmer  \nThis article summarizes the tips and checklists found in [The Pragmatic Programmer](http://www.amazon.com/exec/obidos/ASIN/020161622X/codinghorror-20).\n## Tips\n1. **Care About Your Craft**   \nWhy spend your life developing software unless you care about doing it well?\n2. **Think About Your Work**   \nTurn off the autopilot and take control. Constantly critique and appraise your work.\n3. **Provide Options, Don't Make Lame Excuses**  \nInstead of excuses, provide options. Don't say it can't be done; explain what can be done.\n4. **Don't Live with Broken Windows**  \nFix bad designs, wrong decisions, and poor code when you see them.\n5. **Be a Catalyst for Change**  \nYou can't force change on people. Instead, show them how the future might be and help them participate in creating it.\n<!-- more --> \n6. **Remember the Big Picture**  \nDon't get so engrossed in the details that you forget to check what's happening around you.\n7. **Make Quality a Requirements Issue**  \nInvolve your users in determining the project's real quality requirements.\n8. **Invest Regularly in Your Knowledge Portfolio**  \nMake learning a habit.\n9. **Critically Analyze What You Read and Hear**  \nDon't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.\n10. **It's Both What You Say and the Way You Say It**  \nThere's no point in having great ideas if you don't communicate them effectively.\n11. **DRY–Don't Repeat Yourself**  \nEvery piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n12. **Make It Easy to Reuse**  \nIf it's easy to reuse, people will. Create an environment that supports reuse.\n13. **Eliminate Effects Between Unrelated Things**  \nDesign components that are self-contained. independent, and have a single, well-defined purpose.\n14. **There Are No Final Decisions**  \nNo decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.\n15. **Use Tracer Bullets to Find the Target**    \nTracer bullets let you home in on your target by trying things and seeing how close they land.\n16. **Prototype to Learn**  \nPrototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.\n17. **Program Close to the Problem Domain**  \nDesign and code in your user's language.\n18. **Estimate to Avoid Surprises**  \nEstimate before you start. You'll spot potential problems up front.\n19. **Iterate the Schedule with the Code**  \nUse experience you gain as you implement to refine the project time scales.\n20. **Keep Knowledge in Plain Text**  \nPlain text won't become obsolete. It helps leverage your work and simplifies debugging and testing.\n21. **Use the Power of Command Shells**  \nUse the shell when graphical user interfaces don't cut it.\n22. **Use a Single Editor Well**  \nThe editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.\n23. **Always Use Source Code Control**  \nSource code control is a time machine for your work—you can go back.\n24. **Fix the Problem, Not the Blame**  \nIt doesn't really matter whether the bug is your fault or someone else's—it is still your problem, and it still needs to be fixed.\n25. **Don't Panic When Debugging**  \nTake a deep breath and THINK! about what could be causing the bug.\n26. **\"Select\" Isn't Broken.**  \nIt is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.\n27. **Don't Assume It—Prove It**  \nProve your assumptions in the actual environment-- with real data and boundary conditions.\n28. **Learn a Text Manipulation Language**  \nYou spend a large part of each day working with text. Why not have the computer do some of it for you?\n29. **Write Code That Writes Code**  \nCode generators increase your productivity and help avoid duplication.\n30. **You Can't Write Perfect Software**  \nSoftware can't be perfect. Protect your code and users from the inevitable errors.\n31. **Design with Contracts**  \nUse contracts to document and verify that code does no more and no less than it claims to do.\n32. **Crash Early**  \nA dead program normally does a lot less damage than a crippled one.\n33. **Use Assertions to Prevent the Impossible**  \nAssertions validate your assumptions. Use them to protect your code from an uncertain world.\n34. **Use Exceptions for Exceptional Problems**  \nExceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things.\n35. **Finish What You Start**  \nWhere possible, the routine or object that allocates a resource should be responsible for deallocating it.\n36. **Minimize Coupling Between Modules**  \nAvoid coupling by writing \"shy\" code and applying the Law of Demeter.\n37. **Configure, Don't Integrate**  \nImplement technology choices for an application as configuration options, not through integration or engineering.\n38. **Put Abstractions in Code, Details in Metadata**  \nProgram for the general case, and put the specifics outside the compiled code base.\n39. **Analyze Workflow to Improve Concurrency**  \nExploit concurrency in your user's workflow.\n40. **Design Using Services**  \nDesign in terms of services—independent, concurrent objects behind well-defined, consistent interfaces.\n41. **Always Design for Concurrency**  \nAllow for concurrency, and you'll design cleaner interfaces with fewer assumptions.\n42. **Separate Views from Models**  \nGain flexibility at low cost by designing your application in terms of models and views.\n43. **Use Blackboards to Coordinate Workflow**  \nUse blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.\n44. **Don't Program by Coincidence**  \nRely only on reliable things. Beware of accidental complexity, and don't confuse a happy coincidence with a purposeful plan.\n45. **Estimate the Order of Your Algorithms**  \nGet a feel for how long things are likely to take before you write code.\n46. **Test Your Estimates**  \nMathematical analysis of algorithms doesn't tell you everything. Try timing your code in its target environment.\n47. **Refactor Early, Refactor Often**  \nJust as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.\n48. **Design to Test**  \nStart thinking about testing before you write a line of code.\n49. **Test Your Software, or Your Users Will**  \nTest ruthlessly. Don't make your users find bugs for you.\n50. **Don't Use Wizard Code You Don't Understand**  \nWizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project.\n51. **Don't Gather Requirements–Dig for Them**  \nRequirements rarely lie on the surface. They're buried deep beneath layers of assumptions, misconceptions, and politics.\n52. **Workwith a User to Think Like a User**  \nIt's the best way to gain insight into how the system will really be used.\n53. **Abstractions Live Longer than Details**  \nInvest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies.\n54. **Use a Project Glossary**   \nCreate and maintain a single source of all the specific terms and vocabulary for a project.\n55. **Don't Think Outside the Box–Find the Box**  \nWhen faced with an impossible problem, identify the real constraints. Ask yourself: \"Does it have to be done this way? Does it have to be done at all?\"\n56. **Start When You're Ready**  \nYou've been building experience all your life. Don't ignore niggling doubts.\n57. **Some Things Are Better Done than Described**  \nDon't fall into the specification spiral—at some point you need to start coding.\n58. **Don't Be a Slave to Formal Methods.**  \nDon't blindly adopt any technique without putting it into the context of your development practices and capabilities.\n59. **Costly Tools Don't Produce Better Designs**  \nBeware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits.\n60. **Organize Teams Around Functionality**  \nDon't separate designers from coders, testers from data modelers. Build teams the way you build code.\n61. **Don't Use Manual Procedures**  \nA shell script or batch file will execute the same instructions, in the same order, time after time.\n62. **Test Early. Test Often. Test Automatically**  \nTests that run with every build are much more effective than test plans that sit on a shelf.\n63. **Coding Ain't Done 'Til All the Tests Run**  \n'Nuff said.\n64. **Use Saboteurs to Test Your Testing**  \nIntroduce bugs on purpose in a separate copy of the source to verify that testing will catch them.\n65. **Test State Coverage, Not Code Coverage**  \nIdentify and test significant program states. Just testing lines of code isn't enough.\n66. **Find Bugs Once**  \nOnce a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.\n67. **English is Just a Programming Language**  \nWrite documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on.\n68. **Build Documentation In, Don't Bolt It On**  \nDocumentation created separately from code is less likely to be correct and up to date.\n69. **Gently Exceed Your Users' Expectations**  \nCome to understand your users' expectations, then deliver just that little bit more.\n70. **Sign Your Work**  \nCraftsmen of an earlier age were proud to sign their work. You should be, too.\n\n## Checklists\n\n1. **Languages To Learn**  \nTired of C, C++, and Java? Try CLOS, Dylan, Eiffel, Objective C, Prolog, Smalltalk, or TOM. Each of these languages has different capabilities and a different \"flavor.\" Try a small project at home using one or more of them.\n2. **The WISDOM Acrostic**  \n- **W**hat do you want them to learn?\n- What **I**s their interest in what you've got to say?\n- How **S**ophisticated are they?\n- How much **D**etail do they want?\n- Whom do you want to **O**wn the information?\n- How can you **M**otivate them to listen to you?\n3. **How to Maintain Orthogonality**  \n- Design independent, well-defined components.\n- Keep your code decoupled.\n- Avoid global data.\n- Refactor similar functions.\n4. **Things to prototype**  \n- Architecture\n- New functionality in an existing system\n- Structure or contents of external data\n- Third-party tools or components\n- Performance issues\n- User interface design\n5. **Architectural Questions**  \n- Are responsibilities well defined?\n- Are the collaborations well defined?\n- Is coupling minimized?\n- Can you identify potential duplication?\n- Are interface definitions and constraints acceptable?\n- Can modules access needed data—when needed?\n6. **Debugging Checklist**  \n- Is the problem being reported a direct result of the underlying bug, or merely a symptom?\n- Is the bug really in the compiler? Is it in the OS? Or is it in your code?\n- If you explained this problem in detail to a coworker, what would you say?\n- If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data?\n- Do the conditions that caused this bug exist anywhere else in the system?\n7. **Law of Demeter for FunctionsAn object's method should call only methods belonging to:**  \n- Itself\n- Any parameters passed in\n- Objects it creates\n- Component objects\n8. **How to Program Deliberately**  \n- Stay aware of what you're doing.\n- Don't code blindfolded.\n- Proceed from a plan.\n- Rely only on reliable things.\n- Document your assumptions.\n- Test assumptions as well as code.\n- Prioritize your effort.\n- Don't be a slave to history.\n9. **When to Refactor**  \n- You discover a violation of the DRY principle.\n- You find things that could be more orthogonal.\n- Your knowledge improves.\n- The requirements evolve.\n- You need to improve performance.\n10. **Cutting the Gordian Knot When solving impossible problems, ask yourself:**  \n- Is there an easier way?\n- Am I solving the right problem?\n- Why is this a problem?\n- What makes it hard?\n- Do I have to do it this way?\n- Does it have to be done at all?\n11. **Aspects of Testing**\n- Unit testing\n- Integration testing\n- Validation and verification\n- Resource exhaustion, errors, and recovery\n- Performance testing\n- Usability testing\n- Testing the tests themselves\n\n\n\n\n","source":"_posts/The-Pragmatic-Programmer-Quick-Reference-Guide.md","raw":"---\ntitle: The Pragmatic Programmer Quick Reference Guide\ndate: 2019-02-22\ntags: [Reading Notes]\n---\n# The Pragmatic Programmer  \nThis article summarizes the tips and checklists found in [The Pragmatic Programmer](http://www.amazon.com/exec/obidos/ASIN/020161622X/codinghorror-20).\n## Tips\n1. **Care About Your Craft**   \nWhy spend your life developing software unless you care about doing it well?\n2. **Think About Your Work**   \nTurn off the autopilot and take control. Constantly critique and appraise your work.\n3. **Provide Options, Don't Make Lame Excuses**  \nInstead of excuses, provide options. Don't say it can't be done; explain what can be done.\n4. **Don't Live with Broken Windows**  \nFix bad designs, wrong decisions, and poor code when you see them.\n5. **Be a Catalyst for Change**  \nYou can't force change on people. Instead, show them how the future might be and help them participate in creating it.\n<!-- more --> \n6. **Remember the Big Picture**  \nDon't get so engrossed in the details that you forget to check what's happening around you.\n7. **Make Quality a Requirements Issue**  \nInvolve your users in determining the project's real quality requirements.\n8. **Invest Regularly in Your Knowledge Portfolio**  \nMake learning a habit.\n9. **Critically Analyze What You Read and Hear**  \nDon't be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.\n10. **It's Both What You Say and the Way You Say It**  \nThere's no point in having great ideas if you don't communicate them effectively.\n11. **DRY–Don't Repeat Yourself**  \nEvery piece of knowledge must have a single, unambiguous, authoritative representation within a system.\n12. **Make It Easy to Reuse**  \nIf it's easy to reuse, people will. Create an environment that supports reuse.\n13. **Eliminate Effects Between Unrelated Things**  \nDesign components that are self-contained. independent, and have a single, well-defined purpose.\n14. **There Are No Final Decisions**  \nNo decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.\n15. **Use Tracer Bullets to Find the Target**    \nTracer bullets let you home in on your target by trying things and seeing how close they land.\n16. **Prototype to Learn**  \nPrototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.\n17. **Program Close to the Problem Domain**  \nDesign and code in your user's language.\n18. **Estimate to Avoid Surprises**  \nEstimate before you start. You'll spot potential problems up front.\n19. **Iterate the Schedule with the Code**  \nUse experience you gain as you implement to refine the project time scales.\n20. **Keep Knowledge in Plain Text**  \nPlain text won't become obsolete. It helps leverage your work and simplifies debugging and testing.\n21. **Use the Power of Command Shells**  \nUse the shell when graphical user interfaces don't cut it.\n22. **Use a Single Editor Well**  \nThe editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.\n23. **Always Use Source Code Control**  \nSource code control is a time machine for your work—you can go back.\n24. **Fix the Problem, Not the Blame**  \nIt doesn't really matter whether the bug is your fault or someone else's—it is still your problem, and it still needs to be fixed.\n25. **Don't Panic When Debugging**  \nTake a deep breath and THINK! about what could be causing the bug.\n26. **\"Select\" Isn't Broken.**  \nIt is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.\n27. **Don't Assume It—Prove It**  \nProve your assumptions in the actual environment-- with real data and boundary conditions.\n28. **Learn a Text Manipulation Language**  \nYou spend a large part of each day working with text. Why not have the computer do some of it for you?\n29. **Write Code That Writes Code**  \nCode generators increase your productivity and help avoid duplication.\n30. **You Can't Write Perfect Software**  \nSoftware can't be perfect. Protect your code and users from the inevitable errors.\n31. **Design with Contracts**  \nUse contracts to document and verify that code does no more and no less than it claims to do.\n32. **Crash Early**  \nA dead program normally does a lot less damage than a crippled one.\n33. **Use Assertions to Prevent the Impossible**  \nAssertions validate your assumptions. Use them to protect your code from an uncertain world.\n34. **Use Exceptions for Exceptional Problems**  \nExceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things.\n35. **Finish What You Start**  \nWhere possible, the routine or object that allocates a resource should be responsible for deallocating it.\n36. **Minimize Coupling Between Modules**  \nAvoid coupling by writing \"shy\" code and applying the Law of Demeter.\n37. **Configure, Don't Integrate**  \nImplement technology choices for an application as configuration options, not through integration or engineering.\n38. **Put Abstractions in Code, Details in Metadata**  \nProgram for the general case, and put the specifics outside the compiled code base.\n39. **Analyze Workflow to Improve Concurrency**  \nExploit concurrency in your user's workflow.\n40. **Design Using Services**  \nDesign in terms of services—independent, concurrent objects behind well-defined, consistent interfaces.\n41. **Always Design for Concurrency**  \nAllow for concurrency, and you'll design cleaner interfaces with fewer assumptions.\n42. **Separate Views from Models**  \nGain flexibility at low cost by designing your application in terms of models and views.\n43. **Use Blackboards to Coordinate Workflow**  \nUse blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.\n44. **Don't Program by Coincidence**  \nRely only on reliable things. Beware of accidental complexity, and don't confuse a happy coincidence with a purposeful plan.\n45. **Estimate the Order of Your Algorithms**  \nGet a feel for how long things are likely to take before you write code.\n46. **Test Your Estimates**  \nMathematical analysis of algorithms doesn't tell you everything. Try timing your code in its target environment.\n47. **Refactor Early, Refactor Often**  \nJust as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.\n48. **Design to Test**  \nStart thinking about testing before you write a line of code.\n49. **Test Your Software, or Your Users Will**  \nTest ruthlessly. Don't make your users find bugs for you.\n50. **Don't Use Wizard Code You Don't Understand**  \nWizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project.\n51. **Don't Gather Requirements–Dig for Them**  \nRequirements rarely lie on the surface. They're buried deep beneath layers of assumptions, misconceptions, and politics.\n52. **Workwith a User to Think Like a User**  \nIt's the best way to gain insight into how the system will really be used.\n53. **Abstractions Live Longer than Details**  \nInvest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies.\n54. **Use a Project Glossary**   \nCreate and maintain a single source of all the specific terms and vocabulary for a project.\n55. **Don't Think Outside the Box–Find the Box**  \nWhen faced with an impossible problem, identify the real constraints. Ask yourself: \"Does it have to be done this way? Does it have to be done at all?\"\n56. **Start When You're Ready**  \nYou've been building experience all your life. Don't ignore niggling doubts.\n57. **Some Things Are Better Done than Described**  \nDon't fall into the specification spiral—at some point you need to start coding.\n58. **Don't Be a Slave to Formal Methods.**  \nDon't blindly adopt any technique without putting it into the context of your development practices and capabilities.\n59. **Costly Tools Don't Produce Better Designs**  \nBeware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits.\n60. **Organize Teams Around Functionality**  \nDon't separate designers from coders, testers from data modelers. Build teams the way you build code.\n61. **Don't Use Manual Procedures**  \nA shell script or batch file will execute the same instructions, in the same order, time after time.\n62. **Test Early. Test Often. Test Automatically**  \nTests that run with every build are much more effective than test plans that sit on a shelf.\n63. **Coding Ain't Done 'Til All the Tests Run**  \n'Nuff said.\n64. **Use Saboteurs to Test Your Testing**  \nIntroduce bugs on purpose in a separate copy of the source to verify that testing will catch them.\n65. **Test State Coverage, Not Code Coverage**  \nIdentify and test significant program states. Just testing lines of code isn't enough.\n66. **Find Bugs Once**  \nOnce a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.\n67. **English is Just a Programming Language**  \nWrite documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on.\n68. **Build Documentation In, Don't Bolt It On**  \nDocumentation created separately from code is less likely to be correct and up to date.\n69. **Gently Exceed Your Users' Expectations**  \nCome to understand your users' expectations, then deliver just that little bit more.\n70. **Sign Your Work**  \nCraftsmen of an earlier age were proud to sign their work. You should be, too.\n\n## Checklists\n\n1. **Languages To Learn**  \nTired of C, C++, and Java? Try CLOS, Dylan, Eiffel, Objective C, Prolog, Smalltalk, or TOM. Each of these languages has different capabilities and a different \"flavor.\" Try a small project at home using one or more of them.\n2. **The WISDOM Acrostic**  \n- **W**hat do you want them to learn?\n- What **I**s their interest in what you've got to say?\n- How **S**ophisticated are they?\n- How much **D**etail do they want?\n- Whom do you want to **O**wn the information?\n- How can you **M**otivate them to listen to you?\n3. **How to Maintain Orthogonality**  \n- Design independent, well-defined components.\n- Keep your code decoupled.\n- Avoid global data.\n- Refactor similar functions.\n4. **Things to prototype**  \n- Architecture\n- New functionality in an existing system\n- Structure or contents of external data\n- Third-party tools or components\n- Performance issues\n- User interface design\n5. **Architectural Questions**  \n- Are responsibilities well defined?\n- Are the collaborations well defined?\n- Is coupling minimized?\n- Can you identify potential duplication?\n- Are interface definitions and constraints acceptable?\n- Can modules access needed data—when needed?\n6. **Debugging Checklist**  \n- Is the problem being reported a direct result of the underlying bug, or merely a symptom?\n- Is the bug really in the compiler? Is it in the OS? Or is it in your code?\n- If you explained this problem in detail to a coworker, what would you say?\n- If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data?\n- Do the conditions that caused this bug exist anywhere else in the system?\n7. **Law of Demeter for FunctionsAn object's method should call only methods belonging to:**  \n- Itself\n- Any parameters passed in\n- Objects it creates\n- Component objects\n8. **How to Program Deliberately**  \n- Stay aware of what you're doing.\n- Don't code blindfolded.\n- Proceed from a plan.\n- Rely only on reliable things.\n- Document your assumptions.\n- Test assumptions as well as code.\n- Prioritize your effort.\n- Don't be a slave to history.\n9. **When to Refactor**  \n- You discover a violation of the DRY principle.\n- You find things that could be more orthogonal.\n- Your knowledge improves.\n- The requirements evolve.\n- You need to improve performance.\n10. **Cutting the Gordian Knot When solving impossible problems, ask yourself:**  \n- Is there an easier way?\n- Am I solving the right problem?\n- Why is this a problem?\n- What makes it hard?\n- Do I have to do it this way?\n- Does it have to be done at all?\n11. **Aspects of Testing**\n- Unit testing\n- Integration testing\n- Validation and verification\n- Resource exhaustion, errors, and recovery\n- Performance testing\n- Usability testing\n- Testing the tests themselves\n\n\n\n\n","slug":"The-Pragmatic-Programmer-Quick-Reference-Guide","published":1,"updated":"2019-04-30T16:42:31.325Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbkw000y30uvvieczye3","content":"<h1 id=\"The-Pragmatic-Programmer\"><a href=\"#The-Pragmatic-Programmer\" class=\"headerlink\" title=\"The Pragmatic Programmer\"></a>The Pragmatic Programmer</h1><p>This article summarizes the tips and checklists found in <a href=\"http://www.amazon.com/exec/obidos/ASIN/020161622X/codinghorror-20\" target=\"_blank\" rel=\"noopener\">The Pragmatic Programmer</a>.</p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ol>\n<li><strong>Care About Your Craft</strong><br>Why spend your life developing software unless you care about doing it well?</li>\n<li><strong>Think About Your Work</strong><br>Turn off the autopilot and take control. Constantly critique and appraise your work.</li>\n<li><strong>Provide Options, Don’t Make Lame Excuses</strong><br>Instead of excuses, provide options. Don’t say it can’t be done; explain what can be done.</li>\n<li><strong>Don’t Live with Broken Windows</strong><br>Fix bad designs, wrong decisions, and poor code when you see them.</li>\n<li><strong>Be a Catalyst for Change</strong><br>You can’t force change on people. Instead, show them how the future might be and help them participate in creating it.<a id=\"more\"></a> </li>\n<li><strong>Remember the Big Picture</strong><br>Don’t get so engrossed in the details that you forget to check what’s happening around you.</li>\n<li><strong>Make Quality a Requirements Issue</strong><br>Involve your users in determining the project’s real quality requirements.</li>\n<li><strong>Invest Regularly in Your Knowledge Portfolio</strong><br>Make learning a habit.</li>\n<li><strong>Critically Analyze What You Read and Hear</strong><br>Don’t be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.</li>\n<li><strong>It’s Both What You Say and the Way You Say It</strong><br>There’s no point in having great ideas if you don’t communicate them effectively.</li>\n<li><strong>DRY–Don’t Repeat Yourself</strong><br>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</li>\n<li><strong>Make It Easy to Reuse</strong><br>If it’s easy to reuse, people will. Create an environment that supports reuse.</li>\n<li><strong>Eliminate Effects Between Unrelated Things</strong><br>Design components that are self-contained. independent, and have a single, well-defined purpose.</li>\n<li><strong>There Are No Final Decisions</strong><br>No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.</li>\n<li><strong>Use Tracer Bullets to Find the Target</strong><br>Tracer bullets let you home in on your target by trying things and seeing how close they land.</li>\n<li><strong>Prototype to Learn</strong><br>Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.</li>\n<li><strong>Program Close to the Problem Domain</strong><br>Design and code in your user’s language.</li>\n<li><strong>Estimate to Avoid Surprises</strong><br>Estimate before you start. You’ll spot potential problems up front.</li>\n<li><strong>Iterate the Schedule with the Code</strong><br>Use experience you gain as you implement to refine the project time scales.</li>\n<li><strong>Keep Knowledge in Plain Text</strong><br>Plain text won’t become obsolete. It helps leverage your work and simplifies debugging and testing.</li>\n<li><strong>Use the Power of Command Shells</strong><br>Use the shell when graphical user interfaces don’t cut it.</li>\n<li><strong>Use a Single Editor Well</strong><br>The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.</li>\n<li><strong>Always Use Source Code Control</strong><br>Source code control is a time machine for your work—you can go back.</li>\n<li><strong>Fix the Problem, Not the Blame</strong><br>It doesn’t really matter whether the bug is your fault or someone else’s—it is still your problem, and it still needs to be fixed.</li>\n<li><strong>Don’t Panic When Debugging</strong><br>Take a deep breath and THINK! about what could be causing the bug.</li>\n<li><strong>“Select” Isn’t Broken.</strong><br>It is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.</li>\n<li><strong>Don’t Assume It—Prove It</strong><br>Prove your assumptions in the actual environment– with real data and boundary conditions.</li>\n<li><strong>Learn a Text Manipulation Language</strong><br>You spend a large part of each day working with text. Why not have the computer do some of it for you?</li>\n<li><strong>Write Code That Writes Code</strong><br>Code generators increase your productivity and help avoid duplication.</li>\n<li><strong>You Can’t Write Perfect Software</strong><br>Software can’t be perfect. Protect your code and users from the inevitable errors.</li>\n<li><strong>Design with Contracts</strong><br>Use contracts to document and verify that code does no more and no less than it claims to do.</li>\n<li><strong>Crash Early</strong><br>A dead program normally does a lot less damage than a crippled one.</li>\n<li><strong>Use Assertions to Prevent the Impossible</strong><br>Assertions validate your assumptions. Use them to protect your code from an uncertain world.</li>\n<li><strong>Use Exceptions for Exceptional Problems</strong><br>Exceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things.</li>\n<li><strong>Finish What You Start</strong><br>Where possible, the routine or object that allocates a resource should be responsible for deallocating it.</li>\n<li><strong>Minimize Coupling Between Modules</strong><br>Avoid coupling by writing “shy” code and applying the Law of Demeter.</li>\n<li><strong>Configure, Don’t Integrate</strong><br>Implement technology choices for an application as configuration options, not through integration or engineering.</li>\n<li><strong>Put Abstractions in Code, Details in Metadata</strong><br>Program for the general case, and put the specifics outside the compiled code base.</li>\n<li><strong>Analyze Workflow to Improve Concurrency</strong><br>Exploit concurrency in your user’s workflow.</li>\n<li><strong>Design Using Services</strong><br>Design in terms of services—independent, concurrent objects behind well-defined, consistent interfaces.</li>\n<li><strong>Always Design for Concurrency</strong><br>Allow for concurrency, and you’ll design cleaner interfaces with fewer assumptions.</li>\n<li><strong>Separate Views from Models</strong><br>Gain flexibility at low cost by designing your application in terms of models and views.</li>\n<li><strong>Use Blackboards to Coordinate Workflow</strong><br>Use blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.</li>\n<li><strong>Don’t Program by Coincidence</strong><br>Rely only on reliable things. Beware of accidental complexity, and don’t confuse a happy coincidence with a purposeful plan.</li>\n<li><strong>Estimate the Order of Your Algorithms</strong><br>Get a feel for how long things are likely to take before you write code.</li>\n<li><strong>Test Your Estimates</strong><br>Mathematical analysis of algorithms doesn’t tell you everything. Try timing your code in its target environment.</li>\n<li><strong>Refactor Early, Refactor Often</strong><br>Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.</li>\n<li><strong>Design to Test</strong><br>Start thinking about testing before you write a line of code.</li>\n<li><strong>Test Your Software, or Your Users Will</strong><br>Test ruthlessly. Don’t make your users find bugs for you.</li>\n<li><strong>Don’t Use Wizard Code You Don’t Understand</strong><br>Wizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project.</li>\n<li><strong>Don’t Gather Requirements–Dig for Them</strong><br>Requirements rarely lie on the surface. They’re buried deep beneath layers of assumptions, misconceptions, and politics.</li>\n<li><strong>Workwith a User to Think Like a User</strong><br>It’s the best way to gain insight into how the system will really be used.</li>\n<li><strong>Abstractions Live Longer than Details</strong><br>Invest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies.</li>\n<li><strong>Use a Project Glossary</strong><br>Create and maintain a single source of all the specific terms and vocabulary for a project.</li>\n<li><strong>Don’t Think Outside the Box–Find the Box</strong><br>When faced with an impossible problem, identify the real constraints. Ask yourself: “Does it have to be done this way? Does it have to be done at all?”</li>\n<li><strong>Start When You’re Ready</strong><br>You’ve been building experience all your life. Don’t ignore niggling doubts.</li>\n<li><strong>Some Things Are Better Done than Described</strong><br>Don’t fall into the specification spiral—at some point you need to start coding.</li>\n<li><strong>Don’t Be a Slave to Formal Methods.</strong><br>Don’t blindly adopt any technique without putting it into the context of your development practices and capabilities.</li>\n<li><strong>Costly Tools Don’t Produce Better Designs</strong><br>Beware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits.</li>\n<li><strong>Organize Teams Around Functionality</strong><br>Don’t separate designers from coders, testers from data modelers. Build teams the way you build code.</li>\n<li><strong>Don’t Use Manual Procedures</strong><br>A shell script or batch file will execute the same instructions, in the same order, time after time.</li>\n<li><strong>Test Early. Test Often. Test Automatically</strong><br>Tests that run with every build are much more effective than test plans that sit on a shelf.</li>\n<li><strong>Coding Ain’t Done ‘Til All the Tests Run</strong><br>‘Nuff said.</li>\n<li><strong>Use Saboteurs to Test Your Testing</strong><br>Introduce bugs on purpose in a separate copy of the source to verify that testing will catch them.</li>\n<li><strong>Test State Coverage, Not Code Coverage</strong><br>Identify and test significant program states. Just testing lines of code isn’t enough.</li>\n<li><strong>Find Bugs Once</strong><br>Once a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.</li>\n<li><strong>English is Just a Programming Language</strong><br>Write documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on.</li>\n<li><strong>Build Documentation In, Don’t Bolt It On</strong><br>Documentation created separately from code is less likely to be correct and up to date.</li>\n<li><strong>Gently Exceed Your Users’ Expectations</strong><br>Come to understand your users’ expectations, then deliver just that little bit more.</li>\n<li><strong>Sign Your Work</strong><br>Craftsmen of an earlier age were proud to sign their work. You should be, too.</li>\n</ol>\n<h2 id=\"Checklists\"><a href=\"#Checklists\" class=\"headerlink\" title=\"Checklists\"></a>Checklists</h2><ol>\n<li><strong>Languages To Learn</strong><br>Tired of C, C++, and Java? Try CLOS, Dylan, Eiffel, Objective C, Prolog, Smalltalk, or TOM. Each of these languages has different capabilities and a different “flavor.” Try a small project at home using one or more of them.</li>\n<li><strong>The WISDOM Acrostic</strong>  </li>\n</ol>\n<ul>\n<li><strong>W</strong>hat do you want them to learn?</li>\n<li>What <strong>I</strong>s their interest in what you’ve got to say?</li>\n<li>How <strong>S</strong>ophisticated are they?</li>\n<li>How much <strong>D</strong>etail do they want?</li>\n<li>Whom do you want to <strong>O</strong>wn the information?</li>\n<li>How can you <strong>M</strong>otivate them to listen to you?</li>\n</ul>\n<ol start=\"3\">\n<li><strong>How to Maintain Orthogonality</strong>  </li>\n</ol>\n<ul>\n<li>Design independent, well-defined components.</li>\n<li>Keep your code decoupled.</li>\n<li>Avoid global data.</li>\n<li>Refactor similar functions.</li>\n</ul>\n<ol start=\"4\">\n<li><strong>Things to prototype</strong>  </li>\n</ol>\n<ul>\n<li>Architecture</li>\n<li>New functionality in an existing system</li>\n<li>Structure or contents of external data</li>\n<li>Third-party tools or components</li>\n<li>Performance issues</li>\n<li>User interface design</li>\n</ul>\n<ol start=\"5\">\n<li><strong>Architectural Questions</strong>  </li>\n</ol>\n<ul>\n<li>Are responsibilities well defined?</li>\n<li>Are the collaborations well defined?</li>\n<li>Is coupling minimized?</li>\n<li>Can you identify potential duplication?</li>\n<li>Are interface definitions and constraints acceptable?</li>\n<li>Can modules access needed data—when needed?</li>\n</ul>\n<ol start=\"6\">\n<li><strong>Debugging Checklist</strong>  </li>\n</ol>\n<ul>\n<li>Is the problem being reported a direct result of the underlying bug, or merely a symptom?</li>\n<li>Is the bug really in the compiler? Is it in the OS? Or is it in your code?</li>\n<li>If you explained this problem in detail to a coworker, what would you say?</li>\n<li>If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data?</li>\n<li>Do the conditions that caused this bug exist anywhere else in the system?</li>\n</ul>\n<ol start=\"7\">\n<li><strong>Law of Demeter for FunctionsAn object’s method should call only methods belonging to:</strong>  </li>\n</ol>\n<ul>\n<li>Itself</li>\n<li>Any parameters passed in</li>\n<li>Objects it creates</li>\n<li>Component objects</li>\n</ul>\n<ol start=\"8\">\n<li><strong>How to Program Deliberately</strong>  </li>\n</ol>\n<ul>\n<li>Stay aware of what you’re doing.</li>\n<li>Don’t code blindfolded.</li>\n<li>Proceed from a plan.</li>\n<li>Rely only on reliable things.</li>\n<li>Document your assumptions.</li>\n<li>Test assumptions as well as code.</li>\n<li>Prioritize your effort.</li>\n<li>Don’t be a slave to history.</li>\n</ul>\n<ol start=\"9\">\n<li><strong>When to Refactor</strong>  </li>\n</ol>\n<ul>\n<li>You discover a violation of the DRY principle.</li>\n<li>You find things that could be more orthogonal.</li>\n<li>Your knowledge improves.</li>\n<li>The requirements evolve.</li>\n<li>You need to improve performance.</li>\n</ul>\n<ol start=\"10\">\n<li><strong>Cutting the Gordian Knot When solving impossible problems, ask yourself:</strong>  </li>\n</ol>\n<ul>\n<li>Is there an easier way?</li>\n<li>Am I solving the right problem?</li>\n<li>Why is this a problem?</li>\n<li>What makes it hard?</li>\n<li>Do I have to do it this way?</li>\n<li>Does it have to be done at all?</li>\n</ul>\n<ol start=\"11\">\n<li><strong>Aspects of Testing</strong></li>\n</ol>\n<ul>\n<li>Unit testing</li>\n<li>Integration testing</li>\n<li>Validation and verification</li>\n<li>Resource exhaustion, errors, and recovery</li>\n<li>Performance testing</li>\n<li>Usability testing</li>\n<li>Testing the tests themselves</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"The-Pragmatic-Programmer\"><a href=\"#The-Pragmatic-Programmer\" class=\"headerlink\" title=\"The Pragmatic Programmer\"></a>The Pragmatic Programmer</h1><p>This article summarizes the tips and checklists found in <a href=\"http://www.amazon.com/exec/obidos/ASIN/020161622X/codinghorror-20\" target=\"_blank\" rel=\"noopener\">The Pragmatic Programmer</a>.</p>\n<h2 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips\"></a>Tips</h2><ol>\n<li><strong>Care About Your Craft</strong><br>Why spend your life developing software unless you care about doing it well?</li>\n<li><strong>Think About Your Work</strong><br>Turn off the autopilot and take control. Constantly critique and appraise your work.</li>\n<li><strong>Provide Options, Don’t Make Lame Excuses</strong><br>Instead of excuses, provide options. Don’t say it can’t be done; explain what can be done.</li>\n<li><strong>Don’t Live with Broken Windows</strong><br>Fix bad designs, wrong decisions, and poor code when you see them.</li>\n<li><strong>Be a Catalyst for Change</strong><br>You can’t force change on people. Instead, show them how the future might be and help them participate in creating it.</li></ol>","more":"\n<li><strong>Remember the Big Picture</strong><br>Don’t get so engrossed in the details that you forget to check what’s happening around you.</li>\n<li><strong>Make Quality a Requirements Issue</strong><br>Involve your users in determining the project’s real quality requirements.</li>\n<li><strong>Invest Regularly in Your Knowledge Portfolio</strong><br>Make learning a habit.</li>\n<li><strong>Critically Analyze What You Read and Hear</strong><br>Don’t be swayed by vendors, media hype, or dogma. Analyze information in terms of you and your project.</li>\n<li><strong>It’s Both What You Say and the Way You Say It</strong><br>There’s no point in having great ideas if you don’t communicate them effectively.</li>\n<li><strong>DRY–Don’t Repeat Yourself</strong><br>Every piece of knowledge must have a single, unambiguous, authoritative representation within a system.</li>\n<li><strong>Make It Easy to Reuse</strong><br>If it’s easy to reuse, people will. Create an environment that supports reuse.</li>\n<li><strong>Eliminate Effects Between Unrelated Things</strong><br>Design components that are self-contained. independent, and have a single, well-defined purpose.</li>\n<li><strong>There Are No Final Decisions</strong><br>No decision is cast in stone. Instead, consider each as being written in the sand at the beach, and plan for change.</li>\n<li><strong>Use Tracer Bullets to Find the Target</strong><br>Tracer bullets let you home in on your target by trying things and seeing how close they land.</li>\n<li><strong>Prototype to Learn</strong><br>Prototyping is a learning experience. Its value lies not in the code you produce, but in the lessons you learn.</li>\n<li><strong>Program Close to the Problem Domain</strong><br>Design and code in your user’s language.</li>\n<li><strong>Estimate to Avoid Surprises</strong><br>Estimate before you start. You’ll spot potential problems up front.</li>\n<li><strong>Iterate the Schedule with the Code</strong><br>Use experience you gain as you implement to refine the project time scales.</li>\n<li><strong>Keep Knowledge in Plain Text</strong><br>Plain text won’t become obsolete. It helps leverage your work and simplifies debugging and testing.</li>\n<li><strong>Use the Power of Command Shells</strong><br>Use the shell when graphical user interfaces don’t cut it.</li>\n<li><strong>Use a Single Editor Well</strong><br>The editor should be an extension of your hand; make sure your editor is configurable, extensible, and programmable.</li>\n<li><strong>Always Use Source Code Control</strong><br>Source code control is a time machine for your work—you can go back.</li>\n<li><strong>Fix the Problem, Not the Blame</strong><br>It doesn’t really matter whether the bug is your fault or someone else’s—it is still your problem, and it still needs to be fixed.</li>\n<li><strong>Don’t Panic When Debugging</strong><br>Take a deep breath and THINK! about what could be causing the bug.</li>\n<li><strong>“Select” Isn’t Broken.</strong><br>It is rare to find a bug in the OS or the compiler, or even a third-party product or library. The bug is most likely in the application.</li>\n<li><strong>Don’t Assume It—Prove It</strong><br>Prove your assumptions in the actual environment– with real data and boundary conditions.</li>\n<li><strong>Learn a Text Manipulation Language</strong><br>You spend a large part of each day working with text. Why not have the computer do some of it for you?</li>\n<li><strong>Write Code That Writes Code</strong><br>Code generators increase your productivity and help avoid duplication.</li>\n<li><strong>You Can’t Write Perfect Software</strong><br>Software can’t be perfect. Protect your code and users from the inevitable errors.</li>\n<li><strong>Design with Contracts</strong><br>Use contracts to document and verify that code does no more and no less than it claims to do.</li>\n<li><strong>Crash Early</strong><br>A dead program normally does a lot less damage than a crippled one.</li>\n<li><strong>Use Assertions to Prevent the Impossible</strong><br>Assertions validate your assumptions. Use them to protect your code from an uncertain world.</li>\n<li><strong>Use Exceptions for Exceptional Problems</strong><br>Exceptions can suffer from all the readability and maintainability problems of classic spaghetti code. Reserve exceptions for exceptional things.</li>\n<li><strong>Finish What You Start</strong><br>Where possible, the routine or object that allocates a resource should be responsible for deallocating it.</li>\n<li><strong>Minimize Coupling Between Modules</strong><br>Avoid coupling by writing “shy” code and applying the Law of Demeter.</li>\n<li><strong>Configure, Don’t Integrate</strong><br>Implement technology choices for an application as configuration options, not through integration or engineering.</li>\n<li><strong>Put Abstractions in Code, Details in Metadata</strong><br>Program for the general case, and put the specifics outside the compiled code base.</li>\n<li><strong>Analyze Workflow to Improve Concurrency</strong><br>Exploit concurrency in your user’s workflow.</li>\n<li><strong>Design Using Services</strong><br>Design in terms of services—independent, concurrent objects behind well-defined, consistent interfaces.</li>\n<li><strong>Always Design for Concurrency</strong><br>Allow for concurrency, and you’ll design cleaner interfaces with fewer assumptions.</li>\n<li><strong>Separate Views from Models</strong><br>Gain flexibility at low cost by designing your application in terms of models and views.</li>\n<li><strong>Use Blackboards to Coordinate Workflow</strong><br>Use blackboards to coordinate disparate facts and agents, while maintaining independence and isolation among participants.</li>\n<li><strong>Don’t Program by Coincidence</strong><br>Rely only on reliable things. Beware of accidental complexity, and don’t confuse a happy coincidence with a purposeful plan.</li>\n<li><strong>Estimate the Order of Your Algorithms</strong><br>Get a feel for how long things are likely to take before you write code.</li>\n<li><strong>Test Your Estimates</strong><br>Mathematical analysis of algorithms doesn’t tell you everything. Try timing your code in its target environment.</li>\n<li><strong>Refactor Early, Refactor Often</strong><br>Just as you might weed and rearrange a garden, rewrite, rework, and re-architect code when it needs it. Fix the root of the problem.</li>\n<li><strong>Design to Test</strong><br>Start thinking about testing before you write a line of code.</li>\n<li><strong>Test Your Software, or Your Users Will</strong><br>Test ruthlessly. Don’t make your users find bugs for you.</li>\n<li><strong>Don’t Use Wizard Code You Don’t Understand</strong><br>Wizards can generate reams of code. Make sure you understand all of it before you incorporate it into your project.</li>\n<li><strong>Don’t Gather Requirements–Dig for Them</strong><br>Requirements rarely lie on the surface. They’re buried deep beneath layers of assumptions, misconceptions, and politics.</li>\n<li><strong>Workwith a User to Think Like a User</strong><br>It’s the best way to gain insight into how the system will really be used.</li>\n<li><strong>Abstractions Live Longer than Details</strong><br>Invest in the abstraction, not the implementation. Abstractions can survive the barrage of changes from different implementations and new technologies.</li>\n<li><strong>Use a Project Glossary</strong><br>Create and maintain a single source of all the specific terms and vocabulary for a project.</li>\n<li><strong>Don’t Think Outside the Box–Find the Box</strong><br>When faced with an impossible problem, identify the real constraints. Ask yourself: “Does it have to be done this way? Does it have to be done at all?”</li>\n<li><strong>Start When You’re Ready</strong><br>You’ve been building experience all your life. Don’t ignore niggling doubts.</li>\n<li><strong>Some Things Are Better Done than Described</strong><br>Don’t fall into the specification spiral—at some point you need to start coding.</li>\n<li><strong>Don’t Be a Slave to Formal Methods.</strong><br>Don’t blindly adopt any technique without putting it into the context of your development practices and capabilities.</li>\n<li><strong>Costly Tools Don’t Produce Better Designs</strong><br>Beware of vendor hype, industry dogma, and the aura of the price tag. Judge tools on their merits.</li>\n<li><strong>Organize Teams Around Functionality</strong><br>Don’t separate designers from coders, testers from data modelers. Build teams the way you build code.</li>\n<li><strong>Don’t Use Manual Procedures</strong><br>A shell script or batch file will execute the same instructions, in the same order, time after time.</li>\n<li><strong>Test Early. Test Often. Test Automatically</strong><br>Tests that run with every build are much more effective than test plans that sit on a shelf.</li>\n<li><strong>Coding Ain’t Done ‘Til All the Tests Run</strong><br>‘Nuff said.</li>\n<li><strong>Use Saboteurs to Test Your Testing</strong><br>Introduce bugs on purpose in a separate copy of the source to verify that testing will catch them.</li>\n<li><strong>Test State Coverage, Not Code Coverage</strong><br>Identify and test significant program states. Just testing lines of code isn’t enough.</li>\n<li><strong>Find Bugs Once</strong><br>Once a human tester finds a bug, it should be the last time a human tester finds that bug. Automatic tests should check for it from then on.</li>\n<li><strong>English is Just a Programming Language</strong><br>Write documents as you would write code: honor the DRY principle, use metadata, MVC, automatic generation, and so on.</li>\n<li><strong>Build Documentation In, Don’t Bolt It On</strong><br>Documentation created separately from code is less likely to be correct and up to date.</li>\n<li><strong>Gently Exceed Your Users’ Expectations</strong><br>Come to understand your users’ expectations, then deliver just that little bit more.</li>\n<li><strong>Sign Your Work</strong><br>Craftsmen of an earlier age were proud to sign their work. You should be, too.</li>\n\n<h2 id=\"Checklists\"><a href=\"#Checklists\" class=\"headerlink\" title=\"Checklists\"></a>Checklists</h2><ol>\n<li><strong>Languages To Learn</strong><br>Tired of C, C++, and Java? Try CLOS, Dylan, Eiffel, Objective C, Prolog, Smalltalk, or TOM. Each of these languages has different capabilities and a different “flavor.” Try a small project at home using one or more of them.</li>\n<li><strong>The WISDOM Acrostic</strong>  </li>\n</ol>\n<ul>\n<li><strong>W</strong>hat do you want them to learn?</li>\n<li>What <strong>I</strong>s their interest in what you’ve got to say?</li>\n<li>How <strong>S</strong>ophisticated are they?</li>\n<li>How much <strong>D</strong>etail do they want?</li>\n<li>Whom do you want to <strong>O</strong>wn the information?</li>\n<li>How can you <strong>M</strong>otivate them to listen to you?</li>\n</ul>\n<ol start=\"3\">\n<li><strong>How to Maintain Orthogonality</strong>  </li>\n</ol>\n<ul>\n<li>Design independent, well-defined components.</li>\n<li>Keep your code decoupled.</li>\n<li>Avoid global data.</li>\n<li>Refactor similar functions.</li>\n</ul>\n<ol start=\"4\">\n<li><strong>Things to prototype</strong>  </li>\n</ol>\n<ul>\n<li>Architecture</li>\n<li>New functionality in an existing system</li>\n<li>Structure or contents of external data</li>\n<li>Third-party tools or components</li>\n<li>Performance issues</li>\n<li>User interface design</li>\n</ul>\n<ol start=\"5\">\n<li><strong>Architectural Questions</strong>  </li>\n</ol>\n<ul>\n<li>Are responsibilities well defined?</li>\n<li>Are the collaborations well defined?</li>\n<li>Is coupling minimized?</li>\n<li>Can you identify potential duplication?</li>\n<li>Are interface definitions and constraints acceptable?</li>\n<li>Can modules access needed data—when needed?</li>\n</ul>\n<ol start=\"6\">\n<li><strong>Debugging Checklist</strong>  </li>\n</ol>\n<ul>\n<li>Is the problem being reported a direct result of the underlying bug, or merely a symptom?</li>\n<li>Is the bug really in the compiler? Is it in the OS? Or is it in your code?</li>\n<li>If you explained this problem in detail to a coworker, what would you say?</li>\n<li>If the suspect code passes its unit tests, are the tests complete enough? What happens if you run the unit test with this data?</li>\n<li>Do the conditions that caused this bug exist anywhere else in the system?</li>\n</ul>\n<ol start=\"7\">\n<li><strong>Law of Demeter for FunctionsAn object’s method should call only methods belonging to:</strong>  </li>\n</ol>\n<ul>\n<li>Itself</li>\n<li>Any parameters passed in</li>\n<li>Objects it creates</li>\n<li>Component objects</li>\n</ul>\n<ol start=\"8\">\n<li><strong>How to Program Deliberately</strong>  </li>\n</ol>\n<ul>\n<li>Stay aware of what you’re doing.</li>\n<li>Don’t code blindfolded.</li>\n<li>Proceed from a plan.</li>\n<li>Rely only on reliable things.</li>\n<li>Document your assumptions.</li>\n<li>Test assumptions as well as code.</li>\n<li>Prioritize your effort.</li>\n<li>Don’t be a slave to history.</li>\n</ul>\n<ol start=\"9\">\n<li><strong>When to Refactor</strong>  </li>\n</ol>\n<ul>\n<li>You discover a violation of the DRY principle.</li>\n<li>You find things that could be more orthogonal.</li>\n<li>Your knowledge improves.</li>\n<li>The requirements evolve.</li>\n<li>You need to improve performance.</li>\n</ul>\n<ol start=\"10\">\n<li><strong>Cutting the Gordian Knot When solving impossible problems, ask yourself:</strong>  </li>\n</ol>\n<ul>\n<li>Is there an easier way?</li>\n<li>Am I solving the right problem?</li>\n<li>Why is this a problem?</li>\n<li>What makes it hard?</li>\n<li>Do I have to do it this way?</li>\n<li>Does it have to be done at all?</li>\n</ul>\n<ol start=\"11\">\n<li><strong>Aspects of Testing</strong></li>\n</ol>\n<ul>\n<li>Unit testing</li>\n<li>Integration testing</li>\n<li>Validation and verification</li>\n<li>Resource exhaustion, errors, and recovery</li>\n<li>Performance testing</li>\n<li>Usability testing</li>\n<li>Testing the tests themselves</li>\n</ul>"},{"title":"Basic Notes on pandas","date":"2019-03-04T16:00:00.000Z","_content":"\n## About pandas\n\npandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python.\n\npandas is well suited for many different kinds of data:\n\n- Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet\n- Ordered and unordered (not necessarily fixed-frequency) time series data.\n- Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels\n- Any other form of observational / statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure\n\n<!-- more -->\n\n## Data Structures\n\n|Dimensions|Name|Description|\n| :--------: | :-------: | :----------: |\n|     1      |  Series   |1D labeled homogeneously-typed array |\n|     2      | DataFrame | General 2D labeled, size-mutable tabular structure with potentially heterogeneously-typed column |\n\n## Mutability and copying of data\n\nAll pandas data structures are value-mutable (the values they contain can be altered) but not always size-mutable. The length of a Series cannot be changed, but, for example, columns can be inserted into a DataFrame. However, the vast majority of methods produce new objects and leave the input data untouched. In general we like to **favor immutability** where sensible.\n\nCustomarily, we import as follows:\n\n```python\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n```\n\n## Object Creation\n\nCreating a [`Series`](http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series) by passing a list of values, letting pandas create a default integer index:\n\n```python\nIn [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])\n\nIn [4]: s\nOut[4]: \n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n```\n\n## Viewing Data\n\nHere is how to view the top and bottom rows of the frame:\n\n```python\nIn [13]: df.head()\nOut[13]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [14]: df.tail(3)\nOut[14]: \n                   A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n```\n\nDisplay the index, columns:\n\n```python\nIn [15]: df.index\nOut[15]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [16]: df.columns\nOut[16]: Index(['A', 'B', 'C', 'D'], dtype='object')\n```\n\n`DataFrame.to_numpy()` gives a NumPy representation of the underlying data.\n\n`describe()` shows a quick statistic summary of your data:\n\n```python\nIn [19]: df.describe()\nOut[19]: \n              A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804\n```\n\nTransposing your data:\n\n```python\nIn [20]: df.T\nOut[20]: \n   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988\n```\n\n## Selection\n\nSelecting a single column, which yields a `Series`, equivalent to `df.A`:\n\n```python\nIn [23]: df['A']\nOut[23]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64\n```\n\nSelecting via `[]`, which slices the rows.\n\n```python\nIn [24]: df[0:3]\nOut[24]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [25]: df['20130102':'20130104']\nOut[25]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\nFor getting a cross section using a label:\n\n```python\nIn [26]: df.loc[dates[0]]\nOut[26]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64\n```\n\nUsing a single column’s values to select data.\n\n```python\nIn [39]: df[df.A > 0]\nOut[39]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\nSelecting values from a DataFrame where a boolean condition is met.\n\n```python\nIn [40]: df[df > 0]\nOut[40]: \n                   A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988\n```\n\nSetting a new column automatically aligns the data by the indexes.\n\n```python\nIn [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range('20130102', periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df['F'] = s1\n```\n\n## Missing Data\n\npandas primarily uses the value `np.nan` to represent missing data. It is by default not included in computations. \n\nReindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.\n\n```python\nIn [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])\n\nIn [56]: df1.loc[dates[0]:dates[1], 'E'] = 1\n\nIn [57]: df1\nOut[57]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN\n```\n\nTo drop any rows that have missing data.\n\n```python\nIn [58]: df1.dropna(how='any')\nOut[58]: \n                   A         B         C  D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n```\n\nFilling missing data.\n\n```python\nIn [59]: df1.fillna(value=5)\nOut[59]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0\n```\n\n## Operations\n\nOperations in general *exclude* missing data.\n\nPerforming a descriptive statistic:\n\n```python\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64\n```\n\nApplying functions to the data:\n\n```python\nIn [66]: df.apply(np.cumsum)\nOut[66]: \n                   A         B         C   D     F\n2013-01-01  0.000000  0.000000 -1.509059   5   NaN\n2013-01-02  1.212112 -0.173215 -1.389850  10   1.0\n2013-01-03  0.350263 -2.277784 -1.884779  15   3.0\n2013-01-04  1.071818 -2.984555 -2.924354  20   6.0\n2013-01-05  0.646846 -2.417535 -2.648122  25  10.0\n2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0\n\nIn [67]: df.apply(lambda x: x.max() - x.min())\nOut[67]: \nA    2.073961\nB    2.671590\nC    1.785291\nD    0.000000\nF    4.000000\ndtype: float64\n```\n\nSeries is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below.\n\n```python\nIn [71]: s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object\n```\n\n> For detailed usage of pandas, refer to the following documentation directly.\n\n## References:\n\n1. [pandas 0.24.1 documentation](http://pandas.pydata.org/pandas-docs/stable/index.html)","source":"_posts/python-05.md","raw":"---\ntitle: Basic Notes on pandas\ndate: 2019-03-05\ntags: [python]\n---\n\n## About pandas\n\npandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python.\n\npandas is well suited for many different kinds of data:\n\n- Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet\n- Ordered and unordered (not necessarily fixed-frequency) time series data.\n- Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels\n- Any other form of observational / statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure\n\n<!-- more -->\n\n## Data Structures\n\n|Dimensions|Name|Description|\n| :--------: | :-------: | :----------: |\n|     1      |  Series   |1D labeled homogeneously-typed array |\n|     2      | DataFrame | General 2D labeled, size-mutable tabular structure with potentially heterogeneously-typed column |\n\n## Mutability and copying of data\n\nAll pandas data structures are value-mutable (the values they contain can be altered) but not always size-mutable. The length of a Series cannot be changed, but, for example, columns can be inserted into a DataFrame. However, the vast majority of methods produce new objects and leave the input data untouched. In general we like to **favor immutability** where sensible.\n\nCustomarily, we import as follows:\n\n```python\nIn [1]: import numpy as np\n\nIn [2]: import pandas as pd\n```\n\n## Object Creation\n\nCreating a [`Series`](http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series) by passing a list of values, letting pandas create a default integer index:\n\n```python\nIn [3]: s = pd.Series([1, 3, 5, np.nan, 6, 8])\n\nIn [4]: s\nOut[4]: \n0    1.0\n1    3.0\n2    5.0\n3    NaN\n4    6.0\n5    8.0\ndtype: float64\n```\n\n## Viewing Data\n\nHere is how to view the top and bottom rows of the frame:\n\n```python\nIn [13]: df.head()\nOut[13]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n\nIn [14]: df.tail(3)\nOut[14]: \n                   A         B         C         D\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n2013-01-05 -0.424972  0.567020  0.276232 -1.087401\n2013-01-06 -0.673690  0.113648 -1.478427  0.524988\n```\n\nDisplay the index, columns:\n\n```python\nIn [15]: df.index\nOut[15]: \nDatetimeIndex(['2013-01-01', '2013-01-02', '2013-01-03', '2013-01-04',\n               '2013-01-05', '2013-01-06'],\n              dtype='datetime64[ns]', freq='D')\n\nIn [16]: df.columns\nOut[16]: Index(['A', 'B', 'C', 'D'], dtype='object')\n```\n\n`DataFrame.to_numpy()` gives a NumPy representation of the underlying data.\n\n`describe()` shows a quick statistic summary of your data:\n\n```python\nIn [19]: df.describe()\nOut[19]: \n              A         B         C         D\ncount  6.000000  6.000000  6.000000  6.000000\nmean   0.073711 -0.431125 -0.687758 -0.233103\nstd    0.843157  0.922818  0.779887  0.973118\nmin   -0.861849 -2.104569 -1.509059 -1.135632\n25%   -0.611510 -0.600794 -1.368714 -1.076610\n50%    0.022070 -0.228039 -0.767252 -0.386188\n75%    0.658444  0.041933 -0.034326  0.461706\nmax    1.212112  0.567020  0.276232  1.071804\n```\n\nTransposing your data:\n\n```python\nIn [20]: df.T\nOut[20]: \n   2013-01-01  2013-01-02  2013-01-03  2013-01-04  2013-01-05  2013-01-06\nA    0.469112    1.212112   -0.861849    0.721555   -0.424972   -0.673690\nB   -0.282863   -0.173215   -2.104569   -0.706771    0.567020    0.113648\nC   -1.509059    0.119209   -0.494929   -1.039575    0.276232   -1.478427\nD   -1.135632   -1.044236    1.071804    0.271860   -1.087401    0.524988\n```\n\n## Selection\n\nSelecting a single column, which yields a `Series`, equivalent to `df.A`:\n\n```python\nIn [23]: df['A']\nOut[23]: \n2013-01-01    0.469112\n2013-01-02    1.212112\n2013-01-03   -0.861849\n2013-01-04    0.721555\n2013-01-05   -0.424972\n2013-01-06   -0.673690\nFreq: D, Name: A, dtype: float64\n```\n\nSelecting via `[]`, which slices the rows.\n\n```python\nIn [24]: df[0:3]\nOut[24]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n\nIn [25]: df['20130102':'20130104']\nOut[25]: \n                   A         B         C         D\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-03 -0.861849 -2.104569 -0.494929  1.071804\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\nFor getting a cross section using a label:\n\n```python\nIn [26]: df.loc[dates[0]]\nOut[26]: \nA    0.469112\nB   -0.282863\nC   -1.509059\nD   -1.135632\nName: 2013-01-01 00:00:00, dtype: float64\n```\n\nUsing a single column’s values to select data.\n\n```python\nIn [39]: df[df.A > 0]\nOut[39]: \n                   A         B         C         D\n2013-01-01  0.469112 -0.282863 -1.509059 -1.135632\n2013-01-02  1.212112 -0.173215  0.119209 -1.044236\n2013-01-04  0.721555 -0.706771 -1.039575  0.271860\n```\n\nSelecting values from a DataFrame where a boolean condition is met.\n\n```python\nIn [40]: df[df > 0]\nOut[40]: \n                   A         B         C         D\n2013-01-01  0.469112       NaN       NaN       NaN\n2013-01-02  1.212112       NaN  0.119209       NaN\n2013-01-03       NaN       NaN       NaN  1.071804\n2013-01-04  0.721555       NaN       NaN  0.271860\n2013-01-05       NaN  0.567020  0.276232       NaN\n2013-01-06       NaN  0.113648       NaN  0.524988\n```\n\nSetting a new column automatically aligns the data by the indexes.\n\n```python\nIn [45]: s1 = pd.Series([1, 2, 3, 4, 5, 6], index=pd.date_range('20130102', periods=6))\n\nIn [46]: s1\nOut[46]: \n2013-01-02    1\n2013-01-03    2\n2013-01-04    3\n2013-01-05    4\n2013-01-06    5\n2013-01-07    6\nFreq: D, dtype: int64\n\nIn [47]: df['F'] = s1\n```\n\n## Missing Data\n\npandas primarily uses the value `np.nan` to represent missing data. It is by default not included in computations. \n\nReindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.\n\n```python\nIn [55]: df1 = df.reindex(index=dates[0:4], columns=list(df.columns) + ['E'])\n\nIn [56]: df1.loc[dates[0]:dates[1], 'E'] = 1\n\nIn [57]: df1\nOut[57]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  NaN  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  NaN\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  NaN\n```\n\nTo drop any rows that have missing data.\n\n```python\nIn [58]: df1.dropna(how='any')\nOut[58]: \n                   A         B         C  D    F    E\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n```\n\nFilling missing data.\n\n```python\nIn [59]: df1.fillna(value=5)\nOut[59]: \n                   A         B         C  D    F    E\n2013-01-01  0.000000  0.000000 -1.509059  5  5.0  1.0\n2013-01-02  1.212112 -0.173215  0.119209  5  1.0  1.0\n2013-01-03 -0.861849 -2.104569 -0.494929  5  2.0  5.0\n2013-01-04  0.721555 -0.706771 -1.039575  5  3.0  5.0\n```\n\n## Operations\n\nOperations in general *exclude* missing data.\n\nPerforming a descriptive statistic:\n\n```python\nIn [61]: df.mean()\nOut[61]: \nA   -0.004474\nB   -0.383981\nC   -0.687758\nD    5.000000\nF    3.000000\ndtype: float64\n```\n\nApplying functions to the data:\n\n```python\nIn [66]: df.apply(np.cumsum)\nOut[66]: \n                   A         B         C   D     F\n2013-01-01  0.000000  0.000000 -1.509059   5   NaN\n2013-01-02  1.212112 -0.173215 -1.389850  10   1.0\n2013-01-03  0.350263 -2.277784 -1.884779  15   3.0\n2013-01-04  1.071818 -2.984555 -2.924354  20   6.0\n2013-01-05  0.646846 -2.417535 -2.648122  25  10.0\n2013-01-06 -0.026844 -2.303886 -4.126549  30  15.0\n\nIn [67]: df.apply(lambda x: x.max() - x.min())\nOut[67]: \nA    2.073961\nB    2.671590\nC    1.785291\nD    0.000000\nF    4.000000\ndtype: float64\n```\n\nSeries is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below.\n\n```python\nIn [71]: s = pd.Series(['A', 'B', 'C', 'Aaba', 'Baca', np.nan, 'CABA', 'dog', 'cat'])\n\nIn [72]: s.str.lower()\nOut[72]: \n0       a\n1       b\n2       c\n3    aaba\n4    baca\n5     NaN\n6    caba\n7     dog\n8     cat\ndtype: object\n```\n\n> For detailed usage of pandas, refer to the following documentation directly.\n\n## References:\n\n1. [pandas 0.24.1 documentation](http://pandas.pydata.org/pandas-docs/stable/index.html)","slug":"python-05","published":1,"updated":"2019-04-30T16:41:37.557Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbkx001030uvd4c4utco","content":"<h2 id=\"About-pandas\"><a href=\"#About-pandas\" class=\"headerlink\" title=\"About pandas\"></a>About pandas</h2><p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python.</p>\n<p>pandas is well suited for many different kinds of data:</p>\n<ul>\n<li>Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet</li>\n<li>Ordered and unordered (not necessarily fixed-frequency) time series data.</li>\n<li>Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels</li>\n<li>Any other form of observational / statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure</li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"Data-Structures\"><a href=\"#Data-Structures\" class=\"headerlink\" title=\"Data Structures\"></a>Data Structures</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Dimensions</th>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Series</td>\n<td style=\"text-align:center\">1D labeled homogeneously-typed array</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">DataFrame</td>\n<td style=\"text-align:center\">General 2D labeled, size-mutable tabular structure with potentially heterogeneously-typed column</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Mutability-and-copying-of-data\"><a href=\"#Mutability-and-copying-of-data\" class=\"headerlink\" title=\"Mutability and copying of data\"></a>Mutability and copying of data</h2><p>All pandas data structures are value-mutable (the values they contain can be altered) but not always size-mutable. The length of a Series cannot be changed, but, for example, columns can be inserted into a DataFrame. However, the vast majority of methods produce new objects and leave the input data untouched. In general we like to <strong>favor immutability</strong> where sensible.</p>\n<p>Customarily, we import as follows:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: <span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-Creation\"><a href=\"#Object-Creation\" class=\"headerlink\" title=\"Object Creation\"></a>Object Creation</h2><p>Creating a <a href=\"http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\" target=\"_blank\" rel=\"noopener\"><code>Series</code></a> by passing a list of values, letting pandas create a default integer index:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">3</span>]: s = pd.Series([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, np.nan, <span class=\"number\">6</span>, <span class=\"number\">8</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: </span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>    NaN</span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">6.0</span></span><br><span class=\"line\"><span class=\"number\">5</span>    <span class=\"number\">8.0</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<h2 id=\"Viewing-Data\"><a href=\"#Viewing-Data\" class=\"headerlink\" title=\"Viewing Data\"></a>Viewing Data</h2><p>Here is how to view the top and bottom rows of the frame:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">13</span>]: df.head()</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span> <span class=\"number\">-0.282863</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">1.071804</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span> <span class=\"number\">-0.424972</span>  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span> <span class=\"number\">-1.087401</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">14</span>]: df.tail(<span class=\"number\">3</span>)</span><br><span class=\"line\">Out[<span class=\"number\">14</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span> <span class=\"number\">-0.424972</span>  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span> <span class=\"number\">-1.087401</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span> <span class=\"number\">-0.673690</span>  <span class=\"number\">0.113648</span> <span class=\"number\">-1.478427</span>  <span class=\"number\">0.524988</span></span><br></pre></td></tr></table></figure>\n<p>Display the index, columns:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">15</span>]: df.index</span><br><span class=\"line\">Out[<span class=\"number\">15</span>]: </span><br><span class=\"line\">DatetimeIndex([<span class=\"string\">'2013-01-01'</span>, <span class=\"string\">'2013-01-02'</span>, <span class=\"string\">'2013-01-03'</span>, <span class=\"string\">'2013-01-04'</span>,</span><br><span class=\"line\">               <span class=\"string\">'2013-01-05'</span>, <span class=\"string\">'2013-01-06'</span>],</span><br><span class=\"line\">              dtype=<span class=\"string\">'datetime64[ns]'</span>, freq=<span class=\"string\">'D'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">16</span>]: df.columns</span><br><span class=\"line\">Out[<span class=\"number\">16</span>]: Index([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>], dtype=<span class=\"string\">'object'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>DataFrame.to_numpy()</code> gives a NumPy representation of the underlying data.</p>\n<p><code>describe()</code> shows a quick statistic summary of your data:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">19</span>]: df.describe()</span><br><span class=\"line\">Out[<span class=\"number\">19</span>]: </span><br><span class=\"line\">              A         B         C         D</span><br><span class=\"line\">count  <span class=\"number\">6.000000</span>  <span class=\"number\">6.000000</span>  <span class=\"number\">6.000000</span>  <span class=\"number\">6.000000</span></span><br><span class=\"line\">mean   <span class=\"number\">0.073711</span> <span class=\"number\">-0.431125</span> <span class=\"number\">-0.687758</span> <span class=\"number\">-0.233103</span></span><br><span class=\"line\">std    <span class=\"number\">0.843157</span>  <span class=\"number\">0.922818</span>  <span class=\"number\">0.779887</span>  <span class=\"number\">0.973118</span></span><br><span class=\"line\">min   <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">25</span>%   <span class=\"number\">-0.611510</span> <span class=\"number\">-0.600794</span> <span class=\"number\">-1.368714</span> <span class=\"number\">-1.076610</span></span><br><span class=\"line\"><span class=\"number\">50</span>%    <span class=\"number\">0.022070</span> <span class=\"number\">-0.228039</span> <span class=\"number\">-0.767252</span> <span class=\"number\">-0.386188</span></span><br><span class=\"line\"><span class=\"number\">75</span>%    <span class=\"number\">0.658444</span>  <span class=\"number\">0.041933</span> <span class=\"number\">-0.034326</span>  <span class=\"number\">0.461706</span></span><br><span class=\"line\">max    <span class=\"number\">1.212112</span>  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span>  <span class=\"number\">1.071804</span></span><br></pre></td></tr></table></figure>\n<p>Transposing your data:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">20</span>]: df.T</span><br><span class=\"line\">Out[<span class=\"number\">20</span>]: </span><br><span class=\"line\">   <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span></span><br><span class=\"line\">A    <span class=\"number\">0.469112</span>    <span class=\"number\">1.212112</span>   <span class=\"number\">-0.861849</span>    <span class=\"number\">0.721555</span>   <span class=\"number\">-0.424972</span>   <span class=\"number\">-0.673690</span></span><br><span class=\"line\">B   <span class=\"number\">-0.282863</span>   <span class=\"number\">-0.173215</span>   <span class=\"number\">-2.104569</span>   <span class=\"number\">-0.706771</span>    <span class=\"number\">0.567020</span>    <span class=\"number\">0.113648</span></span><br><span class=\"line\">C   <span class=\"number\">-1.509059</span>    <span class=\"number\">0.119209</span>   <span class=\"number\">-0.494929</span>   <span class=\"number\">-1.039575</span>    <span class=\"number\">0.276232</span>   <span class=\"number\">-1.478427</span></span><br><span class=\"line\">D   <span class=\"number\">-1.135632</span>   <span class=\"number\">-1.044236</span>    <span class=\"number\">1.071804</span>    <span class=\"number\">0.271860</span>   <span class=\"number\">-1.087401</span>    <span class=\"number\">0.524988</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Selection\"><a href=\"#Selection\" class=\"headerlink\" title=\"Selection\"></a>Selection</h2><p>Selecting a single column, which yields a <code>Series</code>, equivalent to <code>df.A</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">23</span>]: df[<span class=\"string\">'A'</span>]</span><br><span class=\"line\">Out[<span class=\"number\">23</span>]: </span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>    <span class=\"number\">0.469112</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>    <span class=\"number\">1.212112</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>   <span class=\"number\">-0.861849</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>    <span class=\"number\">0.721555</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>   <span class=\"number\">-0.424972</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span>   <span class=\"number\">-0.673690</span></span><br><span class=\"line\">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Selecting via <code>[]</code>, which slices the rows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">24</span>]: df[<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">Out[<span class=\"number\">24</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span> <span class=\"number\">-0.282863</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">1.071804</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">25</span>]: df[<span class=\"string\">'20130102'</span>:<span class=\"string\">'20130104'</span>]</span><br><span class=\"line\">Out[<span class=\"number\">25</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">1.071804</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br></pre></td></tr></table></figure>\n<p>For getting a cross section using a label:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">26</span>]: df.loc[dates[<span class=\"number\">0</span>]]</span><br><span class=\"line\">Out[<span class=\"number\">26</span>]: </span><br><span class=\"line\">A    <span class=\"number\">0.469112</span></span><br><span class=\"line\">B   <span class=\"number\">-0.282863</span></span><br><span class=\"line\">C   <span class=\"number\">-1.509059</span></span><br><span class=\"line\">D   <span class=\"number\">-1.135632</span></span><br><span class=\"line\">Name: <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span>, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Using a single column’s values to select data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">39</span>]: df[df.A &gt; <span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">39</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span> <span class=\"number\">-0.282863</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br></pre></td></tr></table></figure>\n<p>Selecting values from a DataFrame where a boolean condition is met.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">40</span>]: df[df &gt; <span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">40</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span>       NaN       NaN       NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span>       NaN  <span class=\"number\">0.119209</span>       NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>       NaN       NaN       NaN  <span class=\"number\">1.071804</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span>       NaN       NaN  <span class=\"number\">0.271860</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>       NaN  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span>       NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span>       NaN  <span class=\"number\">0.113648</span>       NaN  <span class=\"number\">0.524988</span></span><br></pre></td></tr></table></figure>\n<p>Setting a new column automatically aligns the data by the indexes.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">45</span>]: s1 = pd.Series([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], index=pd.date_range(<span class=\"string\">'20130102'</span>, periods=<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">46</span>]: s1</span><br><span class=\"line\">Out[<span class=\"number\">46</span>]: </span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>    <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>    <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>    <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span>    <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-07</span>    <span class=\"number\">6</span></span><br><span class=\"line\">Freq: D, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">47</span>]: df[<span class=\"string\">'F'</span>] = s1</span><br></pre></td></tr></table></figure>\n<h2 id=\"Missing-Data\"><a href=\"#Missing-Data\" class=\"headerlink\" title=\"Missing Data\"></a>Missing Data</h2><p>pandas primarily uses the value <code>np.nan</code> to represent missing data. It is by default not included in computations. </p>\n<p>Reindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">55</span>]: df1 = df.reindex(index=dates[<span class=\"number\">0</span>:<span class=\"number\">4</span>], columns=list(df.columns) + [<span class=\"string\">'E'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">56</span>]: df1.loc[dates[<span class=\"number\">0</span>]:dates[<span class=\"number\">1</span>], <span class=\"string\">'E'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">57</span>]: df1</span><br><span class=\"line\">Out[<span class=\"number\">57</span>]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.000000</span>  <span class=\"number\">0.000000</span> <span class=\"number\">-1.509059</span>  <span class=\"number\">5</span>  NaN  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span>  <span class=\"number\">5</span>  <span class=\"number\">1.0</span>  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">5</span>  <span class=\"number\">2.0</span>  NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">5</span>  <span class=\"number\">3.0</span>  NaN</span><br></pre></td></tr></table></figure>\n<p>To drop any rows that have missing data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">58</span>]: df1.dropna(how=<span class=\"string\">'any'</span>)</span><br><span class=\"line\">Out[<span class=\"number\">58</span>]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span>  <span class=\"number\">5</span>  <span class=\"number\">1.0</span>  <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p>Filling missing data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">59</span>]: df1.fillna(value=<span class=\"number\">5</span>)</span><br><span class=\"line\">Out[<span class=\"number\">59</span>]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.000000</span>  <span class=\"number\">0.000000</span> <span class=\"number\">-1.509059</span>  <span class=\"number\">5</span>  <span class=\"number\">5.0</span>  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span>  <span class=\"number\">5</span>  <span class=\"number\">1.0</span>  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">5</span>  <span class=\"number\">2.0</span>  <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">5</span>  <span class=\"number\">3.0</span>  <span class=\"number\">5.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Operations\"><a href=\"#Operations\" class=\"headerlink\" title=\"Operations\"></a>Operations</h2><p>Operations in general <em>exclude</em> missing data.</p>\n<p>Performing a descriptive statistic:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">61</span>]: df.mean()</span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: </span><br><span class=\"line\">A   <span class=\"number\">-0.004474</span></span><br><span class=\"line\">B   <span class=\"number\">-0.383981</span></span><br><span class=\"line\">C   <span class=\"number\">-0.687758</span></span><br><span class=\"line\">D    <span class=\"number\">5.000000</span></span><br><span class=\"line\">F    <span class=\"number\">3.000000</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Applying functions to the data:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">66</span>]: df.apply(np.cumsum)</span><br><span class=\"line\">Out[<span class=\"number\">66</span>]: </span><br><span class=\"line\">                   A         B         C   D     F</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.000000</span>  <span class=\"number\">0.000000</span> <span class=\"number\">-1.509059</span>   <span class=\"number\">5</span>   NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span> <span class=\"number\">-1.389850</span>  <span class=\"number\">10</span>   <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>  <span class=\"number\">0.350263</span> <span class=\"number\">-2.277784</span> <span class=\"number\">-1.884779</span>  <span class=\"number\">15</span>   <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">1.071818</span> <span class=\"number\">-2.984555</span> <span class=\"number\">-2.924354</span>  <span class=\"number\">20</span>   <span class=\"number\">6.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>  <span class=\"number\">0.646846</span> <span class=\"number\">-2.417535</span> <span class=\"number\">-2.648122</span>  <span class=\"number\">25</span>  <span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span> <span class=\"number\">-0.026844</span> <span class=\"number\">-2.303886</span> <span class=\"number\">-4.126549</span>  <span class=\"number\">30</span>  <span class=\"number\">15.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: df.apply(<span class=\"keyword\">lambda</span> x: x.max() - x.min())</span><br><span class=\"line\">Out[<span class=\"number\">67</span>]: </span><br><span class=\"line\">A    <span class=\"number\">2.073961</span></span><br><span class=\"line\">B    <span class=\"number\">2.671590</span></span><br><span class=\"line\">C    <span class=\"number\">1.785291</span></span><br><span class=\"line\">D    <span class=\"number\">0.000000</span></span><br><span class=\"line\">F    <span class=\"number\">4.000000</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Series is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">71</span>]: s = pd.Series([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'Aaba'</span>, <span class=\"string\">'Baca'</span>, np.nan, <span class=\"string\">'CABA'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'cat'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">72</span>]: s.str.lower()</span><br><span class=\"line\">Out[<span class=\"number\">72</span>]: </span><br><span class=\"line\"><span class=\"number\">0</span>       a</span><br><span class=\"line\"><span class=\"number\">1</span>       b</span><br><span class=\"line\"><span class=\"number\">2</span>       c</span><br><span class=\"line\"><span class=\"number\">3</span>    aaba</span><br><span class=\"line\"><span class=\"number\">4</span>    baca</span><br><span class=\"line\"><span class=\"number\">5</span>     NaN</span><br><span class=\"line\"><span class=\"number\">6</span>    caba</span><br><span class=\"line\"><span class=\"number\">7</span>     dog</span><br><span class=\"line\"><span class=\"number\">8</span>     cat</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>For detailed usage of pandas, refer to the following documentation directly.</p>\n</blockquote>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><ol>\n<li><a href=\"http://pandas.pydata.org/pandas-docs/stable/index.html\" target=\"_blank\" rel=\"noopener\">pandas 0.24.1 documentation</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"About-pandas\"><a href=\"#About-pandas\" class=\"headerlink\" title=\"About pandas\"></a>About pandas</h2><p>pandas is a Python package providing fast, flexible, and expressive data structures designed to make working with “relational” or “labeled” data both easy and intuitive. It aims to be the fundamental high-level building block for doing practical, real world data analysis in Python.</p>\n<p>pandas is well suited for many different kinds of data:</p>\n<ul>\n<li>Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet</li>\n<li>Ordered and unordered (not necessarily fixed-frequency) time series data.</li>\n<li>Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels</li>\n<li>Any other form of observational / statistical data sets. The data actually need not be labeled at all to be placed into a pandas data structure</li>\n</ul>","more":"<h2 id=\"Data-Structures\"><a href=\"#Data-Structures\" class=\"headerlink\" title=\"Data Structures\"></a>Data Structures</h2><table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Dimensions</th>\n<th style=\"text-align:center\">Name</th>\n<th style=\"text-align:center\">Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">1</td>\n<td style=\"text-align:center\">Series</td>\n<td style=\"text-align:center\">1D labeled homogeneously-typed array</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">2</td>\n<td style=\"text-align:center\">DataFrame</td>\n<td style=\"text-align:center\">General 2D labeled, size-mutable tabular structure with potentially heterogeneously-typed column</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Mutability-and-copying-of-data\"><a href=\"#Mutability-and-copying-of-data\" class=\"headerlink\" title=\"Mutability and copying of data\"></a>Mutability and copying of data</h2><p>All pandas data structures are value-mutable (the values they contain can be altered) but not always size-mutable. The length of a Series cannot be changed, but, for example, columns can be inserted into a DataFrame. However, the vast majority of methods produce new objects and leave the input data untouched. In general we like to <strong>favor immutability</strong> where sensible.</p>\n<p>Customarily, we import as follows:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">1</span>]: <span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">2</span>]: <span class=\"keyword\">import</span> pandas <span class=\"keyword\">as</span> pd</span><br></pre></td></tr></table></figure>\n<h2 id=\"Object-Creation\"><a href=\"#Object-Creation\" class=\"headerlink\" title=\"Object Creation\"></a>Object Creation</h2><p>Creating a <a href=\"http://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Series.html#pandas.Series\" target=\"_blank\" rel=\"noopener\"><code>Series</code></a> by passing a list of values, letting pandas create a default integer index:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">3</span>]: s = pd.Series([<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, np.nan, <span class=\"number\">6</span>, <span class=\"number\">8</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">4</span>]: s</span><br><span class=\"line\">Out[<span class=\"number\">4</span>]: </span><br><span class=\"line\"><span class=\"number\">0</span>    <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">3</span>    NaN</span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">6.0</span></span><br><span class=\"line\"><span class=\"number\">5</span>    <span class=\"number\">8.0</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<h2 id=\"Viewing-Data\"><a href=\"#Viewing-Data\" class=\"headerlink\" title=\"Viewing Data\"></a>Viewing Data</h2><p>Here is how to view the top and bottom rows of the frame:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">13</span>]: df.head()</span><br><span class=\"line\">Out[<span class=\"number\">13</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span> <span class=\"number\">-0.282863</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">1.071804</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span> <span class=\"number\">-0.424972</span>  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span> <span class=\"number\">-1.087401</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">14</span>]: df.tail(<span class=\"number\">3</span>)</span><br><span class=\"line\">Out[<span class=\"number\">14</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span> <span class=\"number\">-0.424972</span>  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span> <span class=\"number\">-1.087401</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span> <span class=\"number\">-0.673690</span>  <span class=\"number\">0.113648</span> <span class=\"number\">-1.478427</span>  <span class=\"number\">0.524988</span></span><br></pre></td></tr></table></figure>\n<p>Display the index, columns:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">15</span>]: df.index</span><br><span class=\"line\">Out[<span class=\"number\">15</span>]: </span><br><span class=\"line\">DatetimeIndex([<span class=\"string\">'2013-01-01'</span>, <span class=\"string\">'2013-01-02'</span>, <span class=\"string\">'2013-01-03'</span>, <span class=\"string\">'2013-01-04'</span>,</span><br><span class=\"line\">               <span class=\"string\">'2013-01-05'</span>, <span class=\"string\">'2013-01-06'</span>],</span><br><span class=\"line\">              dtype=<span class=\"string\">'datetime64[ns]'</span>, freq=<span class=\"string\">'D'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">16</span>]: df.columns</span><br><span class=\"line\">Out[<span class=\"number\">16</span>]: Index([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'D'</span>], dtype=<span class=\"string\">'object'</span>)</span><br></pre></td></tr></table></figure>\n<p><code>DataFrame.to_numpy()</code> gives a NumPy representation of the underlying data.</p>\n<p><code>describe()</code> shows a quick statistic summary of your data:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">19</span>]: df.describe()</span><br><span class=\"line\">Out[<span class=\"number\">19</span>]: </span><br><span class=\"line\">              A         B         C         D</span><br><span class=\"line\">count  <span class=\"number\">6.000000</span>  <span class=\"number\">6.000000</span>  <span class=\"number\">6.000000</span>  <span class=\"number\">6.000000</span></span><br><span class=\"line\">mean   <span class=\"number\">0.073711</span> <span class=\"number\">-0.431125</span> <span class=\"number\">-0.687758</span> <span class=\"number\">-0.233103</span></span><br><span class=\"line\">std    <span class=\"number\">0.843157</span>  <span class=\"number\">0.922818</span>  <span class=\"number\">0.779887</span>  <span class=\"number\">0.973118</span></span><br><span class=\"line\">min   <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">25</span>%   <span class=\"number\">-0.611510</span> <span class=\"number\">-0.600794</span> <span class=\"number\">-1.368714</span> <span class=\"number\">-1.076610</span></span><br><span class=\"line\"><span class=\"number\">50</span>%    <span class=\"number\">0.022070</span> <span class=\"number\">-0.228039</span> <span class=\"number\">-0.767252</span> <span class=\"number\">-0.386188</span></span><br><span class=\"line\"><span class=\"number\">75</span>%    <span class=\"number\">0.658444</span>  <span class=\"number\">0.041933</span> <span class=\"number\">-0.034326</span>  <span class=\"number\">0.461706</span></span><br><span class=\"line\">max    <span class=\"number\">1.212112</span>  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span>  <span class=\"number\">1.071804</span></span><br></pre></td></tr></table></figure>\n<p>Transposing your data:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">20</span>]: df.T</span><br><span class=\"line\">Out[<span class=\"number\">20</span>]: </span><br><span class=\"line\">   <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>  <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span></span><br><span class=\"line\">A    <span class=\"number\">0.469112</span>    <span class=\"number\">1.212112</span>   <span class=\"number\">-0.861849</span>    <span class=\"number\">0.721555</span>   <span class=\"number\">-0.424972</span>   <span class=\"number\">-0.673690</span></span><br><span class=\"line\">B   <span class=\"number\">-0.282863</span>   <span class=\"number\">-0.173215</span>   <span class=\"number\">-2.104569</span>   <span class=\"number\">-0.706771</span>    <span class=\"number\">0.567020</span>    <span class=\"number\">0.113648</span></span><br><span class=\"line\">C   <span class=\"number\">-1.509059</span>    <span class=\"number\">0.119209</span>   <span class=\"number\">-0.494929</span>   <span class=\"number\">-1.039575</span>    <span class=\"number\">0.276232</span>   <span class=\"number\">-1.478427</span></span><br><span class=\"line\">D   <span class=\"number\">-1.135632</span>   <span class=\"number\">-1.044236</span>    <span class=\"number\">1.071804</span>    <span class=\"number\">0.271860</span>   <span class=\"number\">-1.087401</span>    <span class=\"number\">0.524988</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Selection\"><a href=\"#Selection\" class=\"headerlink\" title=\"Selection\"></a>Selection</h2><p>Selecting a single column, which yields a <code>Series</code>, equivalent to <code>df.A</code>:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">23</span>]: df[<span class=\"string\">'A'</span>]</span><br><span class=\"line\">Out[<span class=\"number\">23</span>]: </span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>    <span class=\"number\">0.469112</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>    <span class=\"number\">1.212112</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>   <span class=\"number\">-0.861849</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>    <span class=\"number\">0.721555</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>   <span class=\"number\">-0.424972</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span>   <span class=\"number\">-0.673690</span></span><br><span class=\"line\">Freq: D, Name: A, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Selecting via <code>[]</code>, which slices the rows.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">24</span>]: df[<span class=\"number\">0</span>:<span class=\"number\">3</span>]</span><br><span class=\"line\">Out[<span class=\"number\">24</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span> <span class=\"number\">-0.282863</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">1.071804</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">25</span>]: df[<span class=\"string\">'20130102'</span>:<span class=\"string\">'20130104'</span>]</span><br><span class=\"line\">Out[<span class=\"number\">25</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">1.071804</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br></pre></td></tr></table></figure>\n<p>For getting a cross section using a label:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">26</span>]: df.loc[dates[<span class=\"number\">0</span>]]</span><br><span class=\"line\">Out[<span class=\"number\">26</span>]: </span><br><span class=\"line\">A    <span class=\"number\">0.469112</span></span><br><span class=\"line\">B   <span class=\"number\">-0.282863</span></span><br><span class=\"line\">C   <span class=\"number\">-1.509059</span></span><br><span class=\"line\">D   <span class=\"number\">-1.135632</span></span><br><span class=\"line\">Name: <span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span>, dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Using a single column’s values to select data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">39</span>]: df[df.A &gt; <span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">39</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span> <span class=\"number\">-0.282863</span> <span class=\"number\">-1.509059</span> <span class=\"number\">-1.135632</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span> <span class=\"number\">-1.044236</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">0.271860</span></span><br></pre></td></tr></table></figure>\n<p>Selecting values from a DataFrame where a boolean condition is met.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">40</span>]: df[df &gt; <span class=\"number\">0</span>]</span><br><span class=\"line\">Out[<span class=\"number\">40</span>]: </span><br><span class=\"line\">                   A         B         C         D</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.469112</span>       NaN       NaN       NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span>       NaN  <span class=\"number\">0.119209</span>       NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>       NaN       NaN       NaN  <span class=\"number\">1.071804</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span>       NaN       NaN  <span class=\"number\">0.271860</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>       NaN  <span class=\"number\">0.567020</span>  <span class=\"number\">0.276232</span>       NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span>       NaN  <span class=\"number\">0.113648</span>       NaN  <span class=\"number\">0.524988</span></span><br></pre></td></tr></table></figure>\n<p>Setting a new column automatically aligns the data by the indexes.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">45</span>]: s1 = pd.Series([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>], index=pd.date_range(<span class=\"string\">'20130102'</span>, periods=<span class=\"number\">6</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">46</span>]: s1</span><br><span class=\"line\">Out[<span class=\"number\">46</span>]: </span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>    <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>    <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>    <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>    <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span>    <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-07</span>    <span class=\"number\">6</span></span><br><span class=\"line\">Freq: D, dtype: int64</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">47</span>]: df[<span class=\"string\">'F'</span>] = s1</span><br></pre></td></tr></table></figure>\n<h2 id=\"Missing-Data\"><a href=\"#Missing-Data\" class=\"headerlink\" title=\"Missing Data\"></a>Missing Data</h2><p>pandas primarily uses the value <code>np.nan</code> to represent missing data. It is by default not included in computations. </p>\n<p>Reindexing allows you to change/add/delete the index on a specified axis. This returns a copy of the data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">55</span>]: df1 = df.reindex(index=dates[<span class=\"number\">0</span>:<span class=\"number\">4</span>], columns=list(df.columns) + [<span class=\"string\">'E'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">56</span>]: df1.loc[dates[<span class=\"number\">0</span>]:dates[<span class=\"number\">1</span>], <span class=\"string\">'E'</span>] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">57</span>]: df1</span><br><span class=\"line\">Out[<span class=\"number\">57</span>]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.000000</span>  <span class=\"number\">0.000000</span> <span class=\"number\">-1.509059</span>  <span class=\"number\">5</span>  NaN  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span>  <span class=\"number\">5</span>  <span class=\"number\">1.0</span>  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">5</span>  <span class=\"number\">2.0</span>  NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">5</span>  <span class=\"number\">3.0</span>  NaN</span><br></pre></td></tr></table></figure>\n<p>To drop any rows that have missing data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">58</span>]: df1.dropna(how=<span class=\"string\">'any'</span>)</span><br><span class=\"line\">Out[<span class=\"number\">58</span>]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span>  <span class=\"number\">5</span>  <span class=\"number\">1.0</span>  <span class=\"number\">1.0</span></span><br></pre></td></tr></table></figure>\n<p>Filling missing data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">59</span>]: df1.fillna(value=<span class=\"number\">5</span>)</span><br><span class=\"line\">Out[<span class=\"number\">59</span>]: </span><br><span class=\"line\">                   A         B         C  D    F    E</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.000000</span>  <span class=\"number\">0.000000</span> <span class=\"number\">-1.509059</span>  <span class=\"number\">5</span>  <span class=\"number\">5.0</span>  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span>  <span class=\"number\">0.119209</span>  <span class=\"number\">5</span>  <span class=\"number\">1.0</span>  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span> <span class=\"number\">-0.861849</span> <span class=\"number\">-2.104569</span> <span class=\"number\">-0.494929</span>  <span class=\"number\">5</span>  <span class=\"number\">2.0</span>  <span class=\"number\">5.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">0.721555</span> <span class=\"number\">-0.706771</span> <span class=\"number\">-1.039575</span>  <span class=\"number\">5</span>  <span class=\"number\">3.0</span>  <span class=\"number\">5.0</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Operations\"><a href=\"#Operations\" class=\"headerlink\" title=\"Operations\"></a>Operations</h2><p>Operations in general <em>exclude</em> missing data.</p>\n<p>Performing a descriptive statistic:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">61</span>]: df.mean()</span><br><span class=\"line\">Out[<span class=\"number\">61</span>]: </span><br><span class=\"line\">A   <span class=\"number\">-0.004474</span></span><br><span class=\"line\">B   <span class=\"number\">-0.383981</span></span><br><span class=\"line\">C   <span class=\"number\">-0.687758</span></span><br><span class=\"line\">D    <span class=\"number\">5.000000</span></span><br><span class=\"line\">F    <span class=\"number\">3.000000</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Applying functions to the data:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">66</span>]: df.apply(np.cumsum)</span><br><span class=\"line\">Out[<span class=\"number\">66</span>]: </span><br><span class=\"line\">                   A         B         C   D     F</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-01</span>  <span class=\"number\">0.000000</span>  <span class=\"number\">0.000000</span> <span class=\"number\">-1.509059</span>   <span class=\"number\">5</span>   NaN</span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-02</span>  <span class=\"number\">1.212112</span> <span class=\"number\">-0.173215</span> <span class=\"number\">-1.389850</span>  <span class=\"number\">10</span>   <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-03</span>  <span class=\"number\">0.350263</span> <span class=\"number\">-2.277784</span> <span class=\"number\">-1.884779</span>  <span class=\"number\">15</span>   <span class=\"number\">3.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-04</span>  <span class=\"number\">1.071818</span> <span class=\"number\">-2.984555</span> <span class=\"number\">-2.924354</span>  <span class=\"number\">20</span>   <span class=\"number\">6.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-05</span>  <span class=\"number\">0.646846</span> <span class=\"number\">-2.417535</span> <span class=\"number\">-2.648122</span>  <span class=\"number\">25</span>  <span class=\"number\">10.0</span></span><br><span class=\"line\"><span class=\"number\">2013</span><span class=\"number\">-01</span><span class=\"number\">-06</span> <span class=\"number\">-0.026844</span> <span class=\"number\">-2.303886</span> <span class=\"number\">-4.126549</span>  <span class=\"number\">30</span>  <span class=\"number\">15.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">67</span>]: df.apply(<span class=\"keyword\">lambda</span> x: x.max() - x.min())</span><br><span class=\"line\">Out[<span class=\"number\">67</span>]: </span><br><span class=\"line\">A    <span class=\"number\">2.073961</span></span><br><span class=\"line\">B    <span class=\"number\">2.671590</span></span><br><span class=\"line\">C    <span class=\"number\">1.785291</span></span><br><span class=\"line\">D    <span class=\"number\">0.000000</span></span><br><span class=\"line\">F    <span class=\"number\">4.000000</span></span><br><span class=\"line\">dtype: float64</span><br></pre></td></tr></table></figure>\n<p>Series is equipped with a set of string processing methods in the str attribute that make it easy to operate on each element of the array, as in the code snippet below.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">In [<span class=\"number\">71</span>]: s = pd.Series([<span class=\"string\">'A'</span>, <span class=\"string\">'B'</span>, <span class=\"string\">'C'</span>, <span class=\"string\">'Aaba'</span>, <span class=\"string\">'Baca'</span>, np.nan, <span class=\"string\">'CABA'</span>, <span class=\"string\">'dog'</span>, <span class=\"string\">'cat'</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">In [<span class=\"number\">72</span>]: s.str.lower()</span><br><span class=\"line\">Out[<span class=\"number\">72</span>]: </span><br><span class=\"line\"><span class=\"number\">0</span>       a</span><br><span class=\"line\"><span class=\"number\">1</span>       b</span><br><span class=\"line\"><span class=\"number\">2</span>       c</span><br><span class=\"line\"><span class=\"number\">3</span>    aaba</span><br><span class=\"line\"><span class=\"number\">4</span>    baca</span><br><span class=\"line\"><span class=\"number\">5</span>     NaN</span><br><span class=\"line\"><span class=\"number\">6</span>    caba</span><br><span class=\"line\"><span class=\"number\">7</span>     dog</span><br><span class=\"line\"><span class=\"number\">8</span>     cat</span><br><span class=\"line\">dtype: object</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>For detailed usage of pandas, refer to the following documentation directly.</p>\n</blockquote>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><ol>\n<li><a href=\"http://pandas.pydata.org/pandas-docs/stable/index.html\" target=\"_blank\" rel=\"noopener\">pandas 0.24.1 documentation</a></li>\n</ol>"},{"title":"Basic Notes on NumPy","date":"2019-02-27T16:00:00.000Z","_content":"\n## About NumPy\n\n​\tNumPy is the fundamental package for scientific computing with Python. It contains among other things:\n\n- a powerful N-dimensional array object\n- sophisticated (broadcasting) functions\n- tools for integrating C/C++ and Fortran code\n- useful linear algebra, Fourier transform, and random number capabilities\n\n## The Basics\n\n​\tNumPy’s array class is called `ndarray`. It is also known by the alias `array`. In NumPy dimensions are called *axes*.\n\n<!-- more -->\n\n​\tNote that `numpy.array` is not the same as the Standard Python Library class `array.array`, which only handles one-dimensional arrays and offers less functionality.\n\n​\tHere are some attributes of an `ndarray` object:\n\n- **ndarray.ndim**\n\n  The **number of axes** (dimensions) of the array.\n\n- **ndarray.shape**\n\n  The **dimensions** of the array. \n\n  This is a tuple of integers indicating the size of the array in each dimension. For a matrix with *n* rows and *m* columns, `shape` will be `(n,m)`. The length of the `shape` tuple is therefore the number of axes, `ndim`.\n\n- **ndarray.size**\n\n  The **total number of elements** of the array. This is equal to the product of the elements of `shape`.\n\n- **ndarray.itemsize**\n\n  The **size in bytes of each element** of the array. \n\n  For example, an array of elements of type `float64` has `itemsize` 8 (=64/8), while one of type `complex32` has `itemsize` 4 (=32/8). It is equivalent to `ndarray.dtype.itemsize`.\n\n- **ndarray.dtype**\n\n  An object describing the **type of the elements** in the array. \n\nAn Example:\n\n```python\n>>> import numpy as np\n>>> a = np.arange(15).reshape(3, 5)\n>>> a\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>>> a.shape\n(3, 5)\n>>> a.ndim\n2\n>>> a.dtype.name\n'int64'\n>>> a.itemsize\n8\t# per item\n>>> a.size\n15\t# number of items\n>>> type(a)\n<type 'numpy.ndarray'>\n```\n\n## Array Creation\n\n​\tYou can create an array from a regular Python list or tuple using the `array` function. The type of the resulting array is deduced from the type of the elements in the sequences.\n\nA frequent error consists in calling `array` with multiple numeric arguments, rather than providing a single list of numbers as an argument.\n\n```python\n>>> a = np.array(1,2,3,4)    # WRONG\n>>> a = np.array([1,2,3,4])  # RIGHT\n```\n\nThe type of the array can also be explicitly specified at creation time:\n\n```python\n>>> c = np.array( [ [1,2], [3,4] ], dtype=complex )\n>>> c\narray([[ 1.+0.j,  2.+0.j],\n       [ 3.+0.j,  4.+0.j]])\n```\n\nThe function `zeros` creates an array full of zeros, the function `ones` creates an array full of ones, and the function `empty` creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is `float64`.\n\n```python\n>>> np.zeros( (3,4) )\narray([[ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.]])\n>>> np.ones( (2,3,4), dtype=np.int16 )                \narray([[[ 1, 1, 1, 1],\n        [ 1, 1, 1, 1],\n        [ 1, 1, 1, 1]],\n       [[ 1, 1, 1, 1],\n        [ 1, 1, 1, 1],\n        [ 1, 1, 1, 1]]], dtype=int16)\n```\n\nTo create sequences of numbers, NumPy provides a function analogous to `range` that returns arrays instead of lists.\n\n```python\n>>> np.arange( 10, 30, 5 )\narray([10, 15, 20, 25])\n>>> np.arange( 0, 2, 0.3 )\t# it accepts float arguments\narray([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])\n```\n\nFor float data, use the function `linspace` that receives as an argument the number of elements that we want, instead of the step.\n\n```python\n>>> from numpy import pi\n>>> np.linspace( 0, 2, 9 )\t# 9 numbers from 0 to 2\narray([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])\n>>> x = np.linspace( 0, 2*pi, 100 )\t# useful to evaluate function at lots of points\n>>> f = np.sin(x)\n```\n\n## Basic Operations\n\nUnlike in many matrix languages, the product operator `*` operates elementwise in NumPy arrays. The matrix product can be performed using the `dot` function or method.\n\n```python\n>>> A = np.array( [[1,1],\n...             [0,1]] )\n>>> B = np.array( [[2,0],\n...             [3,4]] )\n>>> A * B                       # elementwise product\narray([[2, 0],\n       [0, 4]])\n>>> A.dot(B)                    # another matrix product\narray([[5, 4],\n       [3, 4]])\n```\n\nSome operations, such as `+=` and `*=`, act in place to modify an existing array rather than create a new one.\n\n```python\n>>> a = np.ones((2,3), dtype=int)\n>>> b = np.random.random((2,3))\n>>> a *= 3\n>>> a\narray([[3, 3, 3],\n       [3, 3, 3]])\n>>> b += a\n>>> b\narray([[ 3.417022  ,  3.72032449,  3.00011437],\n       [ 3.30233257,  3.14675589,  3.09233859]])\n>>> a += b                  # b is not automatically converted to integer type\nTraceback (most recent call last):\n  ...\nTypeError: Cannot cast ufunc add output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n```\n\nWhen operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting).\n\nMany unary operations, such as computing the sum of all the elements in the array, are implemented as methods of the `ndarray`class.\n\n- a.sum()\n- a.min()\n- a.max()\n\nBy default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the `axis` parameter you can apply an operation along the specified axis of an array:\n\n- a.max(axis=0)\n- a.cumsum(axis=1)\n\nWithin NumPy, \"universal functions\" like sin, cos, and exp operate elementwise on an array, producing an array as output.\n\n```python\n>>> B = np.arange(3)\n>>> B\narray([0, 1, 2])\n>>> np.exp(B)\narray([ 1.        ,  2.71828183,  7.3890561 ])\n>>> np.sqrt(B)\narray([ 0.        ,  1.        ,  1.41421356])\n```\n\n## Indexing, Slicing and Iterating\n\n**One-dimensional** arrays can be indexed, sliced and iterated over, much like Lists and other Python sequences.\n\n**Multidimensional** arrays can have one index per axis. These indices are given in a tuple separated by commas:  \nWhen fewer indices are provided than the number of axes, the missing indices are considered complete slices`:`  \nThe **dots** (`...`) represent as many colons as needed to produce a complete indexing tuple. For example, if `x` is an array with 5 axes, then  \n\n- `x[1,2,...]` == `x[1,2,:,:,:]`,\n- `x[...,3]` == `x[:,:,:,:,3]` \n- `x[4,...,5,:]` == `x[4,:,:,5,:]`.  \n\n**Iterating** over multidimensional arrays is done with respect to the first axis.\n\n## Shape Manipulation\n\n1. Changing the shape of an array\n\n   - a.ravel()\t\n   returns the array, flattened\n   - a.reshape(m,n)\t\n   returns the array with a modified shape\n   If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated.\n   - a.T\t\n   returns the array, transposed  \n2. Stacking together different arrays\n\n   - np.vstack((a,b)) # Vertical\n   - np.hstack((a,b)) # Horizontal\n   - np.concatenate(a1,a2,...,axis=n) # Complex cases\n3. Splitting one array into several smaller ones  \n\n   - np.vsplit() # Vertical\n   - np.hsplit() # Horizontal\n   - np.array_split() # Complex cases\n\n## Copies and Views\n\n1. ### No Copy at All\n\n   Simple assignments make no copy of array objects or of their data.\n\n   Python passes mutable objects as references, so function calls make no copy.\n\n2. ### View or Shallow Copy\n\n   Different array objects can share the same data. The `view` method creates a new array object that looks at the same data.\n\n   ```python\n   >>> c = a.view()\n   >>> c is a\n   False\n   >>> c.base is a\t# c is a view of the data owned by a\n   True\n   >>> c.flags.owndata\n   False\n   >>>\n   >>> c.shape = 2,6\t# a's shape doesn't change\n   >>> a.shape\n   (3, 4)\n   >>> c[0,4] = 1234\t# a's data changes\n   >>> a\n   array([[   0,    1,    2,    3],\n          [1234,    5,    6,    7],\n          [   8,    9,   10,   11]])\n   ```\n\n   Slicing an array returns a view of it.\n\n3. ### Deep Copy\n\n   The `copy` method makes a complete copy of the array and its data.\n\n> For less basic usage of NumPy, refer to the following documentation directly.\n\n## References:\n\n1. [NumPy Tutorial](https://docs.scipy.org/doc/numpy/user/quickstart.html)\n2. [NumPy Documentation (Chinese Version)](https://www.numpy.org.cn/)","source":"_posts/python-04.md","raw":"---\ntitle: Basic Notes on NumPy\ndate: 2019-02-28\ntags: [python]\n---\n\n## About NumPy\n\n​\tNumPy is the fundamental package for scientific computing with Python. It contains among other things:\n\n- a powerful N-dimensional array object\n- sophisticated (broadcasting) functions\n- tools for integrating C/C++ and Fortran code\n- useful linear algebra, Fourier transform, and random number capabilities\n\n## The Basics\n\n​\tNumPy’s array class is called `ndarray`. It is also known by the alias `array`. In NumPy dimensions are called *axes*.\n\n<!-- more -->\n\n​\tNote that `numpy.array` is not the same as the Standard Python Library class `array.array`, which only handles one-dimensional arrays and offers less functionality.\n\n​\tHere are some attributes of an `ndarray` object:\n\n- **ndarray.ndim**\n\n  The **number of axes** (dimensions) of the array.\n\n- **ndarray.shape**\n\n  The **dimensions** of the array. \n\n  This is a tuple of integers indicating the size of the array in each dimension. For a matrix with *n* rows and *m* columns, `shape` will be `(n,m)`. The length of the `shape` tuple is therefore the number of axes, `ndim`.\n\n- **ndarray.size**\n\n  The **total number of elements** of the array. This is equal to the product of the elements of `shape`.\n\n- **ndarray.itemsize**\n\n  The **size in bytes of each element** of the array. \n\n  For example, an array of elements of type `float64` has `itemsize` 8 (=64/8), while one of type `complex32` has `itemsize` 4 (=32/8). It is equivalent to `ndarray.dtype.itemsize`.\n\n- **ndarray.dtype**\n\n  An object describing the **type of the elements** in the array. \n\nAn Example:\n\n```python\n>>> import numpy as np\n>>> a = np.arange(15).reshape(3, 5)\n>>> a\narray([[ 0,  1,  2,  3,  4],\n       [ 5,  6,  7,  8,  9],\n       [10, 11, 12, 13, 14]])\n>>> a.shape\n(3, 5)\n>>> a.ndim\n2\n>>> a.dtype.name\n'int64'\n>>> a.itemsize\n8\t# per item\n>>> a.size\n15\t# number of items\n>>> type(a)\n<type 'numpy.ndarray'>\n```\n\n## Array Creation\n\n​\tYou can create an array from a regular Python list or tuple using the `array` function. The type of the resulting array is deduced from the type of the elements in the sequences.\n\nA frequent error consists in calling `array` with multiple numeric arguments, rather than providing a single list of numbers as an argument.\n\n```python\n>>> a = np.array(1,2,3,4)    # WRONG\n>>> a = np.array([1,2,3,4])  # RIGHT\n```\n\nThe type of the array can also be explicitly specified at creation time:\n\n```python\n>>> c = np.array( [ [1,2], [3,4] ], dtype=complex )\n>>> c\narray([[ 1.+0.j,  2.+0.j],\n       [ 3.+0.j,  4.+0.j]])\n```\n\nThe function `zeros` creates an array full of zeros, the function `ones` creates an array full of ones, and the function `empty` creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is `float64`.\n\n```python\n>>> np.zeros( (3,4) )\narray([[ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.],\n       [ 0.,  0.,  0.,  0.]])\n>>> np.ones( (2,3,4), dtype=np.int16 )                \narray([[[ 1, 1, 1, 1],\n        [ 1, 1, 1, 1],\n        [ 1, 1, 1, 1]],\n       [[ 1, 1, 1, 1],\n        [ 1, 1, 1, 1],\n        [ 1, 1, 1, 1]]], dtype=int16)\n```\n\nTo create sequences of numbers, NumPy provides a function analogous to `range` that returns arrays instead of lists.\n\n```python\n>>> np.arange( 10, 30, 5 )\narray([10, 15, 20, 25])\n>>> np.arange( 0, 2, 0.3 )\t# it accepts float arguments\narray([ 0. ,  0.3,  0.6,  0.9,  1.2,  1.5,  1.8])\n```\n\nFor float data, use the function `linspace` that receives as an argument the number of elements that we want, instead of the step.\n\n```python\n>>> from numpy import pi\n>>> np.linspace( 0, 2, 9 )\t# 9 numbers from 0 to 2\narray([ 0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,  1.5 ,  1.75,  2.  ])\n>>> x = np.linspace( 0, 2*pi, 100 )\t# useful to evaluate function at lots of points\n>>> f = np.sin(x)\n```\n\n## Basic Operations\n\nUnlike in many matrix languages, the product operator `*` operates elementwise in NumPy arrays. The matrix product can be performed using the `dot` function or method.\n\n```python\n>>> A = np.array( [[1,1],\n...             [0,1]] )\n>>> B = np.array( [[2,0],\n...             [3,4]] )\n>>> A * B                       # elementwise product\narray([[2, 0],\n       [0, 4]])\n>>> A.dot(B)                    # another matrix product\narray([[5, 4],\n       [3, 4]])\n```\n\nSome operations, such as `+=` and `*=`, act in place to modify an existing array rather than create a new one.\n\n```python\n>>> a = np.ones((2,3), dtype=int)\n>>> b = np.random.random((2,3))\n>>> a *= 3\n>>> a\narray([[3, 3, 3],\n       [3, 3, 3]])\n>>> b += a\n>>> b\narray([[ 3.417022  ,  3.72032449,  3.00011437],\n       [ 3.30233257,  3.14675589,  3.09233859]])\n>>> a += b                  # b is not automatically converted to integer type\nTraceback (most recent call last):\n  ...\nTypeError: Cannot cast ufunc add output from dtype('float64') to dtype('int64') with casting rule 'same_kind'\n```\n\nWhen operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting).\n\nMany unary operations, such as computing the sum of all the elements in the array, are implemented as methods of the `ndarray`class.\n\n- a.sum()\n- a.min()\n- a.max()\n\nBy default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the `axis` parameter you can apply an operation along the specified axis of an array:\n\n- a.max(axis=0)\n- a.cumsum(axis=1)\n\nWithin NumPy, \"universal functions\" like sin, cos, and exp operate elementwise on an array, producing an array as output.\n\n```python\n>>> B = np.arange(3)\n>>> B\narray([0, 1, 2])\n>>> np.exp(B)\narray([ 1.        ,  2.71828183,  7.3890561 ])\n>>> np.sqrt(B)\narray([ 0.        ,  1.        ,  1.41421356])\n```\n\n## Indexing, Slicing and Iterating\n\n**One-dimensional** arrays can be indexed, sliced and iterated over, much like Lists and other Python sequences.\n\n**Multidimensional** arrays can have one index per axis. These indices are given in a tuple separated by commas:  \nWhen fewer indices are provided than the number of axes, the missing indices are considered complete slices`:`  \nThe **dots** (`...`) represent as many colons as needed to produce a complete indexing tuple. For example, if `x` is an array with 5 axes, then  \n\n- `x[1,2,...]` == `x[1,2,:,:,:]`,\n- `x[...,3]` == `x[:,:,:,:,3]` \n- `x[4,...,5,:]` == `x[4,:,:,5,:]`.  \n\n**Iterating** over multidimensional arrays is done with respect to the first axis.\n\n## Shape Manipulation\n\n1. Changing the shape of an array\n\n   - a.ravel()\t\n   returns the array, flattened\n   - a.reshape(m,n)\t\n   returns the array with a modified shape\n   If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated.\n   - a.T\t\n   returns the array, transposed  \n2. Stacking together different arrays\n\n   - np.vstack((a,b)) # Vertical\n   - np.hstack((a,b)) # Horizontal\n   - np.concatenate(a1,a2,...,axis=n) # Complex cases\n3. Splitting one array into several smaller ones  \n\n   - np.vsplit() # Vertical\n   - np.hsplit() # Horizontal\n   - np.array_split() # Complex cases\n\n## Copies and Views\n\n1. ### No Copy at All\n\n   Simple assignments make no copy of array objects or of their data.\n\n   Python passes mutable objects as references, so function calls make no copy.\n\n2. ### View or Shallow Copy\n\n   Different array objects can share the same data. The `view` method creates a new array object that looks at the same data.\n\n   ```python\n   >>> c = a.view()\n   >>> c is a\n   False\n   >>> c.base is a\t# c is a view of the data owned by a\n   True\n   >>> c.flags.owndata\n   False\n   >>>\n   >>> c.shape = 2,6\t# a's shape doesn't change\n   >>> a.shape\n   (3, 4)\n   >>> c[0,4] = 1234\t# a's data changes\n   >>> a\n   array([[   0,    1,    2,    3],\n          [1234,    5,    6,    7],\n          [   8,    9,   10,   11]])\n   ```\n\n   Slicing an array returns a view of it.\n\n3. ### Deep Copy\n\n   The `copy` method makes a complete copy of the array and its data.\n\n> For less basic usage of NumPy, refer to the following documentation directly.\n\n## References:\n\n1. [NumPy Tutorial](https://docs.scipy.org/doc/numpy/user/quickstart.html)\n2. [NumPy Documentation (Chinese Version)](https://www.numpy.org.cn/)","slug":"python-04","published":1,"updated":"2019-04-30T16:41:50.548Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvdywbky001230uvd6d3948a","content":"<h2 id=\"About-NumPy\"><a href=\"#About-NumPy\" class=\"headerlink\" title=\"About NumPy\"></a>About NumPy</h2><p>​    NumPy is the fundamental package for scientific computing with Python. It contains among other things:</p>\n<ul>\n<li>a powerful N-dimensional array object</li>\n<li>sophisticated (broadcasting) functions</li>\n<li>tools for integrating C/C++ and Fortran code</li>\n<li>useful linear algebra, Fourier transform, and random number capabilities</li>\n</ul>\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>​    NumPy’s array class is called <code>ndarray</code>. It is also known by the alias <code>array</code>. In NumPy dimensions are called <em>axes</em>.</p>\n<a id=\"more\"></a>\n<p>​    Note that <code>numpy.array</code> is not the same as the Standard Python Library class <code>array.array</code>, which only handles one-dimensional arrays and offers less functionality.</p>\n<p>​    Here are some attributes of an <code>ndarray</code> object:</p>\n<ul>\n<li><p><strong>ndarray.ndim</strong></p>\n<p>The <strong>number of axes</strong> (dimensions) of the array.</p>\n</li>\n<li><p><strong>ndarray.shape</strong></p>\n<p>The <strong>dimensions</strong> of the array. </p>\n<p>This is a tuple of integers indicating the size of the array in each dimension. For a matrix with <em>n</em> rows and <em>m</em> columns, <code>shape</code> will be <code>(n,m)</code>. The length of the <code>shape</code> tuple is therefore the number of axes, <code>ndim</code>.</p>\n</li>\n<li><p><strong>ndarray.size</strong></p>\n<p>The <strong>total number of elements</strong> of the array. This is equal to the product of the elements of <code>shape</code>.</p>\n</li>\n<li><p><strong>ndarray.itemsize</strong></p>\n<p>The <strong>size in bytes of each element</strong> of the array. </p>\n<p>For example, an array of elements of type <code>float64</code> has <code>itemsize</code> 8 (=64/8), while one of type <code>complex32</code> has <code>itemsize</code> 4 (=32/8). It is equivalent to <code>ndarray.dtype.itemsize</code>.</p>\n</li>\n<li><p><strong>ndarray.dtype</strong></p>\n<p>An object describing the <strong>type of the elements</strong> in the array. </p>\n</li>\n</ul>\n<p>An Example:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.arange(<span class=\"number\">15</span>).reshape(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">array([[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>],</span><br><span class=\"line\">       [ <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>],</span><br><span class=\"line\">       [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.shape</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.ndim</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.dtype.name</span><br><span class=\"line\"><span class=\"string\">'int64'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.itemsize</span><br><span class=\"line\"><span class=\"number\">8</span>\t<span class=\"comment\"># per item</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.size</span><br><span class=\"line\"><span class=\"number\">15</span>\t<span class=\"comment\"># number of items</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</span><br><span class=\"line\">&lt;type <span class=\"string\">'numpy.ndarray'</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Array-Creation\"><a href=\"#Array-Creation\" class=\"headerlink\" title=\"Array Creation\"></a>Array Creation</h2><p>​    You can create an array from a regular Python list or tuple using the <code>array</code> function. The type of the resulting array is deduced from the type of the elements in the sequences.</p>\n<p>A frequent error consists in calling <code>array</code> with multiple numeric arguments, rather than providing a single list of numbers as an argument.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.array(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># WRONG</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])  <span class=\"comment\"># RIGHT</span></span><br></pre></td></tr></table></figure>\n<p>The type of the array can also be explicitly specified at creation time:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = np.array( [ [<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>] ], dtype=complex )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\">array([[ <span class=\"number\">1.</span>+<span class=\"number\">0.j</span>,  <span class=\"number\">2.</span>+<span class=\"number\">0.j</span>],</span><br><span class=\"line\">       [ <span class=\"number\">3.</span>+<span class=\"number\">0.j</span>,  <span class=\"number\">4.</span>+<span class=\"number\">0.j</span>]])</span><br></pre></td></tr></table></figure>\n<p>The function <code>zeros</code> creates an array full of zeros, the function <code>ones</code> creates an array full of ones, and the function <code>empty</code> creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is <code>float64</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.zeros( (<span class=\"number\">3</span>,<span class=\"number\">4</span>) )</span><br><span class=\"line\">array([[ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.ones( (<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>), dtype=np.int16 )                </span><br><span class=\"line\">array([[[ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]],</span><br><span class=\"line\">       [[ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]]], dtype=int16)</span><br></pre></td></tr></table></figure>\n<p>To create sequences of numbers, NumPy provides a function analogous to <code>range</code> that returns arrays instead of lists.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.arange( <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span> )</span><br><span class=\"line\">array([<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.arange( <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0.3</span> )\t<span class=\"comment\"># it accepts float arguments</span></span><br><span class=\"line\">array([ <span class=\"number\">0.</span> ,  <span class=\"number\">0.3</span>,  <span class=\"number\">0.6</span>,  <span class=\"number\">0.9</span>,  <span class=\"number\">1.2</span>,  <span class=\"number\">1.5</span>,  <span class=\"number\">1.8</span>])</span><br></pre></td></tr></table></figure>\n<p>For float data, use the function <code>linspace</code> that receives as an argument the number of elements that we want, instead of the step.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> pi</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.linspace( <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span> )\t<span class=\"comment\"># 9 numbers from 0 to 2</span></span><br><span class=\"line\">array([ <span class=\"number\">0.</span>  ,  <span class=\"number\">0.25</span>,  <span class=\"number\">0.5</span> ,  <span class=\"number\">0.75</span>,  <span class=\"number\">1.</span>  ,  <span class=\"number\">1.25</span>,  <span class=\"number\">1.5</span> ,  <span class=\"number\">1.75</span>,  <span class=\"number\">2.</span>  ])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = np.linspace( <span class=\"number\">0</span>, <span class=\"number\">2</span>*pi, <span class=\"number\">100</span> )\t<span class=\"comment\"># useful to evaluate function at lots of points</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = np.sin(x)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic-Operations\"><a href=\"#Basic-Operations\" class=\"headerlink\" title=\"Basic Operations\"></a>Basic Operations</h2><p>Unlike in many matrix languages, the product operator <code>*</code> operates elementwise in NumPy arrays. The matrix product can be performed using the <code>dot</code> function or method.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array( [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\"><span class=\"meta\">... </span>            [<span class=\"number\">0</span>,<span class=\"number\">1</span>]] )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.array( [[<span class=\"number\">2</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"><span class=\"meta\">... </span>            [<span class=\"number\">3</span>,<span class=\"number\">4</span>]] )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A * B                       <span class=\"comment\"># elementwise product</span></span><br><span class=\"line\">array([[<span class=\"number\">2</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">       [<span class=\"number\">0</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A.dot(B)                    <span class=\"comment\"># another matrix product</span></span><br><span class=\"line\">array([[<span class=\"number\">5</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">       [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br></pre></td></tr></table></figure>\n<p>Some operations, such as <code>+=</code> and <code>*=</code>, act in place to modify an existing array rather than create a new one.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.ones((<span class=\"number\">2</span>,<span class=\"number\">3</span>), dtype=int)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = np.random.random((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a *= <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">array([[<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">       [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b += a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">array([[ <span class=\"number\">3.417022</span>  ,  <span class=\"number\">3.72032449</span>,  <span class=\"number\">3.00011437</span>],</span><br><span class=\"line\">       [ <span class=\"number\">3.30233257</span>,  <span class=\"number\">3.14675589</span>,  <span class=\"number\">3.09233859</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a += b                  <span class=\"comment\"># b is not automatically converted to integer type</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  ...</span><br><span class=\"line\">TypeError: Cannot cast ufunc add output <span class=\"keyword\">from</span> dtype(<span class=\"string\">'float64'</span>) to dtype(<span class=\"string\">'int64'</span>) <span class=\"keyword\">with</span> casting rule <span class=\"string\">'same_kind'</span></span><br></pre></td></tr></table></figure>\n<p>When operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting).</p>\n<p>Many unary operations, such as computing the sum of all the elements in the array, are implemented as methods of the <code>ndarray</code>class.</p>\n<ul>\n<li>a.sum()</li>\n<li>a.min()</li>\n<li>a.max()</li>\n</ul>\n<p>By default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the <code>axis</code> parameter you can apply an operation along the specified axis of an array:</p>\n<ul>\n<li>a.max(axis=0)</li>\n<li>a.cumsum(axis=1)</li>\n</ul>\n<p>Within NumPy, “universal functions” like sin, cos, and exp operate elementwise on an array, producing an array as output.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.arange(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B</span><br><span class=\"line\">array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.exp(B)</span><br><span class=\"line\">array([ <span class=\"number\">1.</span>        ,  <span class=\"number\">2.71828183</span>,  <span class=\"number\">7.3890561</span> ])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.sqrt(B)</span><br><span class=\"line\">array([ <span class=\"number\">0.</span>        ,  <span class=\"number\">1.</span>        ,  <span class=\"number\">1.41421356</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Indexing-Slicing-and-Iterating\"><a href=\"#Indexing-Slicing-and-Iterating\" class=\"headerlink\" title=\"Indexing, Slicing and Iterating\"></a>Indexing, Slicing and Iterating</h2><p><strong>One-dimensional</strong> arrays can be indexed, sliced and iterated over, much like Lists and other Python sequences.</p>\n<p><strong>Multidimensional</strong> arrays can have one index per axis. These indices are given in a tuple separated by commas:<br>When fewer indices are provided than the number of axes, the missing indices are considered complete slices<code>:</code><br>The <strong>dots</strong> (<code>...</code>) represent as many colons as needed to produce a complete indexing tuple. For example, if <code>x</code> is an array with 5 axes, then  </p>\n<ul>\n<li><code>x[1,2,...]</code> == <code>x[1,2,:,:,:]</code>,</li>\n<li><code>x[...,3]</code> == <code>x[:,:,:,:,3]</code> </li>\n<li><code>x[4,...,5,:]</code> == <code>x[4,:,:,5,:]</code>.  </li>\n</ul>\n<p><strong>Iterating</strong> over multidimensional arrays is done with respect to the first axis.</p>\n<h2 id=\"Shape-Manipulation\"><a href=\"#Shape-Manipulation\" class=\"headerlink\" title=\"Shape Manipulation\"></a>Shape Manipulation</h2><ol>\n<li><p>Changing the shape of an array</p>\n<ul>\n<li>a.ravel()<br>returns the array, flattened</li>\n<li>a.reshape(m,n)<br>returns the array with a modified shape<br>If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated.</li>\n<li>a.T<br>returns the array, transposed  </li>\n</ul>\n</li>\n<li><p>Stacking together different arrays</p>\n<ul>\n<li>np.vstack((a,b)) # Vertical</li>\n<li>np.hstack((a,b)) # Horizontal</li>\n<li>np.concatenate(a1,a2,…,axis=n) # Complex cases</li>\n</ul>\n</li>\n<li><p>Splitting one array into several smaller ones  </p>\n<ul>\n<li>np.vsplit() # Vertical</li>\n<li>np.hsplit() # Horizontal</li>\n<li>np.array_split() # Complex cases</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Copies-and-Views\"><a href=\"#Copies-and-Views\" class=\"headerlink\" title=\"Copies and Views\"></a>Copies and Views</h2><ol>\n<li><h3 id=\"No-Copy-at-All\"><a href=\"#No-Copy-at-All\" class=\"headerlink\" title=\"No Copy at All\"></a>No Copy at All</h3><p>Simple assignments make no copy of array objects or of their data.</p>\n<p>Python passes mutable objects as references, so function calls make no copy.</p>\n</li>\n<li><h3 id=\"View-or-Shallow-Copy\"><a href=\"#View-or-Shallow-Copy\" class=\"headerlink\" title=\"View or Shallow Copy\"></a>View or Shallow Copy</h3><p>Different array objects can share the same data. The <code>view</code> method creates a new array object that looks at the same data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = a.view()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c <span class=\"keyword\">is</span> a</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.base <span class=\"keyword\">is</span> a\t<span class=\"comment\"># c is a view of the data owned by a</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.flags.owndata</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.shape = <span class=\"number\">2</span>,<span class=\"number\">6</span>\t<span class=\"comment\"># a's shape doesn't change</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.shape</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c[<span class=\"number\">0</span>,<span class=\"number\">4</span>] = <span class=\"number\">1234</span>\t<span class=\"comment\"># a's data changes</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">array([[   <span class=\"number\">0</span>,    <span class=\"number\">1</span>,    <span class=\"number\">2</span>,    <span class=\"number\">3</span>],</span><br><span class=\"line\">       [<span class=\"number\">1234</span>,    <span class=\"number\">5</span>,    <span class=\"number\">6</span>,    <span class=\"number\">7</span>],</span><br><span class=\"line\">       [   <span class=\"number\">8</span>,    <span class=\"number\">9</span>,   <span class=\"number\">10</span>,   <span class=\"number\">11</span>]])</span><br></pre></td></tr></table></figure>\n<p>Slicing an array returns a view of it.</p>\n</li>\n<li><h3 id=\"Deep-Copy\"><a href=\"#Deep-Copy\" class=\"headerlink\" title=\"Deep Copy\"></a>Deep Copy</h3><p>The <code>copy</code> method makes a complete copy of the array and its data.</p>\n</li>\n</ol>\n<blockquote>\n<p>For less basic usage of NumPy, refer to the following documentation directly.</p>\n</blockquote>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><ol>\n<li><a href=\"https://docs.scipy.org/doc/numpy/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">NumPy Tutorial</a></li>\n<li><a href=\"https://www.numpy.org.cn/\" target=\"_blank\" rel=\"noopener\">NumPy Documentation (Chinese Version)</a></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"About-NumPy\"><a href=\"#About-NumPy\" class=\"headerlink\" title=\"About NumPy\"></a>About NumPy</h2><p>​    NumPy is the fundamental package for scientific computing with Python. It contains among other things:</p>\n<ul>\n<li>a powerful N-dimensional array object</li>\n<li>sophisticated (broadcasting) functions</li>\n<li>tools for integrating C/C++ and Fortran code</li>\n<li>useful linear algebra, Fourier transform, and random number capabilities</li>\n</ul>\n<h2 id=\"The-Basics\"><a href=\"#The-Basics\" class=\"headerlink\" title=\"The Basics\"></a>The Basics</h2><p>​    NumPy’s array class is called <code>ndarray</code>. It is also known by the alias <code>array</code>. In NumPy dimensions are called <em>axes</em>.</p>","more":"<p>​    Note that <code>numpy.array</code> is not the same as the Standard Python Library class <code>array.array</code>, which only handles one-dimensional arrays and offers less functionality.</p>\n<p>​    Here are some attributes of an <code>ndarray</code> object:</p>\n<ul>\n<li><p><strong>ndarray.ndim</strong></p>\n<p>The <strong>number of axes</strong> (dimensions) of the array.</p>\n</li>\n<li><p><strong>ndarray.shape</strong></p>\n<p>The <strong>dimensions</strong> of the array. </p>\n<p>This is a tuple of integers indicating the size of the array in each dimension. For a matrix with <em>n</em> rows and <em>m</em> columns, <code>shape</code> will be <code>(n,m)</code>. The length of the <code>shape</code> tuple is therefore the number of axes, <code>ndim</code>.</p>\n</li>\n<li><p><strong>ndarray.size</strong></p>\n<p>The <strong>total number of elements</strong> of the array. This is equal to the product of the elements of <code>shape</code>.</p>\n</li>\n<li><p><strong>ndarray.itemsize</strong></p>\n<p>The <strong>size in bytes of each element</strong> of the array. </p>\n<p>For example, an array of elements of type <code>float64</code> has <code>itemsize</code> 8 (=64/8), while one of type <code>complex32</code> has <code>itemsize</code> 4 (=32/8). It is equivalent to <code>ndarray.dtype.itemsize</code>.</p>\n</li>\n<li><p><strong>ndarray.dtype</strong></p>\n<p>An object describing the <strong>type of the elements</strong> in the array. </p>\n</li>\n</ul>\n<p>An Example:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.arange(<span class=\"number\">15</span>).reshape(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">array([[ <span class=\"number\">0</span>,  <span class=\"number\">1</span>,  <span class=\"number\">2</span>,  <span class=\"number\">3</span>,  <span class=\"number\">4</span>],</span><br><span class=\"line\">       [ <span class=\"number\">5</span>,  <span class=\"number\">6</span>,  <span class=\"number\">7</span>,  <span class=\"number\">8</span>,  <span class=\"number\">9</span>],</span><br><span class=\"line\">       [<span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">14</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.shape</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.ndim</span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.dtype.name</span><br><span class=\"line\"><span class=\"string\">'int64'</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.itemsize</span><br><span class=\"line\"><span class=\"number\">8</span>\t<span class=\"comment\"># per item</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.size</span><br><span class=\"line\"><span class=\"number\">15</span>\t<span class=\"comment\"># number of items</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>type(a)</span><br><span class=\"line\">&lt;type <span class=\"string\">'numpy.ndarray'</span>&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Array-Creation\"><a href=\"#Array-Creation\" class=\"headerlink\" title=\"Array Creation\"></a>Array Creation</h2><p>​    You can create an array from a regular Python list or tuple using the <code>array</code> function. The type of the resulting array is deduced from the type of the elements in the sequences.</p>\n<p>A frequent error consists in calling <code>array</code> with multiple numeric arguments, rather than providing a single list of numbers as an argument.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.array(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>)    <span class=\"comment\"># WRONG</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.array([<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>])  <span class=\"comment\"># RIGHT</span></span><br></pre></td></tr></table></figure>\n<p>The type of the array can also be explicitly specified at creation time:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = np.array( [ [<span class=\"number\">1</span>,<span class=\"number\">2</span>], [<span class=\"number\">3</span>,<span class=\"number\">4</span>] ], dtype=complex )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c</span><br><span class=\"line\">array([[ <span class=\"number\">1.</span>+<span class=\"number\">0.j</span>,  <span class=\"number\">2.</span>+<span class=\"number\">0.j</span>],</span><br><span class=\"line\">       [ <span class=\"number\">3.</span>+<span class=\"number\">0.j</span>,  <span class=\"number\">4.</span>+<span class=\"number\">0.j</span>]])</span><br></pre></td></tr></table></figure>\n<p>The function <code>zeros</code> creates an array full of zeros, the function <code>ones</code> creates an array full of ones, and the function <code>empty</code> creates an array whose initial content is random and depends on the state of the memory. By default, the dtype of the created array is <code>float64</code>.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.zeros( (<span class=\"number\">3</span>,<span class=\"number\">4</span>) )</span><br><span class=\"line\">array([[ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>],</span><br><span class=\"line\">       [ <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>,  <span class=\"number\">0.</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.ones( (<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>), dtype=np.int16 )                </span><br><span class=\"line\">array([[[ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]],</span><br><span class=\"line\">       [[ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">        [ <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>]]], dtype=int16)</span><br></pre></td></tr></table></figure>\n<p>To create sequences of numbers, NumPy provides a function analogous to <code>range</code> that returns arrays instead of lists.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.arange( <span class=\"number\">10</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span> )</span><br><span class=\"line\">array([<span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.arange( <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0.3</span> )\t<span class=\"comment\"># it accepts float arguments</span></span><br><span class=\"line\">array([ <span class=\"number\">0.</span> ,  <span class=\"number\">0.3</span>,  <span class=\"number\">0.6</span>,  <span class=\"number\">0.9</span>,  <span class=\"number\">1.2</span>,  <span class=\"number\">1.5</span>,  <span class=\"number\">1.8</span>])</span><br></pre></td></tr></table></figure>\n<p>For float data, use the function <code>linspace</code> that receives as an argument the number of elements that we want, instead of the step.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">from</span> numpy <span class=\"keyword\">import</span> pi</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.linspace( <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">9</span> )\t<span class=\"comment\"># 9 numbers from 0 to 2</span></span><br><span class=\"line\">array([ <span class=\"number\">0.</span>  ,  <span class=\"number\">0.25</span>,  <span class=\"number\">0.5</span> ,  <span class=\"number\">0.75</span>,  <span class=\"number\">1.</span>  ,  <span class=\"number\">1.25</span>,  <span class=\"number\">1.5</span> ,  <span class=\"number\">1.75</span>,  <span class=\"number\">2.</span>  ])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>x = np.linspace( <span class=\"number\">0</span>, <span class=\"number\">2</span>*pi, <span class=\"number\">100</span> )\t<span class=\"comment\"># useful to evaluate function at lots of points</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>f = np.sin(x)</span><br></pre></td></tr></table></figure>\n<h2 id=\"Basic-Operations\"><a href=\"#Basic-Operations\" class=\"headerlink\" title=\"Basic Operations\"></a>Basic Operations</h2><p>Unlike in many matrix languages, the product operator <code>*</code> operates elementwise in NumPy arrays. The matrix product can be performed using the <code>dot</code> function or method.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A = np.array( [[<span class=\"number\">1</span>,<span class=\"number\">1</span>],</span><br><span class=\"line\"><span class=\"meta\">... </span>            [<span class=\"number\">0</span>,<span class=\"number\">1</span>]] )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.array( [[<span class=\"number\">2</span>,<span class=\"number\">0</span>],</span><br><span class=\"line\"><span class=\"meta\">... </span>            [<span class=\"number\">3</span>,<span class=\"number\">4</span>]] )</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A * B                       <span class=\"comment\"># elementwise product</span></span><br><span class=\"line\">array([[<span class=\"number\">2</span>, <span class=\"number\">0</span>],</span><br><span class=\"line\">       [<span class=\"number\">0</span>, <span class=\"number\">4</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>A.dot(B)                    <span class=\"comment\"># another matrix product</span></span><br><span class=\"line\">array([[<span class=\"number\">5</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">       [<span class=\"number\">3</span>, <span class=\"number\">4</span>]])</span><br></pre></td></tr></table></figure>\n<p>Some operations, such as <code>+=</code> and <code>*=</code>, act in place to modify an existing array rather than create a new one.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = np.ones((<span class=\"number\">2</span>,<span class=\"number\">3</span>), dtype=int)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = np.random.random((<span class=\"number\">2</span>,<span class=\"number\">3</span>))</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a *= <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">array([[<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>],</span><br><span class=\"line\">       [<span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b += a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b</span><br><span class=\"line\">array([[ <span class=\"number\">3.417022</span>  ,  <span class=\"number\">3.72032449</span>,  <span class=\"number\">3.00011437</span>],</span><br><span class=\"line\">       [ <span class=\"number\">3.30233257</span>,  <span class=\"number\">3.14675589</span>,  <span class=\"number\">3.09233859</span>]])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a += b                  <span class=\"comment\"># b is not automatically converted to integer type</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  ...</span><br><span class=\"line\">TypeError: Cannot cast ufunc add output <span class=\"keyword\">from</span> dtype(<span class=\"string\">'float64'</span>) to dtype(<span class=\"string\">'int64'</span>) <span class=\"keyword\">with</span> casting rule <span class=\"string\">'same_kind'</span></span><br></pre></td></tr></table></figure>\n<p>When operating with arrays of different types, the type of the resulting array corresponds to the more general or precise one (a behavior known as upcasting).</p>\n<p>Many unary operations, such as computing the sum of all the elements in the array, are implemented as methods of the <code>ndarray</code>class.</p>\n<ul>\n<li>a.sum()</li>\n<li>a.min()</li>\n<li>a.max()</li>\n</ul>\n<p>By default, these operations apply to the array as though it were a list of numbers, regardless of its shape. However, by specifying the <code>axis</code> parameter you can apply an operation along the specified axis of an array:</p>\n<ul>\n<li>a.max(axis=0)</li>\n<li>a.cumsum(axis=1)</li>\n</ul>\n<p>Within NumPy, “universal functions” like sin, cos, and exp operate elementwise on an array, producing an array as output.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B = np.arange(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>B</span><br><span class=\"line\">array([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.exp(B)</span><br><span class=\"line\">array([ <span class=\"number\">1.</span>        ,  <span class=\"number\">2.71828183</span>,  <span class=\"number\">7.3890561</span> ])</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>np.sqrt(B)</span><br><span class=\"line\">array([ <span class=\"number\">0.</span>        ,  <span class=\"number\">1.</span>        ,  <span class=\"number\">1.41421356</span>])</span><br></pre></td></tr></table></figure>\n<h2 id=\"Indexing-Slicing-and-Iterating\"><a href=\"#Indexing-Slicing-and-Iterating\" class=\"headerlink\" title=\"Indexing, Slicing and Iterating\"></a>Indexing, Slicing and Iterating</h2><p><strong>One-dimensional</strong> arrays can be indexed, sliced and iterated over, much like Lists and other Python sequences.</p>\n<p><strong>Multidimensional</strong> arrays can have one index per axis. These indices are given in a tuple separated by commas:<br>When fewer indices are provided than the number of axes, the missing indices are considered complete slices<code>:</code><br>The <strong>dots</strong> (<code>...</code>) represent as many colons as needed to produce a complete indexing tuple. For example, if <code>x</code> is an array with 5 axes, then  </p>\n<ul>\n<li><code>x[1,2,...]</code> == <code>x[1,2,:,:,:]</code>,</li>\n<li><code>x[...,3]</code> == <code>x[:,:,:,:,3]</code> </li>\n<li><code>x[4,...,5,:]</code> == <code>x[4,:,:,5,:]</code>.  </li>\n</ul>\n<p><strong>Iterating</strong> over multidimensional arrays is done with respect to the first axis.</p>\n<h2 id=\"Shape-Manipulation\"><a href=\"#Shape-Manipulation\" class=\"headerlink\" title=\"Shape Manipulation\"></a>Shape Manipulation</h2><ol>\n<li><p>Changing the shape of an array</p>\n<ul>\n<li>a.ravel()<br>returns the array, flattened</li>\n<li>a.reshape(m,n)<br>returns the array with a modified shape<br>If a dimension is given as -1 in a reshaping operation, the other dimensions are automatically calculated.</li>\n<li>a.T<br>returns the array, transposed  </li>\n</ul>\n</li>\n<li><p>Stacking together different arrays</p>\n<ul>\n<li>np.vstack((a,b)) # Vertical</li>\n<li>np.hstack((a,b)) # Horizontal</li>\n<li>np.concatenate(a1,a2,…,axis=n) # Complex cases</li>\n</ul>\n</li>\n<li><p>Splitting one array into several smaller ones  </p>\n<ul>\n<li>np.vsplit() # Vertical</li>\n<li>np.hsplit() # Horizontal</li>\n<li>np.array_split() # Complex cases</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Copies-and-Views\"><a href=\"#Copies-and-Views\" class=\"headerlink\" title=\"Copies and Views\"></a>Copies and Views</h2><ol>\n<li><h3 id=\"No-Copy-at-All\"><a href=\"#No-Copy-at-All\" class=\"headerlink\" title=\"No Copy at All\"></a>No Copy at All</h3><p>Simple assignments make no copy of array objects or of their data.</p>\n<p>Python passes mutable objects as references, so function calls make no copy.</p>\n</li>\n<li><h3 id=\"View-or-Shallow-Copy\"><a href=\"#View-or-Shallow-Copy\" class=\"headerlink\" title=\"View or Shallow Copy\"></a>View or Shallow Copy</h3><p>Different array objects can share the same data. The <code>view</code> method creates a new array object that looks at the same data.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c = a.view()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c <span class=\"keyword\">is</span> a</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.base <span class=\"keyword\">is</span> a\t<span class=\"comment\"># c is a view of the data owned by a</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.flags.owndata</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c.shape = <span class=\"number\">2</span>,<span class=\"number\">6</span>\t<span class=\"comment\"># a's shape doesn't change</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a.shape</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>c[<span class=\"number\">0</span>,<span class=\"number\">4</span>] = <span class=\"number\">1234</span>\t<span class=\"comment\"># a's data changes</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a</span><br><span class=\"line\">array([[   <span class=\"number\">0</span>,    <span class=\"number\">1</span>,    <span class=\"number\">2</span>,    <span class=\"number\">3</span>],</span><br><span class=\"line\">       [<span class=\"number\">1234</span>,    <span class=\"number\">5</span>,    <span class=\"number\">6</span>,    <span class=\"number\">7</span>],</span><br><span class=\"line\">       [   <span class=\"number\">8</span>,    <span class=\"number\">9</span>,   <span class=\"number\">10</span>,   <span class=\"number\">11</span>]])</span><br></pre></td></tr></table></figure>\n<p>Slicing an array returns a view of it.</p>\n</li>\n<li><h3 id=\"Deep-Copy\"><a href=\"#Deep-Copy\" class=\"headerlink\" title=\"Deep Copy\"></a>Deep Copy</h3><p>The <code>copy</code> method makes a complete copy of the array and its data.</p>\n</li>\n</ol>\n<blockquote>\n<p>For less basic usage of NumPy, refer to the following documentation directly.</p>\n</blockquote>\n<h2 id=\"References\"><a href=\"#References\" class=\"headerlink\" title=\"References:\"></a>References:</h2><ol>\n<li><a href=\"https://docs.scipy.org/doc/numpy/user/quickstart.html\" target=\"_blank\" rel=\"noopener\">NumPy Tutorial</a></li>\n<li><a href=\"https://www.numpy.org.cn/\" target=\"_blank\" rel=\"noopener\">NumPy Documentation (Chinese Version)</a></li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/QQ-Zone-Spider/02.png","slug":"02.png","post":"cjvdywbks000s30uv74zkasfd","modified":1,"renderable":0},{"_id":"source/_posts/QQ-Zone-Spider/03.png","post":"cjvdywbks000s30uv74zkasfd","slug":"03.png","modified":1,"renderable":1},{"_id":"source/_posts/QQ-Zone-Spider/04.png","post":"cjvdywbks000s30uv74zkasfd","slug":"04.png","modified":1,"renderable":1},{"_id":"source/_posts/QQ-Zone-Spider/05.png","post":"cjvdywbks000s30uv74zkasfd","slug":"05.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cjvdywbja000030uvdtdajroa","tag_id":"cjvdywbjj000230uv6fr39udr","_id":"cjvdywbjt000730uvy6ovakf1"},{"post_id":"cjvdywbjh000130uvkx9z5msv","tag_id":"cjvdywbjj000230uv6fr39udr","_id":"cjvdywbjw000b30uvfgfsrde3"},{"post_id":"cjvdywbjl000330uvi67p5gad","tag_id":"cjvdywbjw000a30uv943pzqpv","_id":"cjvdywbk0000f30uv40gyzpjj"},{"post_id":"cjvdywbjn000430uvdp1ffsfv","tag_id":"cjvdywbjz000e30uvm6b4ywza","_id":"cjvdywbk1000h30uv447kdjwc"},{"post_id":"cjvdywbjq000530uv71d0gvpk","tag_id":"cjvdywbk1000g30uv78yy3by8","_id":"cjvdywbk2000j30uvdcvimp0t"},{"post_id":"cjvdywbjt000830uvgvm0k4qb","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbk3000l30uvoex273cr"},{"post_id":"cjvdywbjv000930uvsosxe1bu","tag_id":"cjvdywbk3000k30uv4sa6dyjn","_id":"cjvdywbk5000n30uvkjruagmh"},{"post_id":"cjvdywbjw000c30uvwsf9bflk","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbk6000p30uvafcnrs2u"},{"post_id":"cjvdywbjy000d30uvwbz7g07j","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbk6000q30uvrsihpnon"},{"post_id":"cjvdywbkr000r30uv3gj5kouc","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbkt000t30uvld7jg1av"},{"post_id":"cjvdywbks000s30uv74zkasfd","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbku000v30uv6vhoj2mt"},{"post_id":"cjvdywbkt000u30uvxk6lgx24","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbkw000x30uv5uw84yun"},{"post_id":"cjvdywbkv000w30uvxbo5jp0i","tag_id":"cjvdywbjz000e30uvm6b4ywza","_id":"cjvdywbkx000z30uv9k5ze8pu"},{"post_id":"cjvdywbkw000y30uvvieczye3","tag_id":"cjvdywbjz000e30uvm6b4ywza","_id":"cjvdywbky001130uvyekwlo3q"},{"post_id":"cjvdywbkx001030uvd4c4utco","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbkz001330uvilp5ffav"},{"post_id":"cjvdywbky001230uvd6d3948a","tag_id":"cjvdywbk2000i30uvq56s8grh","_id":"cjvdywbl0001430uv429lk9y0"}],"Tag":[{"name":"Python","_id":"cjvdywbjj000230uv6fr39udr"},{"name":"digital circuit","_id":"cjvdywbjw000a30uv943pzqpv"},{"name":"Reading Notes","_id":"cjvdywbjz000e30uvm6b4ywza"},{"name":"Digital Circuit","_id":"cjvdywbk1000g30uv78yy3by8"},{"name":"python","_id":"cjvdywbk2000i30uvq56s8grh"},{"name":"liner algebra","_id":"cjvdywbk3000k30uv4sa6dyjn"}]}}